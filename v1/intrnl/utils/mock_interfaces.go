// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package utils is a generated GoMock package.
package utils

import (
	config "github.com/Allen-Career-Institute/go-bff-commons/v1/config"
	framework "github.com/Allen-Career-Institute/go-bff-commons/v1/framework"
	grpc "github.com/Allen-Career-Institute/go-bff-commons/v1/framework/grpc"
	clients "github.com/Allen-Career-Institute/go-bff-commons/v1/intrnl/clients"
	logger "github.com/Allen-Career-Institute/go-bff-commons/v1/pkg/logger"
	reflect "reflect"

	response "github.com/Allen-Career-Institute/common-protos/resource/v1/response"
	response0 "github.com/Allen-Career-Institute/common-protos/user_management/v1/response"
	configs "github.com/Allen-Career-Institute/go-kratos-commons/dynamicconfig/v1/configs"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// LoadCourseSyllabusResponseFromPreloadDS mocks base method.
func (m *MockManager) LoadCourseSyllabusResponseFromPreloadDS(ctx echo.Context, cnf *config.Config, log logger.Logger, courseID string, dsm *framework.DataSourceMappings, cm clients.Manager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadCourseSyllabusResponseFromPreloadDS", ctx, cnf, log, courseID, dsm, cm)
}

// LoadCourseSyllabusResponseFromPreloadDS indicates an expected call of LoadCourseSyllabusResponseFromPreloadDS.
func (mr *MockManagerMockRecorder) LoadCourseSyllabusResponseFromPreloadDS(ctx, cnf, log, courseID, dsm, cm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCourseSyllabusResponseFromPreloadDS", reflect.TypeOf((*MockManager)(nil).LoadCourseSyllabusResponseFromPreloadDS), ctx, cnf, log, courseID, dsm, cm)
}

// LoadCourseSyllabusV2ResponseFromPreloadDS mocks base method.
func (m *MockManager) LoadCourseSyllabusV2ResponseFromPreloadDS(ctx echo.Context, cnf *config.Config, log logger.Logger, courseID string, dsm *framework.DataSourceMappings, cm clients.Manager) (*response.GetCourseSyllabusV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCourseSyllabusV2ResponseFromPreloadDS", ctx, cnf, log, courseID, dsm, cm)
	ret0, _ := ret[0].(*response.GetCourseSyllabusV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCourseSyllabusV2ResponseFromPreloadDS indicates an expected call of LoadCourseSyllabusV2ResponseFromPreloadDS.
func (mr *MockManagerMockRecorder) LoadCourseSyllabusV2ResponseFromPreloadDS(ctx, cnf, log, courseID, dsm, cm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCourseSyllabusV2ResponseFromPreloadDS", reflect.TypeOf((*MockManager)(nil).LoadCourseSyllabusV2ResponseFromPreloadDS), ctx, cnf, log, courseID, dsm, cm)
}

// LoadOLTSCourseIDsFromPreloadDS mocks base method.
func (m *MockManager) LoadOLTSCourseIDsFromPreloadDS(ctx echo.Context, log logger.Logger, cnf *config.Config, tenantID, userIDInContext string, dsm *framework.DataSourceMappings, cm clients.Manager) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOLTSCourseIDsFromPreloadDS", ctx, log, cnf, tenantID, userIDInContext, dsm, cm)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOLTSCourseIDsFromPreloadDS indicates an expected call of LoadOLTSCourseIDsFromPreloadDS.
func (mr *MockManagerMockRecorder) LoadOLTSCourseIDsFromPreloadDS(ctx, log, cnf, tenantID, userIDInContext, dsm, cm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOLTSCourseIDsFromPreloadDS", reflect.TypeOf((*MockManager)(nil).LoadOLTSCourseIDsFromPreloadDS), ctx, log, cnf, tenantID, userIDInContext, dsm, cm)
}

// LoadStudentBatchDetailsFromPreloadDS mocks base method.
func (m *MockManager) LoadStudentBatchDetailsFromPreloadDS(ctx echo.Context, log logger.Logger, cnf *config.Config, tenantID, userIDInContext string, dsm *framework.DataSourceMappings, cm clients.Manager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadStudentBatchDetailsFromPreloadDS", ctx, log, cnf, tenantID, userIDInContext, dsm, cm)
}

// LoadStudentBatchDetailsFromPreloadDS indicates an expected call of LoadStudentBatchDetailsFromPreloadDS.
func (mr *MockManagerMockRecorder) LoadStudentBatchDetailsFromPreloadDS(ctx, log, cnf, tenantID, userIDInContext, dsm, cm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStudentBatchDetailsFromPreloadDS", reflect.TypeOf((*MockManager)(nil).LoadStudentBatchDetailsFromPreloadDS), ctx, log, cnf, tenantID, userIDInContext, dsm, cm)
}

// LoadUserDetailsFromPreloadDS mocks base method.
func (m *MockManager) LoadUserDetailsFromPreloadDS(ctx echo.Context, log logger.Logger, cnf *config.Config, dsm *framework.DataSourceMappings, cm clients.Manager, grpc grpc.Manager) (*response0.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserDetailsFromPreloadDS", ctx, log, cnf, dsm, cm, grpc)
	ret0, _ := ret[0].(*response0.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserDetailsFromPreloadDS indicates an expected call of LoadUserDetailsFromPreloadDS.
func (mr *MockManagerMockRecorder) LoadUserDetailsFromPreloadDS(ctx, log, cnf, dsm, cm, grpc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserDetailsFromPreloadDS", reflect.TypeOf((*MockManager)(nil).LoadUserDetailsFromPreloadDS), ctx, log, cnf, dsm, cm, grpc)
}

// MockDynamicConfig is a mock of DynamicConfig interface.
type MockDynamicConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicConfigMockRecorder
}

// MockDynamicConfigMockRecorder is the mock recorder for MockDynamicConfig.
type MockDynamicConfigMockRecorder struct {
	mock *MockDynamicConfig
}

// NewMockDynamicConfig creates a new mock instance.
func NewMockDynamicConfig(ctrl *gomock.Controller) *MockDynamicConfig {
	mock := &MockDynamicConfig{ctrl: ctrl}
	mock.recorder = &MockDynamicConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicConfig) EXPECT() *MockDynamicConfigMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDynamicConfig) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDynamicConfigMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDynamicConfig)(nil).Get), key)
}

// GetAsInterface mocks base method.
func (m *MockDynamicConfig) GetAsInterface(key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsInterface", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsInterface indicates an expected call of GetAsInterface.
func (mr *MockDynamicConfigMockRecorder) GetAsInterface(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsInterface", reflect.TypeOf((*MockDynamicConfig)(nil).GetAsInterface), key)
}

// Init mocks base method.
func (m *MockDynamicConfig) Init(config *configs.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDynamicConfigMockRecorder) Init(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDynamicConfig)(nil).Init), config)
}
