// Code generated by MockGen. DO NOT EDIT.
// Source: framework/grpc/pool_interface.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"
	time "time"

	grpcpool "github.com/ClifHouck/grpc-go-pool"
	gomock "github.com/golang/mock/gomock"
)

// MockGrpcPool is a mock of GrpcPool interface.
type MockGrpcPool struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcPoolMockRecorder
}

// MockGrpcPoolMockRecorder is the mock recorder for MockGrpcPool.
type MockGrpcPoolMockRecorder struct {
	mock *MockGrpcPool
}

// NewMockGrpcPool creates a new mock instance.
func NewMockGrpcPool(ctrl *gomock.Controller) *MockGrpcPool {
	mock := &MockGrpcPool{ctrl: ctrl}
	mock.recorder = &MockGrpcPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcPool) EXPECT() *MockGrpcPoolMockRecorder {
	return m.recorder
}

// NewWithContext mocks base method.
func (m *MockGrpcPool) NewPoolWithContext(ctx context.Context, factory grpcpool.FactoryWithContext, initialCap, maxCap int, idleTimeout, maxLifeDuration time.Duration) (*grpcpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPoolWithContext", ctx, factory, initialCap, maxCap, idleTimeout, maxLifeDuration)
	ret0, _ := ret[0].(*grpcpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWithContext indicates an expected call of NewWithContext.
func (mr *MockGrpcPoolMockRecorder) NewWithContext(ctx, factory, initialCap, maxCap, idleTimeout, maxLifeDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPoolWithContext", reflect.TypeOf((*MockGrpcPool)(nil).NewPoolWithContext), ctx, factory, initialCap, maxCap, idleTimeout, maxLifeDuration)
}
