// Code generated by mockery v2.33.1. DO NOT EDIT.

package grpc

import (
	config "github.com/Allen-Career-Institute/go-bff-commons/v1/config"

	echo "github.com/labstack/echo/v4"

	google_golang_orggrpc "google.golang.org/grpc"

	logger "github.com/Allen-Career-Institute/go-bff-commons/v1/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// MockManager1 is an autogenerated mock type for the Manager type
type MockManager1 struct {
	mock.Mock
}

// GetConn provides a mock function with given fields: ctx, log, client, cnf
func (_m *MockManager1) GetConn(ctx echo.Context, log logger.Logger, client string, cnf *config.CommonConfig) (google_golang_orggrpc.ClientConnInterface, error) {
	ret := _m.Called(ctx, log, client, cnf)

	var r0 google_golang_orggrpc.ClientConnInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, logger.Logger, string, *config.CommonConfig) (google_golang_orggrpc.ClientConnInterface, error)); ok {
		return rf(ctx, log, client, cnf)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, logger.Logger, string, *config.CommonConfig) google_golang_orggrpc.ClientConnInterface); ok {
		r0 = rf(ctx, log, client, cnf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(google_golang_orggrpc.ClientConnInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, logger.Logger, string, *config.CommonConfig) error); ok {
		r1 = rf(ctx, log, client, cnf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockManager creates a new instance of MockManager1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager1(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager1 {
	mock := &MockManager1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
