// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package grpc is a generated GoMock package.
package grpc

import (
	config "github.com/Allen-Career-Institute/go-bff-commons/v1/config"
	logger "github.com/Allen-Career-Institute/go-bff-commons/v1/pkg/logger"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	grpc "google.golang.org/grpc"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetConn mocks base method.
func (m *MockManager) GetConn(ctx echo.Context, log logger.Logger, client string, cnf *config.Config) (grpc.ClientConnInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", ctx, log, client, cnf)
	ret0, _ := ret[0].(grpc.ClientConnInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockManagerMockRecorder) GetConn(ctx, log, client, cnf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockManager)(nil).GetConn), ctx, log, client, cnf)
}
