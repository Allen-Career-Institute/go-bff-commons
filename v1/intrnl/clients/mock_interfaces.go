// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package clients is a generated GoMock package.
package clients

import (
	config "github.com/Allen-Career-Institute/go-bff-commons/v1/config"
	grpc "bff-service/framework/grpc"
	lmm "bff-service/internal/models/lmm"
	salesorchestrator "bff-service/internal/models/salesorchestrator"
	taaservice "bff-service/internal/models/taaservice"
	reflect "reflect"

	v1 "github.com/Allen-Career-Institute/common-protos/authentication/v1"
	request "github.com/Allen-Career-Institute/common-protos/authentication/v1/request"
	response "github.com/Allen-Career-Institute/common-protos/authentication/v1/response"
	v10 "github.com/Allen-Career-Institute/common-protos/authorization/v1"
	request0 "github.com/Allen-Career-Institute/common-protos/authorization/v1/request"
	response0 "github.com/Allen-Career-Institute/common-protos/authorization/v1/response"
	types "github.com/Allen-Career-Institute/common-protos/authorization/v1/types"
	request1 "github.com/Allen-Career-Institute/common-protos/bookmark/v1/request"
	response1 "github.com/Allen-Career-Institute/common-protos/bookmark/v1/response"
	request2 "github.com/Allen-Career-Institute/common-protos/cal/v1/request"
	response2 "github.com/Allen-Career-Institute/common-protos/cal/v1/response"
	request3 "github.com/Allen-Career-Institute/common-protos/care_corner/v1/request"
	response3 "github.com/Allen-Career-Institute/common-protos/care_corner/v1/response"
	request4 "github.com/Allen-Career-Institute/common-protos/chat/v1/request"
	response4 "github.com/Allen-Career-Institute/common-protos/chat/v1/response"
	request5 "github.com/Allen-Career-Institute/common-protos/checkout/v1/request"
	response5 "github.com/Allen-Career-Institute/common-protos/checkout/v1/response"
	request6 "github.com/Allen-Career-Institute/common-protos/checkout/v2/request"
	response6 "github.com/Allen-Career-Institute/common-protos/checkout/v2/response"
	request7 "github.com/Allen-Career-Institute/common-protos/classroom/v1/request"
	response7 "github.com/Allen-Career-Institute/common-protos/classroom/v1/response"
	requests "github.com/Allen-Career-Institute/common-protos/content_management/v1/non_academic_content/requests"
	responses "github.com/Allen-Career-Institute/common-protos/content_management/v1/non_academic_content/responses"
	request8 "github.com/Allen-Career-Institute/common-protos/discovery/v1/request"
	response8 "github.com/Allen-Career-Institute/common-protos/discovery/v1/response"
	request9 "github.com/Allen-Career-Institute/common-protos/doubtservice/v1/request"
	response9 "github.com/Allen-Career-Institute/common-protos/doubtservice/v1/response"
	request10 "github.com/Allen-Career-Institute/common-protos/ecomm_workflows/v1/request"
	response10 "github.com/Allen-Career-Institute/common-protos/ecomm_workflows/v1/response"
	request11 "github.com/Allen-Career-Institute/common-protos/homework/v1/request"
	response11 "github.com/Allen-Career-Institute/common-protos/homework/v1/response"
	request12 "github.com/Allen-Career-Institute/common-protos/improvement_book/v1/request"
	response12 "github.com/Allen-Career-Institute/common-protos/improvement_book/v1/response"
	request13 "github.com/Allen-Career-Institute/common-protos/learning_journey/v1/request"
	response13 "github.com/Allen-Career-Institute/common-protos/learning_journey/v1/response"
	request14 "github.com/Allen-Career-Institute/common-protos/learning_material/v1/request"
	response14 "github.com/Allen-Career-Institute/common-protos/learning_material/v1/response"
	request15 "github.com/Allen-Career-Institute/common-protos/listing/v1/request"
	response15 "github.com/Allen-Career-Institute/common-protos/listing/v1/response"
	request16 "github.com/Allen-Career-Institute/common-protos/listing/v2/request"
	response16 "github.com/Allen-Career-Institute/common-protos/listing/v2/response"
	request17 "github.com/Allen-Career-Institute/common-protos/notice_board/v1/request"
	response17 "github.com/Allen-Career-Institute/common-protos/notice_board/v1/response"
	request18 "github.com/Allen-Career-Institute/common-protos/notification/v1/request"
	response18 "github.com/Allen-Career-Institute/common-protos/notification/v1/response"
	response19 "github.com/Allen-Career-Institute/common-protos/notificationcenter/v1/response"
	request19 "github.com/Allen-Career-Institute/common-protos/offer/v1/request"
	response20 "github.com/Allen-Career-Institute/common-protos/offer/v1/response"
	request20 "github.com/Allen-Career-Institute/common-protos/order/v1/request"
	response21 "github.com/Allen-Career-Institute/common-protos/order/v1/response"
	v11 "github.com/Allen-Career-Institute/common-protos/page_service/v1"
	request21 "github.com/Allen-Career-Institute/common-protos/planning_and_scheduling/v1/request"
	response22 "github.com/Allen-Career-Institute/common-protos/planning_and_scheduling/v1/response"
	request22 "github.com/Allen-Career-Institute/common-protos/policy/v1/request"
	response23 "github.com/Allen-Career-Institute/common-protos/policy/v1/response"
	v12 "github.com/Allen-Career-Institute/common-protos/qb_migration/v1/paper"
	v13 "github.com/Allen-Career-Institute/common-protos/qb_migration/v1/paperContent"
	v14 "github.com/Allen-Career-Institute/common-protos/qb_migration/v1/qbMigration"
	request23 "github.com/Allen-Career-Institute/common-protos/question_collection/core/v1/request"
	response24 "github.com/Allen-Career-Institute/common-protos/question_collection/core/v1/response"
	customTestRequest "github.com/Allen-Career-Institute/common-protos/question_collection/custom_test/v1/request"
	customTestResponse "github.com/Allen-Career-Institute/common-protos/question_collection/custom_test/v1/response"
	request24 "github.com/Allen-Career-Institute/common-protos/question_collection/homework_qc/v1/request"
	response25 "github.com/Allen-Career-Institute/common-protos/question_collection/homework_qc/v1/response"
	v15 "github.com/Allen-Career-Institute/common-protos/questionbank/v1/feedback/request"
	v16 "github.com/Allen-Career-Institute/common-protos/questionbank/v1/feedback/response"
	v17 "github.com/Allen-Career-Institute/common-protos/questionbank/v1/questionSets/type"
	v18 "github.com/Allen-Career-Institute/common-protos/questionbank/v1/questions/request"
	v19 "github.com/Allen-Career-Institute/common-protos/questionbank/v1/questions/response"
	v110 "github.com/Allen-Career-Institute/common-protos/resource/v1"
	request25 "github.com/Allen-Career-Institute/common-protos/resource/v1/request"
	response26 "github.com/Allen-Career-Institute/common-protos/resource/v1/response"
	types0 "github.com/Allen-Career-Institute/common-protos/resource/v1/types"
	request26 "github.com/Allen-Career-Institute/common-protos/resource_orchestrator/v1/request"
	response27 "github.com/Allen-Career-Institute/common-protos/resource_orchestrator/v1/response"
	request27 "github.com/Allen-Career-Institute/common-protos/survey_manager/v1/request"
	response28 "github.com/Allen-Career-Institute/common-protos/survey_manager/v1/response"
	request28 "github.com/Allen-Career-Institute/common-protos/taxonomy/v1/request"
	response29 "github.com/Allen-Career-Institute/common-protos/taxonomy/v1/response"
	request29 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_engine/v1/request"
	response30 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_engine/v1/response"
	reply "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/academic/v1/reply"
	request30 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/academic/v1/request"
	reply0 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/admin/v1/reply"
	request31 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/admin/v1/request"
	reply1 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/student/v1/reply"
	request32 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_service/student/v1/request"
	request33 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_workflow/v1/request"
	response31 "github.com/Allen-Career-Institute/common-protos/test_and_assessment_workflow/v1/response"
	request34 "github.com/Allen-Career-Institute/common-protos/uas/v1/request"
	response32 "github.com/Allen-Career-Institute/common-protos/uas/v1/response"
	request35 "github.com/Allen-Career-Institute/common-protos/user_activity/v1/request"
	response33 "github.com/Allen-Career-Institute/common-protos/user_activity/v1/response"
	v111 "github.com/Allen-Career-Institute/common-protos/user_management/v1"
	request36 "github.com/Allen-Career-Institute/common-protos/user_management/v1/request"
	response34 "github.com/Allen-Career-Institute/common-protos/user_management/v1/response"
	types1 "github.com/Allen-Career-Institute/common-protos/user_management/v1/types"
	models "github.com/Allen-Career-Institute/go-kratos-commons/abservice/v1/models"
	models0 "github.com/Allen-Career-Institute/go-kratos-commons/latch_and_levers/v1/models"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ABGetVariant mocks base method.
func (m *MockManager) ABGetVariant(ctx echo.Context, req *models.EvaluateABRequest) (*models.EvaluateABResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ABGetVariant", ctx, req)
	ret0, _ := ret[0].(*models.EvaluateABResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ABGetVariant indicates an expected call of ABGetVariant.
func (mr *MockManagerMockRecorder) ABGetVariant(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ABGetVariant", reflect.TypeOf((*MockManager)(nil).ABGetVariant), ctx, req)
}

// AcknowledgeUpload mocks base method.
func (m *MockManager) AcknowledgeUpload(c echo.Context, req *request19.AcknowledgeUpload) (*response20.AcknowledgeUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcknowledgeUpload", c, req)
	ret0, _ := ret[0].(*response20.AcknowledgeUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcknowledgeUpload indicates an expected call of AcknowledgeUpload.
func (mr *MockManagerMockRecorder) AcknowledgeUpload(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeUpload", reflect.TypeOf((*MockManager)(nil).AcknowledgeUpload), c, req)
}

// ActivateListing mocks base method.
func (m *MockManager) ActivateListing(c echo.Context, req *request15.ActivateListingRequest) (*response15.ActivateListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateListing", c, req)
	ret0, _ := ret[0].(*response15.ActivateListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateListing indicates an expected call of ActivateListing.
func (mr *MockManagerMockRecorder) ActivateListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateListing", reflect.TypeOf((*MockManager)(nil).ActivateListing), c, req)
}

// ActivateOffer mocks base method.
func (m *MockManager) ActivateOffer(c echo.Context, req *request19.Activate) (*response20.Activate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateOffer", c, req)
	ret0, _ := ret[0].(*response20.Activate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateOffer indicates an expected call of ActivateOffer.
func (mr *MockManagerMockRecorder) ActivateOffer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateOffer", reflect.TypeOf((*MockManager)(nil).ActivateOffer), c, req)
}

// AddCourseContent mocks base method.
func (m *MockManager) AddCourseContent(c echo.Context, arg1 *config.Config, request *request25.AddCourseContentRequest) (*response26.AddCourseContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourseContent", c, arg1, request)
	ret0, _ := ret[0].(*response26.AddCourseContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourseContent indicates an expected call of AddCourseContent.
func (mr *MockManagerMockRecorder) AddCourseContent(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourseContent", reflect.TypeOf((*MockManager)(nil).AddCourseContent), c, arg1, request)
}

// AddCourseSyllabus mocks base method.
func (m *MockManager) AddCourseSyllabus(c echo.Context, arg1 *config.Config, request *request25.AddCourseSyllabusRequest) (*response26.AddCourseSyllabusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourseSyllabus", c, arg1, request)
	ret0, _ := ret[0].(*response26.AddCourseSyllabusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourseSyllabus indicates an expected call of AddCourseSyllabus.
func (mr *MockManagerMockRecorder) AddCourseSyllabus(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourseSyllabus", reflect.TypeOf((*MockManager)(nil).AddCourseSyllabus), c, arg1, request)
}

// AddCourseSyllabusV2 mocks base method.
func (m *MockManager) AddCourseSyllabusV2(c echo.Context, arg1 *config.Config, request *request25.AddCourseSyllabusV2Request) (*response26.AddCourseSyllabusV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourseSyllabusV2", c, arg1, request)
	ret0, _ := ret[0].(*response26.AddCourseSyllabusV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCourseSyllabusV2 indicates an expected call of AddCourseSyllabusV2.
func (mr *MockManagerMockRecorder) AddCourseSyllabusV2(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourseSyllabusV2", reflect.TypeOf((*MockManager)(nil).AddCourseSyllabusV2), c, arg1, request)
}

// AddFacility mocks base method.
func (m *MockManager) AddFacility(c echo.Context, arg1 *config.Config, request *request25.AddFacilityRequest) (*response26.AddFacilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFacility", c, arg1, request)
	ret0, _ := ret[0].(*response26.AddFacilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFacility indicates an expected call of AddFacility.
func (mr *MockManagerMockRecorder) AddFacility(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFacility", reflect.TypeOf((*MockManager)(nil).AddFacility), c, arg1, request)
}

// AddGroupMentorshipRule mocks base method.
func (m *MockManager) AddGroupMentorshipRule(c echo.Context, request *request3.AddGroupMentorshipRuleRequest) (*response3.AddGroupMentorshipRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupMentorshipRule", c, request)
	ret0, _ := ret[0].(*response3.AddGroupMentorshipRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupMentorshipRule indicates an expected call of AddGroupMentorshipRule.
func (mr *MockManagerMockRecorder) AddGroupMentorshipRule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupMentorshipRule", reflect.TypeOf((*MockManager)(nil).AddGroupMentorshipRule), c, request)
}

// AddLecturePlansToMeta mocks base method.
func (m *MockManager) AddLecturePlansToMeta(c echo.Context, request *request25.LecturePlansAddRequest) (*response26.LecturePlansToMetaAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLecturePlansToMeta", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansToMetaAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLecturePlansToMeta indicates an expected call of AddLecturePlansToMeta.
func (mr *MockManagerMockRecorder) AddLecturePlansToMeta(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLecturePlansToMeta", reflect.TypeOf((*MockManager)(nil).AddLecturePlansToMeta), c, request)
}

// AddNodeForQB mocks base method.
func (m *MockManager) AddNodeForQB(c echo.Context, request *request28.AddNodeInTaxonomyRequest) (*response29.AddNodeInTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodeForQB", c, request)
	ret0, _ := ret[0].(*response29.AddNodeInTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNodeForQB indicates an expected call of AddNodeForQB.
func (mr *MockManagerMockRecorder) AddNodeForQB(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeForQB", reflect.TypeOf((*MockManager)(nil).AddNodeForQB), c, request)
}

// AddNodeInTaxonomy mocks base method.
func (m *MockManager) AddNodeInTaxonomy(c echo.Context, request *request28.AddNodeInTaxonomyRequest) (*response29.AddNodeInTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodeInTaxonomy", c, request)
	ret0, _ := ret[0].(*response29.AddNodeInTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNodeInTaxonomy indicates an expected call of AddNodeInTaxonomy.
func (mr *MockManagerMockRecorder) AddNodeInTaxonomy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeInTaxonomy", reflect.TypeOf((*MockManager)(nil).AddNodeInTaxonomy), c, request)
}

// AddUserSkillMapping mocks base method.
func (m *MockManager) AddUserSkillMapping(c echo.Context, request *request25.AddUserSkillRequest) (*response26.AddUserSkillMappingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserSkillMapping", c, request)
	ret0, _ := ret[0].(*response26.AddUserSkillMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserSkillMapping indicates an expected call of AddUserSkillMapping.
func (mr *MockManagerMockRecorder) AddUserSkillMapping(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserSkillMapping", reflect.TypeOf((*MockManager)(nil).AddUserSkillMapping), c, request)
}

// AdminDeleteUser mocks base method.
func (m *MockManager) AdminDeleteUser(c echo.Context, req *request36.DeleteUserRequest) (*response34.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDeleteUser", c, req)
	ret0, _ := ret[0].(*response34.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDeleteUser indicates an expected call of AdminDeleteUser.
func (mr *MockManagerMockRecorder) AdminDeleteUser(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteUser", reflect.TypeOf((*MockManager)(nil).AdminDeleteUser), c, req)
}

// AdminUpdateUser mocks base method.
func (m *MockManager) AdminUpdateUser(c echo.Context, req *request36.AdminUpdateUserRequest) (*response34.AdminUpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateUser", c, req)
	ret0, _ := ret[0].(*response34.AdminUpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateUser indicates an expected call of AdminUpdateUser.
func (mr *MockManagerMockRecorder) AdminUpdateUser(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateUser", reflect.TypeOf((*MockManager)(nil).AdminUpdateUser), c, req)
}

// AdsatRegistration mocks base method.
func (m *MockManager) AdsatRegistration(c echo.Context, request salesorchestrator.AdsatRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdsatRegistration", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdsatRegistration indicates an expected call of AdsatRegistration.
func (mr *MockManagerMockRecorder) AdsatRegistration(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdsatRegistration", reflect.TypeOf((*MockManager)(nil).AdsatRegistration), c, request)
}

// ApplyCoupons mocks base method.
func (m *MockManager) ApplyCoupons(c echo.Context, req *request5.ApplyCouponsRequest) (*response5.ApplyCouponsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCoupons", c, req)
	ret0, _ := ret[0].(*response5.ApplyCouponsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyCoupons indicates an expected call of ApplyCoupons.
func (mr *MockManagerMockRecorder) ApplyCoupons(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCoupons", reflect.TypeOf((*MockManager)(nil).ApplyCoupons), c, req)
}

// AppstorePaymentAck mocks base method.
func (m *MockManager) AppstorePaymentAck(c echo.Context, payload interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppstorePaymentAck", c, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppstorePaymentAck indicates an expected call of AppstorePaymentAck.
func (mr *MockManagerMockRecorder) AppstorePaymentAck(c, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppstorePaymentAck", reflect.TypeOf((*MockManager)(nil).AppstorePaymentAck), c, payload)
}

// AssignDefaultMentorToBatchList mocks base method.
func (m *MockManager) AssignDefaultMentorToBatchList(c echo.Context, req *request3.AssignDefaultMentorRequest) (*response3.AssignDefaultMentorReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDefaultMentorToBatchList", c, req)
	ret0, _ := ret[0].(*response3.AssignDefaultMentorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDefaultMentorToBatchList indicates an expected call of AssignDefaultMentorToBatchList.
func (mr *MockManagerMockRecorder) AssignDefaultMentorToBatchList(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDefaultMentorToBatchList", reflect.TypeOf((*MockManager)(nil).AssignDefaultMentorToBatchList), c, req)
}

// AttachQuestionPaper mocks base method.
func (m *MockManager) AttachQuestionPaper(ctx echo.Context, request *request31.AttachQuestionPaperRequest) (*reply0.AttachQuestionPaperReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachQuestionPaper", ctx, request)
	ret0, _ := ret[0].(*reply0.AttachQuestionPaperReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachQuestionPaper indicates an expected call of AttachQuestionPaper.
func (mr *MockManagerMockRecorder) AttachQuestionPaper(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachQuestionPaper", reflect.TypeOf((*MockManager)(nil).AttachQuestionPaper), ctx, request)
}

// AttachSolutions mocks base method.
func (m *MockManager) AttachSolutions(ctx echo.Context, request *request31.AttachSolutionsRequest) (*reply0.AttachSolutionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachSolutions", ctx, request)
	ret0, _ := ret[0].(*reply0.AttachSolutionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachSolutions indicates an expected call of AttachSolutions.
func (mr *MockManagerMockRecorder) AttachSolutions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSolutions", reflect.TypeOf((*MockManager)(nil).AttachSolutions), ctx, request)
}

// BatchCreateTests mocks base method.
func (m *MockManager) BatchCreateTests(ctx echo.Context, request *request31.BatchCreateTestRequest) (*reply0.BatchCreateTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateTests", ctx, request)
	ret0, _ := ret[0].(*reply0.BatchCreateTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateTests indicates an expected call of BatchCreateTests.
func (mr *MockManagerMockRecorder) BatchCreateTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateTests", reflect.TypeOf((*MockManager)(nil).BatchCreateTests), ctx, request)
}

// BatchGetHomework mocks base method.
func (m *MockManager) BatchGetHomework(ctx echo.Context, req *request11.SearchHomeworkRequest) (*response11.HomeworkList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetHomework", ctx, req)
	ret0, _ := ret[0].(*response11.HomeworkList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetHomework indicates an expected call of BatchGetHomework.
func (mr *MockManagerMockRecorder) BatchGetHomework(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetHomework", reflect.TypeOf((*MockManager)(nil).BatchGetHomework), ctx, req)
}

// BatchGetQuestionCollectionStats mocks base method.
func (m *MockManager) BatchGetQuestionCollectionStats(ctx echo.Context, filterReq *request23.BatchGetQuestionCollectionStatsRequest) (*response24.BatchGetQuestionCollectionStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetQuestionCollectionStats", ctx, filterReq)
	ret0, _ := ret[0].(*response24.BatchGetQuestionCollectionStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetQuestionCollectionStats indicates an expected call of BatchGetQuestionCollectionStats.
func (mr *MockManagerMockRecorder) BatchGetQuestionCollectionStats(ctx, filterReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetQuestionCollectionStats", reflect.TypeOf((*MockManager)(nil).BatchGetQuestionCollectionStats), ctx, filterReq)
}

// BatchGetTest mocks base method.
func (m *MockManager) BatchGetTest(ctx echo.Context, request *request31.BatchGetTestRequest) (*reply0.BatchGetTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTest", ctx, request)
	ret0, _ := ret[0].(*reply0.BatchGetTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTest indicates an expected call of BatchGetTest.
func (mr *MockManagerMockRecorder) BatchGetTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTest", reflect.TypeOf((*MockManager)(nil).BatchGetTest), ctx, request)
}

// BulkAssignMentorToStudent mocks base method.
func (m *MockManager) BulkAssignMentorToStudent(c echo.Context, request *request3.BulkAssignMentorToStudentRequest) (*response3.BulkAssignMentorToStudentReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkAssignMentorToStudent", c, request)
	ret0, _ := ret[0].(*response3.BulkAssignMentorToStudentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkAssignMentorToStudent indicates an expected call of BulkAssignMentorToStudent.
func (mr *MockManagerMockRecorder) BulkAssignMentorToStudent(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkAssignMentorToStudent", reflect.TypeOf((*MockManager)(nil).BulkAssignMentorToStudent), c, request)
}

// BulkCardStatusUpdate mocks base method.
func (m *MockManager) BulkCardStatusUpdate(c echo.Context, request *request36.BulkCardStatusUpdateRequest) (*response34.BulkCardStatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCardStatusUpdate", c, request)
	ret0, _ := ret[0].(*response34.BulkCardStatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCardStatusUpdate indicates an expected call of BulkCardStatusUpdate.
func (mr *MockManagerMockRecorder) BulkCardStatusUpdate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCardStatusUpdate", reflect.TypeOf((*MockManager)(nil).BulkCardStatusUpdate), c, request)
}

// BulkCreateClassSchedule mocks base method.
func (m *MockManager) BulkCreateClassSchedule(c echo.Context, request *request25.ClassScheduleBulkCreateRequest) (*response26.ClassScheduleBulkCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateClassSchedule", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleBulkCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreateClassSchedule indicates an expected call of BulkCreateClassSchedule.
func (mr *MockManagerMockRecorder) BulkCreateClassSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateClassSchedule", reflect.TypeOf((*MockManager)(nil).BulkCreateClassSchedule), c, request)
}

// BulkCreateClassScheduleV2 mocks base method.
func (m *MockManager) BulkCreateClassScheduleV2(c echo.Context, request *request25.ClassScheduleBulkCreateRequest) (*response26.ClassScheduleBulkCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateClassScheduleV2", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleBulkCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreateClassScheduleV2 indicates an expected call of BulkCreateClassScheduleV2.
func (mr *MockManagerMockRecorder) BulkCreateClassScheduleV2(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateClassScheduleV2", reflect.TypeOf((*MockManager)(nil).BulkCreateClassScheduleV2), c, request)
}

// BulkCreateLearningJourneys mocks base method.
func (m *MockManager) BulkCreateLearningJourneys(ctx echo.Context, request *request13.BulkCreateLearningJourneyRequestV2) (*response13.BulkCreateLearningJourneyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateLearningJourneys", ctx, request)
	ret0, _ := ret[0].(*response13.BulkCreateLearningJourneyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreateLearningJourneys indicates an expected call of BulkCreateLearningJourneys.
func (mr *MockManagerMockRecorder) BulkCreateLearningJourneys(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateLearningJourneys", reflect.TypeOf((*MockManager)(nil).BulkCreateLearningJourneys), ctx, request)
}

// BulkCreateMentorshipBatches mocks base method.
func (m *MockManager) BulkCreateMentorshipBatches(c echo.Context, request *request3.BulkCreateMentorshipBatchRequest) (*response3.BulkCreateMentorshipBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateMentorshipBatches", c, request)
	ret0, _ := ret[0].(*response3.BulkCreateMentorshipBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreateMentorshipBatches indicates an expected call of BulkCreateMentorshipBatches.
func (mr *MockManagerMockRecorder) BulkCreateMentorshipBatches(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateMentorshipBatches", reflect.TypeOf((*MockManager)(nil).BulkCreateMentorshipBatches), c, request)
}

// BulkGroupMentorshipRuleCreateUpload mocks base method.
func (m *MockManager) BulkGroupMentorshipRuleCreateUpload(c echo.Context, request *request3.BulkGroupMentorshipRulesCreateUploadRequest) (*response3.BulkGroupMentorshipRulesCreateUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGroupMentorshipRuleCreateUpload", c, request)
	ret0, _ := ret[0].(*response3.BulkGroupMentorshipRulesCreateUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGroupMentorshipRuleCreateUpload indicates an expected call of BulkGroupMentorshipRuleCreateUpload.
func (mr *MockManagerMockRecorder) BulkGroupMentorshipRuleCreateUpload(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGroupMentorshipRuleCreateUpload", reflect.TypeOf((*MockManager)(nil).BulkGroupMentorshipRuleCreateUpload), c, request)
}

// BulkUpdateClassSchedule mocks base method.
func (m *MockManager) BulkUpdateClassSchedule(c echo.Context, request *request25.ClassScheduleBulkUpdateRequest) (*response26.ClassScheduleBulkUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateClassSchedule", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleBulkUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdateClassSchedule indicates an expected call of BulkUpdateClassSchedule.
func (mr *MockManagerMockRecorder) BulkUpdateClassSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateClassSchedule", reflect.TypeOf((*MockManager)(nil).BulkUpdateClassSchedule), c, request)
}

// CancelTest mocks base method.
func (m *MockManager) CancelTest(ctx echo.Context, request *request31.CancelTestRequest) (*reply0.CancelTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTest", ctx, request)
	ret0, _ := ret[0].(*reply0.CancelTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTest indicates an expected call of CancelTest.
func (mr *MockManagerMockRecorder) CancelTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTest", reflect.TypeOf((*MockManager)(nil).CancelTest), ctx, request)
}

// CheckCredentials mocks base method.
func (m *MockManager) CheckCredentials(c echo.Context, req *request36.CheckCredentialsRequest) (*response34.CheckCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCredentials", c, req)
	ret0, _ := ret[0].(*response34.CheckCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCredentials indicates an expected call of CheckCredentials.
func (mr *MockManagerMockRecorder) CheckCredentials(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCredentials", reflect.TypeOf((*MockManager)(nil).CheckCredentials), c, req)
}

// CheckIfUserHasBioBotDoubt mocks base method.
func (m *MockManager) CheckIfUserHasBioBotDoubt(c echo.Context, req *request9.CheckIfUserHasBioBotDoubtRequest) (*response9.CheckIfUserHasBioBotDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserHasBioBotDoubt", c, req)
	ret0, _ := ret[0].(*response9.CheckIfUserHasBioBotDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserHasBioBotDoubt indicates an expected call of CheckIfUserHasBioBotDoubt.
func (mr *MockManagerMockRecorder) CheckIfUserHasBioBotDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserHasBioBotDoubt", reflect.TypeOf((*MockManager)(nil).CheckIfUserHasBioBotDoubt), c, req)
}

// ClearRelatedNodes mocks base method.
func (m *MockManager) ClearRelatedNodes(c echo.Context, request *request28.ClearRelatedNodesRequest) (*response29.ClearRelatedNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRelatedNodes", c, request)
	ret0, _ := ret[0].(*response29.ClearRelatedNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRelatedNodes indicates an expected call of ClearRelatedNodes.
func (mr *MockManagerMockRecorder) ClearRelatedNodes(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRelatedNodes", reflect.TypeOf((*MockManager)(nil).ClearRelatedNodes), c, request)
}

// ClonePolicy mocks base method.
func (m *MockManager) ClonePolicy(c echo.Context, request *request22.ClonePolicyRequest) (*response23.ClonePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClonePolicy", c, request)
	ret0, _ := ret[0].(*response23.ClonePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClonePolicy indicates an expected call of ClonePolicy.
func (mr *MockManagerMockRecorder) ClonePolicy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClonePolicy", reflect.TypeOf((*MockManager)(nil).ClonePolicy), c, request)
}

// CloseAndInitiateUserSteps mocks base method.
func (m *MockManager) CloseAndInitiateUserSteps(ctx echo.Context, req *request13.CloseAndInitiateStepRequest) (*response13.CloseAndInitiateStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndInitiateUserSteps", ctx, req)
	ret0, _ := ret[0].(*response13.CloseAndInitiateStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndInitiateUserSteps indicates an expected call of CloseAndInitiateUserSteps.
func (mr *MockManagerMockRecorder) CloseAndInitiateUserSteps(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndInitiateUserSteps", reflect.TypeOf((*MockManager)(nil).CloseAndInitiateUserSteps), ctx, req)
}

// CompleteMultiPartUpload mocks base method.
func (m *MockManager) CompleteMultiPartUpload(ctx echo.Context, req *requests.CompleteNACPartUploadRequest) (*responses.OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultiPartUpload", ctx, req)
	ret0, _ := ret[0].(*responses.OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultiPartUpload indicates an expected call of CompleteMultiPartUpload.
func (mr *MockManagerMockRecorder) CompleteMultiPartUpload(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultiPartUpload", reflect.TypeOf((*MockManager)(nil).CompleteMultiPartUpload), ctx, req)
}

// CompleteMultipartUploadForMaterial mocks base method.
func (m *MockManager) CompleteMultipartUploadForMaterial(ctx echo.Context, req *request14.CompleteMaterialMultiPartUploadRequest) (*response14.OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUploadForMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUploadForMaterial indicates an expected call of CompleteMultipartUploadForMaterial.
func (mr *MockManagerMockRecorder) CompleteMultipartUploadForMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUploadForMaterial", reflect.TypeOf((*MockManager)(nil).CompleteMultipartUploadForMaterial), ctx, req)
}

// CompleteThumbnailUpload mocks base method.
func (m *MockManager) CompleteThumbnailUpload(ctx echo.Context, req *request14.CompleteThumbnailUploadRequest) (*response14.CompleteUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteThumbnailUpload", ctx, req)
	ret0, _ := ret[0].(*response14.CompleteUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteThumbnailUpload indicates an expected call of CompleteThumbnailUpload.
func (mr *MockManagerMockRecorder) CompleteThumbnailUpload(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteThumbnailUpload", reflect.TypeOf((*MockManager)(nil).CompleteThumbnailUpload), ctx, req)
}

// CopyCourseContent mocks base method.
func (m *MockManager) CopyCourseContent(c echo.Context, cnf *config.Config, p *request25.CopyCourseContentRequest) (*response26.CopyCourseContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyCourseContent", c, cnf, p)
	ret0, _ := ret[0].(*response26.CopyCourseContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyCourseContent indicates an expected call of CopyCourseContent.
func (mr *MockManagerMockRecorder) CopyCourseContent(c, cnf, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyCourseContent", reflect.TypeOf((*MockManager)(nil).CopyCourseContent), c, cnf, p)
}

// CopyHomeworkQuestionCollection mocks base method.
func (m *MockManager) CopyHomeworkQuestionCollection(ctx echo.Context, req *request24.CopyHomeworkQuestionCollectionRequest) (*response25.GetHomeworkQuestionCollectionMergedViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyHomeworkQuestionCollection", ctx, req)
	ret0, _ := ret[0].(*response25.GetHomeworkQuestionCollectionMergedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyHomeworkQuestionCollection indicates an expected call of CopyHomeworkQuestionCollection.
func (mr *MockManagerMockRecorder) CopyHomeworkQuestionCollection(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyHomeworkQuestionCollection", reflect.TypeOf((*MockManager)(nil).CopyHomeworkQuestionCollection), ctx, req)
}

// CourseChangeRetry mocks base method.
func (m *MockManager) CourseChangeRetry(c echo.Context, request *request26.CourseChangeRetryRequest) (*wrapperspb.BoolValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CourseChangeRetry", c, request)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CourseChangeRetry indicates an expected call of CourseChangeRetry.
func (mr *MockManagerMockRecorder) CourseChangeRetry(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CourseChangeRetry", reflect.TypeOf((*MockManager)(nil).CourseChangeRetry), c, request)
}

// CourseDetail mocks base method.
func (m *MockManager) CourseDetail(c echo.Context, request *request25.CourseRequest) (*response26.CourseDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CourseDetail", c, request)
	ret0, _ := ret[0].(*response26.CourseDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CourseDetail indicates an expected call of CourseDetail.
func (mr *MockManagerMockRecorder) CourseDetail(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CourseDetail", reflect.TypeOf((*MockManager)(nil).CourseDetail), c, request)
}

// CreateBatch mocks base method.
func (m *MockManager) CreateBatch(c echo.Context, arg1 *config.Config, request *request25.CreateBatchRequest) (*response26.CreateBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", c, arg1, request)
	ret0, _ := ret[0].(*response26.CreateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockManagerMockRecorder) CreateBatch(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockManager)(nil).CreateBatch), c, arg1, request)
}

// CreateBookmark mocks base method.
func (m *MockManager) CreateBookmark(ctx echo.Context, req *request1.CreateBookmarkRequest) (*response1.BookmarkAckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", ctx, req)
	ret0, _ := ret[0].(*response1.BookmarkAckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockManagerMockRecorder) CreateBookmark(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockManager)(nil).CreateBookmark), ctx, req)
}

// CreateBulkNAC mocks base method.
func (m *MockManager) CreateBulkNAC(ctx echo.Context, req *requests.CreateBulkNACRequest) (*responses.CreateBulkNACResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkNAC", ctx, req)
	ret0, _ := ret[0].(*responses.CreateBulkNACResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulkNAC indicates an expected call of CreateBulkNAC.
func (mr *MockManagerMockRecorder) CreateBulkNAC(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkNAC", reflect.TypeOf((*MockManager)(nil).CreateBulkNAC), ctx, req)
}

// CreateCart mocks base method.
func (m *MockManager) CreateCart(c echo.Context, req *request5.CreateCartRequest) (*response5.CreateCartReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", c, req)
	ret0, _ := ret[0].(*response5.CreateCartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockManagerMockRecorder) CreateCart(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockManager)(nil).CreateCart), c, req)
}

// CreateCartV2 mocks base method.
func (m *MockManager) CreateCartV2(c echo.Context, req *request6.CreateCartRequest) (*response6.CreateCartReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartV2", c, req)
	ret0, _ := ret[0].(*response6.CreateCartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartV2 indicates an expected call of CreateCartV2.
func (mr *MockManagerMockRecorder) CreateCartV2(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartV2", reflect.TypeOf((*MockManager)(nil).CreateCartV2), c, req)
}

// CreateCheckout mocks base method.
func (m *MockManager) CreateCheckout(c echo.Context, req *request5.CreateCheckoutRequest) (*response5.CreateCheckoutReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckout", c, req)
	ret0, _ := ret[0].(*response5.CreateCheckoutReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckout indicates an expected call of CreateCheckout.
func (mr *MockManagerMockRecorder) CreateCheckout(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckout", reflect.TypeOf((*MockManager)(nil).CreateCheckout), c, req)
}

// CreateClassSchedule mocks base method.
func (m *MockManager) CreateClassSchedule(c echo.Context, request *request25.ClassScheduleCreateRequest) (*response26.ClassScheduleCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClassSchedule", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClassSchedule indicates an expected call of CreateClassSchedule.
func (mr *MockManagerMockRecorder) CreateClassSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassSchedule", reflect.TypeOf((*MockManager)(nil).CreateClassSchedule), c, request)
}

// CreateCourse mocks base method.
func (m *MockManager) CreateCourse(c echo.Context, arg1 *config.Config, request *request25.CreateCourseRequest) (*response26.CreateCourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", c, arg1, request)
	ret0, _ := ret[0].(*response26.CreateCourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockManagerMockRecorder) CreateCourse(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockManager)(nil).CreateCourse), c, arg1, request)
}

// CreateCourseSyllabusFromExisting mocks base method.
func (m *MockManager) CreateCourseSyllabusFromExisting(c echo.Context, arg1 *config.Config, courseID, existingCourseID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseSyllabusFromExisting", c, arg1, courseID, existingCourseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourseSyllabusFromExisting indicates an expected call of CreateCourseSyllabusFromExisting.
func (mr *MockManagerMockRecorder) CreateCourseSyllabusFromExisting(c, arg1, courseID, existingCourseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseSyllabusFromExisting", reflect.TypeOf((*MockManager)(nil).CreateCourseSyllabusFromExisting), c, arg1, courseID, existingCourseID)
}

// CreateCustomTestQuestionCollection mocks base method.
func (m *MockManager) CreateCustomTestQuestionCollection(ctx echo.Context, req *customTestRequest.CreateQuestionCollectionRequest) (*customTestResponse.CreateQuestionCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomTestQuestionCollection", ctx, req)
	ret0, _ := ret[0].(*customTestResponse.CreateQuestionCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomTestQuestionCollection indicates an expected call of CreateCustomTestQuestionCollection.
func (mr *MockManagerMockRecorder) CreateCustomTestQuestionCollection(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomTestQuestionCollection", reflect.TypeOf((*MockManager)(nil).CreateCustomTestQuestionCollection), ctx, req)
}

// CreateDoubt mocks base method.
func (m *MockManager) CreateDoubt(c echo.Context, req *request9.CreateDoubtRequest) (*response9.CreateDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoubt", c, req)
	ret0, _ := ret[0].(*response9.CreateDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoubt indicates an expected call of CreateDoubt.
func (mr *MockManagerMockRecorder) CreateDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoubt", reflect.TypeOf((*MockManager)(nil).CreateDoubt), c, req)
}

// CreateDoubtReply mocks base method.
func (m *MockManager) CreateDoubtReply(c echo.Context, req *request9.CreateDoubtReply, doubtID string) (*response9.CreateDoubtReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoubtReply", c, req, doubtID)
	ret0, _ := ret[0].(*response9.CreateDoubtReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoubtReply indicates an expected call of CreateDoubtReply.
func (mr *MockManagerMockRecorder) CreateDoubtReply(c, req, doubtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoubtReply", reflect.TypeOf((*MockManager)(nil).CreateDoubtReply), c, req, doubtID)
}

// CreateDoubtReplyV4 mocks base method.
func (m *MockManager) CreateDoubtReplyV4(c echo.Context, req *request9.CreateDoubtReply) (*response9.CreateDoubtReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoubtReplyV4", c, req)
	ret0, _ := ret[0].(*response9.CreateDoubtReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoubtReplyV4 indicates an expected call of CreateDoubtReplyV4.
func (mr *MockManagerMockRecorder) CreateDoubtReplyV4(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoubtReplyV4", reflect.TypeOf((*MockManager)(nil).CreateDoubtReplyV4), c, req)
}

// CreateDraftDoubt mocks base method.
func (m *MockManager) CreateDraftDoubt(c echo.Context, req *request9.CreateDraftDoubtRequest) (*response9.CreateDraftDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraftDoubt", c, req)
	ret0, _ := ret[0].(*response9.CreateDraftDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraftDoubt indicates an expected call of CreateDraftDoubt.
func (mr *MockManagerMockRecorder) CreateDraftDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftDoubt", reflect.TypeOf((*MockManager)(nil).CreateDraftDoubt), c, req)
}

// CreateFlashcardsSession mocks base method.
func (m *MockManager) CreateFlashcardsSession(c echo.Context, cnf *config.Config, req *request2.CreateFlashcardSessionRequest) (*response2.CreateFlashcardSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlashcardsSession", c, cnf, req)
	ret0, _ := ret[0].(*response2.CreateFlashcardSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlashcardsSession indicates an expected call of CreateFlashcardsSession.
func (mr *MockManagerMockRecorder) CreateFlashcardsSession(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlashcardsSession", reflect.TypeOf((*MockManager)(nil).CreateFlashcardsSession), c, cnf, req)
}

// CreateHomework mocks base method.
func (m *MockManager) CreateHomework(ctx echo.Context, req *request11.CreateHomeworkRequest) (*response11.Homework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHomework", ctx, req)
	ret0, _ := ret[0].(*response11.Homework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHomework indicates an expected call of CreateHomework.
func (mr *MockManagerMockRecorder) CreateHomework(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHomework", reflect.TypeOf((*MockManager)(nil).CreateHomework), ctx, req)
}

// CreateHomeworkQuestionCollection mocks base method.
func (m *MockManager) CreateHomeworkQuestionCollection(ctx echo.Context, req *request24.CreateHomeworkQuestionCollectionRequest) (*response25.CreateHomeworkQuestionCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHomeworkQuestionCollection", ctx, req)
	ret0, _ := ret[0].(*response25.CreateHomeworkQuestionCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHomeworkQuestionCollection indicates an expected call of CreateHomeworkQuestionCollection.
func (mr *MockManagerMockRecorder) CreateHomeworkQuestionCollection(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHomeworkQuestionCollection", reflect.TypeOf((*MockManager)(nil).CreateHomeworkQuestionCollection), ctx, req)
}

// CreateHomeworks mocks base method.
func (m *MockManager) CreateHomeworks(ctx echo.Context, req *request11.CreateHomeworkRequests) (*response11.HomeworkList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHomeworks", ctx, req)
	ret0, _ := ret[0].(*response11.HomeworkList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHomeworks indicates an expected call of CreateHomeworks.
func (mr *MockManagerMockRecorder) CreateHomeworks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHomeworks", reflect.TypeOf((*MockManager)(nil).CreateHomeworks), ctx, req)
}

// CreateLearningMaterial mocks base method.
func (m *MockManager) CreateLearningMaterial(ctx echo.Context, materialRequest *request14.CreateLearningMaterialRequest, meetingID string) (*response14.CreateLearningMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLearningMaterial", ctx, materialRequest, meetingID)
	ret0, _ := ret[0].(*response14.CreateLearningMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLearningMaterial indicates an expected call of CreateLearningMaterial.
func (mr *MockManagerMockRecorder) CreateLearningMaterial(ctx, materialRequest, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLearningMaterial", reflect.TypeOf((*MockManager)(nil).CreateLearningMaterial), ctx, materialRequest, meetingID)
}

// CreateLearningMaterialBulk mocks base method.
func (m *MockManager) CreateLearningMaterialBulk(ctx echo.Context, bulkRequest *request14.CreateLearningMaterialRequestBulk) (*response14.CreateLearningMaterialBulkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLearningMaterialBulk", ctx, bulkRequest)
	ret0, _ := ret[0].(*response14.CreateLearningMaterialBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLearningMaterialBulk indicates an expected call of CreateLearningMaterialBulk.
func (mr *MockManagerMockRecorder) CreateLearningMaterialBulk(ctx, bulkRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLearningMaterialBulk", reflect.TypeOf((*MockManager)(nil).CreateLearningMaterialBulk), ctx, bulkRequest)
}

// CreateLecturePlansWithMeta mocks base method.
func (m *MockManager) CreateLecturePlansWithMeta(c echo.Context, request *request25.LecturePlansWithMetaCreateRequest) (*response26.LecturePlansWithMetaCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLecturePlansWithMeta", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansWithMetaCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLecturePlansWithMeta indicates an expected call of CreateLecturePlansWithMeta.
func (mr *MockManagerMockRecorder) CreateLecturePlansWithMeta(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLecturePlansWithMeta", reflect.TypeOf((*MockManager)(nil).CreateLecturePlansWithMeta), c, request)
}

// CreateListing mocks base method.
func (m *MockManager) CreateListing(c echo.Context, req *request15.CreateListingRequest) (*response15.CreateListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListing", c, req)
	ret0, _ := ret[0].(*response15.CreateListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListing indicates an expected call of CreateListing.
func (mr *MockManagerMockRecorder) CreateListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListing", reflect.TypeOf((*MockManager)(nil).CreateListing), c, req)
}

// CreateMentorshipBatchAndEnrollStudents mocks base method.
func (m *MockManager) CreateMentorshipBatchAndEnrollStudents(c echo.Context, request *request25.CreateBatchRequest) (*response26.CreateBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMentorshipBatchAndEnrollStudents", c, request)
	ret0, _ := ret[0].(*response26.CreateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMentorshipBatchAndEnrollStudents indicates an expected call of CreateMentorshipBatchAndEnrollStudents.
func (mr *MockManagerMockRecorder) CreateMentorshipBatchAndEnrollStudents(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMentorshipBatchAndEnrollStudents", reflect.TypeOf((*MockManager)(nil).CreateMentorshipBatchAndEnrollStudents), c, request)
}

// CreateNotice mocks base method.
func (m *MockManager) CreateNotice(c echo.Context, req *request17.CreateNoticeRequest) (*response17.CreateNoticeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotice", c, req)
	ret0, _ := ret[0].(*response17.CreateNoticeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotice indicates an expected call of CreateNotice.
func (mr *MockManagerMockRecorder) CreateNotice(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotice", reflect.TypeOf((*MockManager)(nil).CreateNotice), c, req)
}

// CreateOffer mocks base method.
func (m *MockManager) CreateOffer(c echo.Context, req *request19.Create) (*response20.Create, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", c, req)
	ret0, _ := ret[0].(*response20.Create)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockManagerMockRecorder) CreateOffer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockManager)(nil).CreateOffer), c, req)
}

// CreatePersonalMentorshipSchedule mocks base method.
func (m *MockManager) CreatePersonalMentorshipSchedule(c echo.Context, req *request3.CreatePersonalMentorshipScheduleRequest) (*response3.CreatePersonalMentorshipScheduleReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalMentorshipSchedule", c, req)
	ret0, _ := ret[0].(*response3.CreatePersonalMentorshipScheduleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersonalMentorshipSchedule indicates an expected call of CreatePersonalMentorshipSchedule.
func (mr *MockManagerMockRecorder) CreatePersonalMentorshipSchedule(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalMentorshipSchedule", reflect.TypeOf((*MockManager)(nil).CreatePersonalMentorshipSchedule), c, req)
}

// CreatePhase mocks base method.
func (m *MockManager) CreatePhase(c echo.Context, arg1 *config.Config, request *request25.CreatePhaseRequest) (*response26.CreatePhaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhase", c, arg1, request)
	ret0, _ := ret[0].(*response26.CreatePhaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhase indicates an expected call of CreatePhase.
func (mr *MockManagerMockRecorder) CreatePhase(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhase", reflect.TypeOf((*MockManager)(nil).CreatePhase), c, arg1, request)
}

// CreatePolicy mocks base method.
func (m *MockManager) CreatePolicy(c echo.Context, request *request22.CreatePolicyRequest) (*response23.CreatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", c, request)
	ret0, _ := ret[0].(*response23.CreatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockManagerMockRecorder) CreatePolicy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockManager)(nil).CreatePolicy), c, request)
}

// CreatePolicyVersion mocks base method.
func (m *MockManager) CreatePolicyVersion(c echo.Context, request *request22.CreatePolicyVersionRequest) (*response23.CreatePolicyVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyVersion", c, request)
	ret0, _ := ret[0].(*response23.CreatePolicyVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyVersion indicates an expected call of CreatePolicyVersion.
func (mr *MockManagerMockRecorder) CreatePolicyVersion(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersion", reflect.TypeOf((*MockManager)(nil).CreatePolicyVersion), c, request)
}

// CreateResource mocks base method.
func (m *MockManager) CreateResource(c echo.Context, cnf *config.Config, request *request7.CreateMeetingResourceRequest) (*response7.CreateMeetingResourceReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", c, cnf, request)
	ret0, _ := ret[0].(*response7.CreateMeetingResourceReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockManagerMockRecorder) CreateResource(c, cnf, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockManager)(nil).CreateResource), c, cnf, request)
}

// CreateStudentTest mocks base method.
func (m *MockManager) CreateStudentTest(ctx echo.Context, request *request32.CreateStudentTestRequest) (*reply1.CreateStudentTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudentTest", ctx, request)
	ret0, _ := ret[0].(*reply1.CreateStudentTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudentTest indicates an expected call of CreateStudentTest.
func (mr *MockManagerMockRecorder) CreateStudentTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudentTest", reflect.TypeOf((*MockManager)(nil).CreateStudentTest), ctx, request)
}

// CreateTaxonomy mocks base method.
func (m *MockManager) CreateTaxonomy(c echo.Context, request *request28.CreateTaxonomyRequest) (*response29.CreateTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomy", c, request)
	ret0, _ := ret[0].(*response29.CreateTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomy indicates an expected call of CreateTaxonomy.
func (mr *MockManagerMockRecorder) CreateTaxonomy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomy", reflect.TypeOf((*MockManager)(nil).CreateTaxonomy), c, request)
}

// CreateTaxonomyBulk mocks base method.
func (m *MockManager) CreateTaxonomyBulk(c echo.Context, request *request28.CreateTaxonomyBulkRequest) (*response29.CreateTaxonomyBulkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaxonomyBulk", c, request)
	ret0, _ := ret[0].(*response29.CreateTaxonomyBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaxonomyBulk indicates an expected call of CreateTaxonomyBulk.
func (mr *MockManagerMockRecorder) CreateTaxonomyBulk(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaxonomyBulk", reflect.TypeOf((*MockManager)(nil).CreateTaxonomyBulk), c, request)
}

// CreateTest mocks base method.
func (m *MockManager) CreateTest(ctx echo.Context, request *request31.CreateTestRequest) (*reply0.CreateTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTest", ctx, request)
	ret0, _ := ret[0].(*reply0.CreateTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTest indicates an expected call of CreateTest.
func (mr *MockManagerMockRecorder) CreateTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTest", reflect.TypeOf((*MockManager)(nil).CreateTest), ctx, request)
}

// CreateThumbnailBulk mocks base method.
func (m *MockManager) CreateThumbnailBulk(ctx echo.Context, req *request14.CreateThumbnailRequestBulk) (*response14.CreateThumbnailBulkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThumbnailBulk", ctx, req)
	ret0, _ := ret[0].(*response14.CreateThumbnailBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThumbnailBulk indicates an expected call of CreateThumbnailBulk.
func (mr *MockManagerMockRecorder) CreateThumbnailBulk(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThumbnailBulk", reflect.TypeOf((*MockManager)(nil).CreateThumbnailBulk), ctx, req)
}

// CreateUser mocks base method.
func (m *MockManager) CreateUser(c echo.Context, req *request36.CreateUserRequest) (*response34.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", c, req)
	ret0, _ := ret[0].(*response34.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockManagerMockRecorder) CreateUser(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockManager)(nil).CreateUser), c, req)
}

// CreateUserGoal mocks base method.
func (m *MockManager) CreateUserGoal(ctx echo.Context, req *request13.CreateUserGoalRequest) (*response13.UserGoalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserGoal", ctx, req)
	ret0, _ := ret[0].(*response13.UserGoalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserGoal indicates an expected call of CreateUserGoal.
func (mr *MockManagerMockRecorder) CreateUserGoal(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGoal", reflect.TypeOf((*MockManager)(nil).CreateUserGoal), ctx, req)
}

// CreateUserPrivileges mocks base method.
func (m *MockManager) CreateUserPrivileges(c echo.Context, cnf *config.Config, req *request0.BulkCreateUserPrivilegeRequest) (*response0.BulkCreateUserPrivilegeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPrivileges", c, cnf, req)
	ret0, _ := ret[0].(*response0.BulkCreateUserPrivilegeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPrivileges indicates an expected call of CreateUserPrivileges.
func (mr *MockManagerMockRecorder) CreateUserPrivileges(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPrivileges", reflect.TypeOf((*MockManager)(nil).CreateUserPrivileges), c, cnf, req)
}

// CustomTestSyncSubmit mocks base method.
func (m *MockManager) CustomTestSyncSubmit(ctx echo.Context, request *request29.SyncSubmitTestRequest) (*response30.SyncSubmitTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomTestSyncSubmit", ctx, request)
	ret0, _ := ret[0].(*response30.SyncSubmitTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomTestSyncSubmit indicates an expected call of CustomTestSyncSubmit.
func (mr *MockManagerMockRecorder) CustomTestSyncSubmit(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomTestSyncSubmit", reflect.TypeOf((*MockManager)(nil).CustomTestSyncSubmit), ctx, request)
}

// DeactivateListing mocks base method.
func (m *MockManager) DeactivateListing(c echo.Context, req *request15.DeactivateListingRequest) (*response15.DeactivateListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateListing", c, req)
	ret0, _ := ret[0].(*response15.DeactivateListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateListing indicates an expected call of DeactivateListing.
func (mr *MockManagerMockRecorder) DeactivateListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateListing", reflect.TypeOf((*MockManager)(nil).DeactivateListing), c, req)
}

// DeactivateOffer mocks base method.
func (m *MockManager) DeactivateOffer(c echo.Context, req *request19.Deactivate) (*response20.Deactivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateOffer", c, req)
	ret0, _ := ret[0].(*response20.Deactivate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateOffer indicates an expected call of DeactivateOffer.
func (mr *MockManagerMockRecorder) DeactivateOffer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateOffer", reflect.TypeOf((*MockManager)(nil).DeactivateOffer), c, req)
}

// DeactivateTaxonomyNode mocks base method.
func (m *MockManager) DeactivateTaxonomyNode(c echo.Context, request *request28.DeleteNodeInTaxonomyRequest) (*response29.DeleteNodeInTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateTaxonomyNode", c, request)
	ret0, _ := ret[0].(*response29.DeleteNodeInTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateTaxonomyNode indicates an expected call of DeactivateTaxonomyNode.
func (mr *MockManagerMockRecorder) DeactivateTaxonomyNode(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateTaxonomyNode", reflect.TypeOf((*MockManager)(nil).DeactivateTaxonomyNode), c, request)
}

// DeleteBatch mocks base method.
func (m *MockManager) DeleteBatch(c echo.Context, arg1 *config.Config, request *request25.DeleteBatchRequest) (*response26.DeleteBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", c, arg1, request)
	ret0, _ := ret[0].(*response26.DeleteBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockManagerMockRecorder) DeleteBatch(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockManager)(nil).DeleteBatch), c, arg1, request)
}

// DeleteBookmark mocks base method.
func (m *MockManager) DeleteBookmark(ctx echo.Context, req *request1.DeleteBookmarkRequest) (*response1.BookmarkAckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmark", ctx, req)
	ret0, _ := ret[0].(*response1.BookmarkAckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookmark indicates an expected call of DeleteBookmark.
func (mr *MockManagerMockRecorder) DeleteBookmark(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmark", reflect.TypeOf((*MockManager)(nil).DeleteBookmark), ctx, req)
}

// DeleteClassSchedules mocks base method.
func (m *MockManager) DeleteClassSchedules(c echo.Context, request *request25.ClassSchedulesDeleteRequest) (*response26.ClassSchedulesDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassSchedules", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClassSchedules indicates an expected call of DeleteClassSchedules.
func (mr *MockManagerMockRecorder) DeleteClassSchedules(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassSchedules", reflect.TypeOf((*MockManager)(nil).DeleteClassSchedules), c, request)
}

// DeleteCourseSyllabus mocks base method.
func (m *MockManager) DeleteCourseSyllabus(c echo.Context, arg1 *config.Config, request *request25.DeleteCourseSyllabusRequest) (*response26.DeleteCourseSyllabusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseSyllabus", c, arg1, request)
	ret0, _ := ret[0].(*response26.DeleteCourseSyllabusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCourseSyllabus indicates an expected call of DeleteCourseSyllabus.
func (mr *MockManagerMockRecorder) DeleteCourseSyllabus(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseSyllabus", reflect.TypeOf((*MockManager)(nil).DeleteCourseSyllabus), c, arg1, request)
}

// DeleteCredentials mocks base method.
func (m *MockManager) DeleteCredentials(c echo.Context, req *request36.DeleteCredentialsRequest) (*response34.DeleteCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", c, req)
	ret0, _ := ret[0].(*response34.DeleteCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockManagerMockRecorder) DeleteCredentials(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockManager)(nil).DeleteCredentials), c, req)
}

// DeleteFacilities mocks base method.
func (m *MockManager) DeleteFacilities(c echo.Context, arg1 *config.Config, request *request25.DeleteFacilityRequest) (*response26.DeleteFacilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacilities", c, arg1, request)
	ret0, _ := ret[0].(*response26.DeleteFacilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFacilities indicates an expected call of DeleteFacilities.
func (mr *MockManagerMockRecorder) DeleteFacilities(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacilities", reflect.TypeOf((*MockManager)(nil).DeleteFacilities), c, arg1, request)
}

// DeleteGroupMentorshipRule mocks base method.
func (m *MockManager) DeleteGroupMentorshipRule(c echo.Context, request *request3.DeleteGroupMentorshipRuleRequest) (*response3.DeleteGroupMentorshipRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupMentorshipRule", c, request)
	ret0, _ := ret[0].(*response3.DeleteGroupMentorshipRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupMentorshipRule indicates an expected call of DeleteGroupMentorshipRule.
func (mr *MockManagerMockRecorder) DeleteGroupMentorshipRule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMentorshipRule", reflect.TypeOf((*MockManager)(nil).DeleteGroupMentorshipRule), c, request)
}

// DeleteMappings mocks base method.
func (m *MockManager) DeleteMappings(c echo.Context, request *request28.DeleteMappingsRequest) (*response29.DeleteMappingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMappings", c, request)
	ret0, _ := ret[0].(*response29.DeleteMappingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMappings indicates an expected call of DeleteMappings.
func (mr *MockManagerMockRecorder) DeleteMappings(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMappings", reflect.TypeOf((*MockManager)(nil).DeleteMappings), c, request)
}

// DeleteNotice mocks base method.
func (m *MockManager) DeleteNotice(c echo.Context, req *request17.DeleteNoticeRequest) (*response17.DeleteNoticeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotice", c, req)
	ret0, _ := ret[0].(*response17.DeleteNoticeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotice indicates an expected call of DeleteNotice.
func (mr *MockManagerMockRecorder) DeleteNotice(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotice", reflect.TypeOf((*MockManager)(nil).DeleteNotice), c, req)
}

// DeleteOfflineResponseFile mocks base method.
func (m *MockManager) DeleteOfflineResponseFile(ctx echo.Context, req *request31.DeleteOfflineResponseFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfflineResponseFile", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfflineResponseFile indicates an expected call of DeleteOfflineResponseFile.
func (mr *MockManagerMockRecorder) DeleteOfflineResponseFile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfflineResponseFile", reflect.TypeOf((*MockManager)(nil).DeleteOfflineResponseFile), ctx, req)
}

// DeletePhase mocks base method.
func (m *MockManager) DeletePhase(c echo.Context, arg1 *config.Config, request *request25.DeletePhaseRequest) (*response26.DeletePhaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhase", c, arg1, request)
	ret0, _ := ret[0].(*response26.DeletePhaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePhase indicates an expected call of DeletePhase.
func (mr *MockManagerMockRecorder) DeletePhase(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhase", reflect.TypeOf((*MockManager)(nil).DeletePhase), c, arg1, request)
}

// DeletePolicy mocks base method.
func (m *MockManager) DeletePolicy(c echo.Context, request *request22.DeletePolicyRequest) (*response23.DeletePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", c, request)
	ret0, _ := ret[0].(*response23.DeletePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockManagerMockRecorder) DeletePolicy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockManager)(nil).DeletePolicy), c, request)
}

// DeleteUserAttribute mocks base method.
func (m *MockManager) DeleteUserAttribute(c echo.Context, req *request8.DeleteUserAttributeRequest) (*response8.UserAttributeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAttribute", c, req)
	ret0, _ := ret[0].(*response8.UserAttributeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAttribute indicates an expected call of DeleteUserAttribute.
func (mr *MockManagerMockRecorder) DeleteUserAttribute(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAttribute", reflect.TypeOf((*MockManager)(nil).DeleteUserAttribute), c, req)
}

// DeleteUserFromOffer mocks base method.
func (m *MockManager) DeleteUserFromOffer(c echo.Context, req *request19.DeleteUserFromOffer) (*response20.DeleteUserFromOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromOffer", c, req)
	ret0, _ := ret[0].(*response20.DeleteUserFromOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromOffer indicates an expected call of DeleteUserFromOffer.
func (mr *MockManagerMockRecorder) DeleteUserFromOffer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromOffer", reflect.TypeOf((*MockManager)(nil).DeleteUserFromOffer), c, req)
}

// DeleteUserGoalByFilter mocks base method.
func (m *MockManager) DeleteUserGoalByFilter(ctx echo.Context, req *request13.DeleteUserGoalByFilterRequest) (*response13.DeleteUserGoalByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserGoalByFilter", ctx, req)
	ret0, _ := ret[0].(*response13.DeleteUserGoalByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserGoalByFilter indicates an expected call of DeleteUserGoalByFilter.
func (mr *MockManagerMockRecorder) DeleteUserGoalByFilter(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGoalByFilter", reflect.TypeOf((*MockManager)(nil).DeleteUserGoalByFilter), ctx, req)
}

// DeleteUserPrivileges mocks base method.
func (m *MockManager) DeleteUserPrivileges(c echo.Context, cnf *config.Config, userID, roleID string) (*response0.DeleteUserPrivilegesByRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPrivileges", c, cnf, userID, roleID)
	ret0, _ := ret[0].(*response0.DeleteUserPrivilegesByRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPrivileges indicates an expected call of DeleteUserPrivileges.
func (mr *MockManagerMockRecorder) DeleteUserPrivileges(c, cnf, userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPrivileges", reflect.TypeOf((*MockManager)(nil).DeleteUserPrivileges), c, cnf, userID, roleID)
}

// DoubtTeacherMappingUpload mocks base method.
func (m *MockManager) DoubtTeacherMappingUpload(c echo.Context, md metadata.MD, request *request25.UploadDoubtMappingTemplateRequest) (*response26.UploadDoubtMappingTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubtTeacherMappingUpload", c, md, request)
	ret0, _ := ret[0].(*response26.UploadDoubtMappingTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoubtTeacherMappingUpload indicates an expected call of DoubtTeacherMappingUpload.
func (mr *MockManagerMockRecorder) DoubtTeacherMappingUpload(c, md, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubtTeacherMappingUpload", reflect.TypeOf((*MockManager)(nil).DoubtTeacherMappingUpload), c, md, request)
}

// DoubtTeacherMappingUploadSpecialBatch mocks base method.
func (m *MockManager) DoubtTeacherMappingUploadSpecialBatch(c echo.Context, md metadata.MD, request *request25.UploadDoubtMappingTemplateRequest) (*response26.UploadDoubtMappingTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubtTeacherMappingUploadSpecialBatch", c, md, request)
	ret0, _ := ret[0].(*response26.UploadDoubtMappingTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoubtTeacherMappingUploadSpecialBatch indicates an expected call of DoubtTeacherMappingUploadSpecialBatch.
func (mr *MockManagerMockRecorder) DoubtTeacherMappingUploadSpecialBatch(c, md, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubtTeacherMappingUploadSpecialBatch", reflect.TypeOf((*MockManager)(nil).DoubtTeacherMappingUploadSpecialBatch), c, md, request)
}

// DoubtTransfer mocks base method.
func (m *MockManager) DoubtTransfer(c echo.Context, req *request9.TransferDoubtRequest) (*response9.TransferDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubtTransfer", c, req)
	ret0, _ := ret[0].(*response9.TransferDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoubtTransfer indicates an expected call of DoubtTransfer.
func (mr *MockManagerMockRecorder) DoubtTransfer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubtTransfer", reflect.TypeOf((*MockManager)(nil).DoubtTransfer), c, req)
}

// DownloadAssignMentorToStudentTemplate mocks base method.
func (m *MockManager) DownloadAssignMentorToStudentTemplate(c echo.Context, request *request3.BulkAssignMentorToStudentTemplateDownloadRequest) (*response3.BulkAssignMentorToStudentTemplateDownloadReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAssignMentorToStudentTemplate", c, request)
	ret0, _ := ret[0].(*response3.BulkAssignMentorToStudentTemplateDownloadReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAssignMentorToStudentTemplate indicates an expected call of DownloadAssignMentorToStudentTemplate.
func (mr *MockManagerMockRecorder) DownloadAssignMentorToStudentTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAssignMentorToStudentTemplate", reflect.TypeOf((*MockManager)(nil).DownloadAssignMentorToStudentTemplate), c, request)
}

// DownloadBulkBatchCreateTemplate mocks base method.
func (m *MockManager) DownloadBulkBatchCreateTemplate(c echo.Context, request *request25.BulkBatchCreateTemplateDownloadRequest) (*response26.BulkBatchCreateTemplateDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBulkBatchCreateTemplate", c, request)
	ret0, _ := ret[0].(*response26.BulkBatchCreateTemplateDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadBulkBatchCreateTemplate indicates an expected call of DownloadBulkBatchCreateTemplate.
func (mr *MockManagerMockRecorder) DownloadBulkBatchCreateTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBulkBatchCreateTemplate", reflect.TypeOf((*MockManager)(nil).DownloadBulkBatchCreateTemplate), c, request)
}

// DownloadBulkGroupMentorshipRulesCreateTemplate mocks base method.
func (m *MockManager) DownloadBulkGroupMentorshipRulesCreateTemplate(c echo.Context, request *request3.BulkGroupMentorshipRulesTemplateDownloadRequest) (*response3.BulkGroupMentorshipRulesTemplateDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBulkGroupMentorshipRulesCreateTemplate", c, request)
	ret0, _ := ret[0].(*response3.BulkGroupMentorshipRulesTemplateDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadBulkGroupMentorshipRulesCreateTemplate indicates an expected call of DownloadBulkGroupMentorshipRulesCreateTemplate.
func (mr *MockManagerMockRecorder) DownloadBulkGroupMentorshipRulesCreateTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBulkGroupMentorshipRulesCreateTemplate", reflect.TypeOf((*MockManager)(nil).DownloadBulkGroupMentorshipRulesCreateTemplate), c, request)
}

// DownloadClassScheduleTemplate mocks base method.
func (m *MockManager) DownloadClassScheduleTemplate(c echo.Context, request *request25.ClassSchedulesTemplateDownloadRequest) (*response26.ClassSchedulesTemplateDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadClassScheduleTemplate", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesTemplateDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadClassScheduleTemplate indicates an expected call of DownloadClassScheduleTemplate.
func (mr *MockManagerMockRecorder) DownloadClassScheduleTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadClassScheduleTemplate", reflect.TypeOf((*MockManager)(nil).DownloadClassScheduleTemplate), c, request)
}

// DownloadDoubtMappingTemplate mocks base method.
func (m *MockManager) DownloadDoubtMappingTemplate(c echo.Context, request *request25.DownloadDoubtMappingTemplateRequest) (*response26.DoubtMappingTemplateDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDoubtMappingTemplate", c, request)
	ret0, _ := ret[0].(*response26.DoubtMappingTemplateDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadDoubtMappingTemplate indicates an expected call of DownloadDoubtMappingTemplate.
func (mr *MockManagerMockRecorder) DownloadDoubtMappingTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDoubtMappingTemplate", reflect.TypeOf((*MockManager)(nil).DownloadDoubtMappingTemplate), c, request)
}

// DownloadDoubtMappingTemplateSpecialBatch mocks base method.
func (m *MockManager) DownloadDoubtMappingTemplateSpecialBatch(c echo.Context, request *request25.DownloadDoubtMappingTemplateRequest) (*response26.DownloadDoubtMappingSpecialBatchTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDoubtMappingTemplateSpecialBatch", c, request)
	ret0, _ := ret[0].(*response26.DownloadDoubtMappingSpecialBatchTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadDoubtMappingTemplateSpecialBatch indicates an expected call of DownloadDoubtMappingTemplateSpecialBatch.
func (mr *MockManagerMockRecorder) DownloadDoubtMappingTemplateSpecialBatch(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDoubtMappingTemplateSpecialBatch", reflect.TypeOf((*MockManager)(nil).DownloadDoubtMappingTemplateSpecialBatch), c, request)
}

// DownloadLearningMaterial mocks base method.
func (m *MockManager) DownloadLearningMaterial(c echo.Context, cnf *config.Config, req *request2.DownloadLearningMaterialRequest) (*response2.DownloadLearningMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLearningMaterial", c, cnf, req)
	ret0, _ := ret[0].(*response2.DownloadLearningMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadLearningMaterial indicates an expected call of DownloadLearningMaterial.
func (mr *MockManagerMockRecorder) DownloadLearningMaterial(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLearningMaterial", reflect.TypeOf((*MockManager)(nil).DownloadLearningMaterial), c, cnf, req)
}

// DownloadLecturePlanTemplate mocks base method.
func (m *MockManager) DownloadLecturePlanTemplate(c echo.Context, request *request25.LecturePlansTemplateDownloadRequest) (*response26.LecturePlansTemplateDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLecturePlanTemplate", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansTemplateDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadLecturePlanTemplate indicates an expected call of DownloadLecturePlanTemplate.
func (mr *MockManagerMockRecorder) DownloadLecturePlanTemplate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLecturePlanTemplate", reflect.TypeOf((*MockManager)(nil).DownloadLecturePlanTemplate), c, request)
}

// DownloadMappings mocks base method.
func (m *MockManager) DownloadMappings(c echo.Context, request *request28.DownloadMappingsRequest) (*response29.DownloadMappingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadMappings", c, request)
	ret0, _ := ret[0].(*response29.DownloadMappingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadMappings indicates an expected call of DownloadMappings.
func (mr *MockManagerMockRecorder) DownloadMappings(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMappings", reflect.TypeOf((*MockManager)(nil).DownloadMappings), c, request)
}

// DownloadMentorshipExecutionDetails mocks base method.
func (m *MockManager) DownloadMentorshipExecutionDetails(c echo.Context, request *request3.MentorshipExecutionDetailsDownloadRequest) (*response3.MentorshipExecutionDetailsDownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadMentorshipExecutionDetails", c, request)
	ret0, _ := ret[0].(*response3.MentorshipExecutionDetailsDownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadMentorshipExecutionDetails indicates an expected call of DownloadMentorshipExecutionDetails.
func (mr *MockManagerMockRecorder) DownloadMentorshipExecutionDetails(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMentorshipExecutionDetails", reflect.TypeOf((*MockManager)(nil).DownloadMentorshipExecutionDetails), c, request)
}

// DownloadOfflineResponse mocks base method.
func (m *MockManager) DownloadOfflineResponse(ctx echo.Context, fileName string, req *request31.DownloadOfflineRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadOfflineResponse", ctx, fileName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadOfflineResponse indicates an expected call of DownloadOfflineResponse.
func (mr *MockManagerMockRecorder) DownloadOfflineResponse(ctx, fileName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadOfflineResponse", reflect.TypeOf((*MockManager)(nil).DownloadOfflineResponse), ctx, fileName, req)
}

// DownloadTaxonomy mocks base method.
func (m *MockManager) DownloadTaxonomy(c echo.Context, request *request28.DownloadTaxonomyRequest) (*response29.DownloadTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTaxonomy", c, request)
	ret0, _ := ret[0].(*response29.DownloadTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTaxonomy indicates an expected call of DownloadTaxonomy.
func (mr *MockManagerMockRecorder) DownloadTaxonomy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTaxonomy", reflect.TypeOf((*MockManager)(nil).DownloadTaxonomy), c, request)
}

// DownloadThumbnailURL mocks base method.
func (m *MockManager) DownloadThumbnailURL(ctx echo.Context, req *request14.ThumbnailDownloadRequest) (*response14.PresignedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadThumbnailURL", ctx, req)
	ret0, _ := ret[0].(*response14.PresignedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadThumbnailURL indicates an expected call of DownloadThumbnailURL.
func (mr *MockManagerMockRecorder) DownloadThumbnailURL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadThumbnailURL", reflect.TypeOf((*MockManager)(nil).DownloadThumbnailURL), ctx, req)
}

// EditCourseSyllabus mocks base method.
func (m *MockManager) EditCourseSyllabus(c echo.Context, arg1 *config.Config, request *request25.EditCourseSyllabusRequest) (*response26.EditCourseSyllabusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCourseSyllabus", c, arg1, request)
	ret0, _ := ret[0].(*response26.EditCourseSyllabusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCourseSyllabus indicates an expected call of EditCourseSyllabus.
func (mr *MockManagerMockRecorder) EditCourseSyllabus(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCourseSyllabus", reflect.TypeOf((*MockManager)(nil).EditCourseSyllabus), c, arg1, request)
}

// EditUserProfile mocks base method.
func (m *MockManager) EditUserProfile(c echo.Context, req *request36.UpdateUserRequest) (*response34.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserProfile", c, req)
	ret0, _ := ret[0].(*response34.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUserProfile indicates an expected call of EditUserProfile.
func (mr *MockManagerMockRecorder) EditUserProfile(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserProfile", reflect.TypeOf((*MockManager)(nil).EditUserProfile), c, req)
}

// EndMeetingInfo mocks base method.
func (m *MockManager) EndMeetingInfo(c echo.Context, cnf *config.Config, meetingID string) (*response7.MeetingActionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndMeetingInfo", c, cnf, meetingID)
	ret0, _ := ret[0].(*response7.MeetingActionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndMeetingInfo indicates an expected call of EndMeetingInfo.
func (mr *MockManagerMockRecorder) EndMeetingInfo(c, cnf, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndMeetingInfo", reflect.TypeOf((*MockManager)(nil).EndMeetingInfo), c, cnf, meetingID)
}

// EnforceAbac mocks base method.
func (m *MockManager) EnforceAbac(c echo.Context, cnf *config.Config, resource *types.ResourceAttributes, action types.Action) (*response0.GetDecisionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceAbac", c, cnf, resource, action)
	ret0, _ := ret[0].(*response0.GetDecisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnforceAbac indicates an expected call of EnforceAbac.
func (mr *MockManagerMockRecorder) EnforceAbac(c, cnf, resource, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceAbac", reflect.TypeOf((*MockManager)(nil).EnforceAbac), c, cnf, resource, action)
}

// EnforceRbac mocks base method.
func (m *MockManager) EnforceRbac(c echo.Context, cnf *config.Config, resource types.ResourceTypes, action types.Action) (*response0.GetDecisionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceRbac", c, cnf, resource, action)
	ret0, _ := ret[0].(*response0.GetDecisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnforceRbac indicates an expected call of EnforceRbac.
func (mr *MockManagerMockRecorder) EnforceRbac(c, cnf, resource, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceRbac", reflect.TypeOf((*MockManager)(nil).EnforceRbac), c, cnf, resource, action)
}

// EnrollStudentToCourse mocks base method.
func (m *MockManager) EnrollStudentToCourse(c echo.Context, request *request25.StudentEnrollRequestV2) (*response26.StudentEnrollResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollStudentToCourse", c, request)
	ret0, _ := ret[0].(*response26.StudentEnrollResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrollStudentToCourse indicates an expected call of EnrollStudentToCourse.
func (mr *MockManagerMockRecorder) EnrollStudentToCourse(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollStudentToCourse", reflect.TypeOf((*MockManager)(nil).EnrollStudentToCourse), c, request)
}

// EnrollStudentsToSpecialBatch mocks base method.
func (m *MockManager) EnrollStudentsToSpecialBatch(c echo.Context, request *request25.SpecialBatchEnrollRequest) (*response26.SuccessCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollStudentsToSpecialBatch", c, request)
	ret0, _ := ret[0].(*response26.SuccessCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrollStudentsToSpecialBatch indicates an expected call of EnrollStudentsToSpecialBatch.
func (mr *MockManagerMockRecorder) EnrollStudentsToSpecialBatch(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollStudentsToSpecialBatch", reflect.TypeOf((*MockManager)(nil).EnrollStudentsToSpecialBatch), c, request)
}

// EvaluateStudentEligibility mocks base method.
func (m *MockManager) EvaluateStudentEligibility(c echo.Context, request *request36.EvaluateStudentEligibilityRequest) (*response34.EvaluateStudentEligibilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateStudentEligibility", c, request)
	ret0, _ := ret[0].(*response34.EvaluateStudentEligibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateStudentEligibility indicates an expected call of EvaluateStudentEligibility.
func (mr *MockManagerMockRecorder) EvaluateStudentEligibility(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateStudentEligibility", reflect.TypeOf((*MockManager)(nil).EvaluateStudentEligibility), c, request)
}

// ExtendTest mocks base method.
func (m *MockManager) ExtendTest(ctx echo.Context, request *request31.ExtendTestRequest) (*reply0.GetTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendTest", ctx, request)
	ret0, _ := ret[0].(*reply0.GetTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendTest indicates an expected call of ExtendTest.
func (mr *MockManagerMockRecorder) ExtendTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendTest", reflect.TypeOf((*MockManager)(nil).ExtendTest), ctx, request)
}

// FetchLearningContent mocks base method.
func (m *MockManager) FetchLearningContent(c echo.Context, cnf *config.Config, contentIds []string) ([]*response2.GetLearningMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLearningContent", c, cnf, contentIds)
	ret0, _ := ret[0].([]*response2.GetLearningMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLearningContent indicates an expected call of FetchLearningContent.
func (mr *MockManagerMockRecorder) FetchLearningContent(c, cnf, contentIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLearningContent", reflect.TypeOf((*MockManager)(nil).FetchLearningContent), c, cnf, contentIds)
}

// FetchMentorStudentNotes mocks base method.
func (m *MockManager) FetchMentorStudentNotes(c echo.Context, request *request3.FetchMentorStudentNotesRequest) (*response3.FetchMentorStudentNotesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMentorStudentNotes", c, request)
	ret0, _ := ret[0].(*response3.FetchMentorStudentNotesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMentorStudentNotes indicates an expected call of FetchMentorStudentNotes.
func (mr *MockManagerMockRecorder) FetchMentorStudentNotes(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMentorStudentNotes", reflect.TypeOf((*MockManager)(nil).FetchMentorStudentNotes), c, request)
}

// FetchMergeAbleTests mocks base method.
func (m *MockManager) FetchMergeAbleTests(ctx echo.Context, request *request31.FetchMergeAbleTestsRequest) (*reply0.FetchMergeAbleTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMergeAbleTests", ctx, request)
	ret0, _ := ret[0].(*reply0.FetchMergeAbleTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMergeAbleTests indicates an expected call of FetchMergeAbleTests.
func (mr *MockManagerMockRecorder) FetchMergeAbleTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMergeAbleTests", reflect.TypeOf((*MockManager)(nil).FetchMergeAbleTests), ctx, request)
}

// FetchNextPptForConversion mocks base method.
func (m *MockManager) FetchNextPptForConversion(c echo.Context, cnf *config.Config, clientId string) (*response7.GetPptForConversionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNextPptForConversion", c, cnf, clientId)
	ret0, _ := ret[0].(*response7.GetPptForConversionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNextPptForConversion indicates an expected call of FetchNextPptForConversion.
func (mr *MockManagerMockRecorder) FetchNextPptForConversion(c, cnf, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNextPptForConversion", reflect.TypeOf((*MockManager)(nil).FetchNextPptForConversion), c, cnf, clientId)
}

// FetchPersonalMentorshipHistory mocks base method.
func (m *MockManager) FetchPersonalMentorshipHistory(c echo.Context, request *request3.FetchPersonalMentorshipHistoryRequest) (*response3.FetchPersonalMentorshipHistoryReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPersonalMentorshipHistory", c, request)
	ret0, _ := ret[0].(*response3.FetchPersonalMentorshipHistoryReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPersonalMentorshipHistory indicates an expected call of FetchPersonalMentorshipHistory.
func (mr *MockManagerMockRecorder) FetchPersonalMentorshipHistory(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPersonalMentorshipHistory", reflect.TypeOf((*MockManager)(nil).FetchPersonalMentorshipHistory), c, request)
}

// FetchSchedules mocks base method.
func (m *MockManager) FetchSchedules(c echo.Context, req *request21.GetSchedulesListingRequest) (*response22.GetSchedulesListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchedules", c, req)
	ret0, _ := ret[0].(*response22.GetSchedulesListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchedules indicates an expected call of FetchSchedules.
func (mr *MockManagerMockRecorder) FetchSchedules(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchedules", reflect.TypeOf((*MockManager)(nil).FetchSchedules), c, req)
}

// FetchSchedulesByMentorID mocks base method.
func (m *MockManager) FetchSchedulesByMentorID(c echo.Context, req *request3.FetchSchedulesRequest) (*response3.FetchSchedulesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchedulesByMentorID", c, req)
	ret0, _ := ret[0].(*response3.FetchSchedulesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchedulesByMentorID indicates an expected call of FetchSchedulesByMentorID.
func (mr *MockManagerMockRecorder) FetchSchedulesByMentorID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchedulesByMentorID", reflect.TypeOf((*MockManager)(nil).FetchSchedulesByMentorID), c, req)
}

// FetchSchedulesSummary mocks base method.
func (m *MockManager) FetchSchedulesSummary(c echo.Context, req *request21.SchedulesSummaryRequest) (*response22.SchedulesSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchedulesSummary", c, req)
	ret0, _ := ret[0].(*response22.SchedulesSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchedulesSummary indicates an expected call of FetchSchedulesSummary.
func (mr *MockManagerMockRecorder) FetchSchedulesSummary(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchedulesSummary", reflect.TypeOf((*MockManager)(nil).FetchSchedulesSummary), c, req)
}

// FetchStudentData mocks base method.
func (m *MockManager) FetchStudentData(c echo.Context, request *request3.FetchStudentDataRequest) (*response3.FetchStudentDataReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStudentData", c, request)
	ret0, _ := ret[0].(*response3.FetchStudentDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStudentData indicates an expected call of FetchStudentData.
func (mr *MockManagerMockRecorder) FetchStudentData(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStudentData", reflect.TypeOf((*MockManager)(nil).FetchStudentData), c, request)
}

// FetchStudentNotes mocks base method.
func (m *MockManager) FetchStudentNotes(c echo.Context, request *request3.FetchStudentNotesRequest) (*response3.FetchStudentNotesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStudentNotes", c, request)
	ret0, _ := ret[0].(*response3.FetchStudentNotesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStudentNotes indicates an expected call of FetchStudentNotes.
func (mr *MockManagerMockRecorder) FetchStudentNotes(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStudentNotes", reflect.TypeOf((*MockManager)(nil).FetchStudentNotes), c, request)
}

// FilterAdminTests mocks base method.
func (m *MockManager) FilterAdminTests(ctx echo.Context, request *request31.FilterTestsRequest) (*reply0.AdminFilterTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAdminTests", ctx, request)
	ret0, _ := ret[0].(*reply0.AdminFilterTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAdminTests indicates an expected call of FilterAdminTests.
func (mr *MockManagerMockRecorder) FilterAdminTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAdminTests", reflect.TypeOf((*MockManager)(nil).FilterAdminTests), ctx, request)
}

// FilterMaterials mocks base method.
func (m *MockManager) FilterMaterials(ctx echo.Context, req *request14.FilterMaterialRequest) (*response14.FilterResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterMaterials", ctx, req)
	ret0, _ := ret[0].(*response14.FilterResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMaterials indicates an expected call of FilterMaterials.
func (mr *MockManagerMockRecorder) FilterMaterials(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMaterials", reflect.TypeOf((*MockManager)(nil).FilterMaterials), ctx, req)
}

// FilterNAC mocks base method.
func (m *MockManager) FilterNAC(ctx echo.Context, req *requests.FilterRequest) (*responses.FilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNAC", ctx, req)
	ret0, _ := ret[0].(*responses.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNAC indicates an expected call of FilterNAC.
func (mr *MockManagerMockRecorder) FilterNAC(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNAC", reflect.TypeOf((*MockManager)(nil).FilterNAC), ctx, req)
}

// FilterOffers mocks base method.
func (m *MockManager) FilterOffers(c echo.Context, req *request19.Filter) (*response20.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOffers", c, req)
	ret0, _ := ret[0].(*response20.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOffers indicates an expected call of FilterOffers.
func (mr *MockManagerMockRecorder) FilterOffers(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOffers", reflect.TypeOf((*MockManager)(nil).FilterOffers), c, req)
}

// FilterOrder mocks base method.
func (m *MockManager) FilterOrder(c echo.Context, req *request20.FilterOrderRequest) (*response21.FilterOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOrder", c, req)
	ret0, _ := ret[0].(*response21.FilterOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOrder indicates an expected call of FilterOrder.
func (mr *MockManagerMockRecorder) FilterOrder(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOrder", reflect.TypeOf((*MockManager)(nil).FilterOrder), c, req)
}

// FilterPolicy mocks base method.
func (m *MockManager) FilterPolicy(c echo.Context, request *request22.GetPoliciesRequest) (*response23.GetPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPolicy", c, request)
	ret0, _ := ret[0].(*response23.GetPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPolicy indicates an expected call of FilterPolicy.
func (mr *MockManagerMockRecorder) FilterPolicy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPolicy", reflect.TypeOf((*MockManager)(nil).FilterPolicy), c, request)
}

// FilterProcessingRecord mocks base method.
func (m *MockManager) FilterProcessingRecord(c echo.Context, request *request26.FilterProcessingRecordRequest) (*response27.FilterProcessingRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterProcessingRecord", c, request)
	ret0, _ := ret[0].(*response27.FilterProcessingRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterProcessingRecord indicates an expected call of FilterProcessingRecord.
func (mr *MockManagerMockRecorder) FilterProcessingRecord(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterProcessingRecord", reflect.TypeOf((*MockManager)(nil).FilterProcessingRecord), c, request)
}

// FilterTests mocks base method.
func (m *MockManager) FilterTests(ctx echo.Context, request *request31.FilterTestsRequest) (*reply0.FilterTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTests", ctx, request)
	ret0, _ := ret[0].(*reply0.FilterTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTests indicates an expected call of FilterTests.
func (mr *MockManagerMockRecorder) FilterTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTests", reflect.TypeOf((*MockManager)(nil).FilterTests), ctx, request)
}

// FilterThumbnails mocks base method.
func (m *MockManager) FilterThumbnails(ctx echo.Context, req *request14.ThumbnailFilterRequest) (*response14.ThumbnailFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterThumbnails", ctx, req)
	ret0, _ := ret[0].(*response14.ThumbnailFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterThumbnails indicates an expected call of FilterThumbnails.
func (mr *MockManagerMockRecorder) FilterThumbnails(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterThumbnails", reflect.TypeOf((*MockManager)(nil).FilterThumbnails), ctx, req)
}

// FilterUploadRecord mocks base method.
func (m *MockManager) FilterUploadRecord(c echo.Context, req *request19.Filter) (*response20.FilterUploadRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterUploadRecord", c, req)
	ret0, _ := ret[0].(*response20.FilterUploadRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUploadRecord indicates an expected call of FilterUploadRecord.
func (mr *MockManagerMockRecorder) FilterUploadRecord(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUploadRecord", reflect.TypeOf((*MockManager)(nil).FilterUploadRecord), c, req)
}

// FinalResultGeneration mocks base method.
func (m *MockManager) FinalResultGeneration(ctx echo.Context, request *request33.TestAndAssessmentWorkflowFinalResultRequest) (*response31.TestAndAssessmentWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalResultGeneration", ctx, request)
	ret0, _ := ret[0].(*response31.TestAndAssessmentWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalResultGeneration indicates an expected call of FinalResultGeneration.
func (mr *MockManagerMockRecorder) FinalResultGeneration(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalResultGeneration", reflect.TypeOf((*MockManager)(nil).FinalResultGeneration), ctx, request)
}

// GenerateBatchCodePrefixRequest mocks base method.
func (m *MockManager) GenerateBatchCodePrefixRequest(c echo.Context, arg1 *config.Config, request *request25.GenerateBatchCodePrefixRequest) (*response26.GenerateBatchCodePrefixResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBatchCodePrefixRequest", c, arg1, request)
	ret0, _ := ret[0].(*response26.GenerateBatchCodePrefixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBatchCodePrefixRequest indicates an expected call of GenerateBatchCodePrefixRequest.
func (mr *MockManagerMockRecorder) GenerateBatchCodePrefixRequest(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBatchCodePrefixRequest", reflect.TypeOf((*MockManager)(nil).GenerateBatchCodePrefixRequest), c, arg1, request)
}

// GeneratePaymentLink mocks base method.
func (m *MockManager) GeneratePaymentLink(c echo.Context, req *request5.GeneratePaymentLinkRequest) (*response5.GeneratePaymentLinkReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePaymentLink", c, req)
	ret0, _ := ret[0].(*response5.GeneratePaymentLinkReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePaymentLink indicates an expected call of GeneratePaymentLink.
func (mr *MockManagerMockRecorder) GeneratePaymentLink(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePaymentLink", reflect.TypeOf((*MockManager)(nil).GeneratePaymentLink), c, req)
}

// GenerateResultForStudents mocks base method.
func (m *MockManager) GenerateResultForStudents(ctx echo.Context, request *request31.GenerateResultForStudentsRequest) (*reply0.GenerateResultForStudentsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResultForStudents", ctx, request)
	ret0, _ := ret[0].(*reply0.GenerateResultForStudentsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResultForStudents indicates an expected call of GenerateResultForStudents.
func (mr *MockManagerMockRecorder) GenerateResultForStudents(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResultForStudents", reflect.TypeOf((*MockManager)(nil).GenerateResultForStudents), ctx, request)
}

// GenerateRetryPaymentLink mocks base method.
func (m *MockManager) GenerateRetryPaymentLink(c echo.Context, req *request5.GenerateRetryPaymentLinkRequest) (*response5.GenerateRetryPaymentLinkReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRetryPaymentLink", c, req)
	ret0, _ := ret[0].(*response5.GenerateRetryPaymentLinkReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRetryPaymentLink indicates an expected call of GenerateRetryPaymentLink.
func (mr *MockManagerMockRecorder) GenerateRetryPaymentLink(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRetryPaymentLink", reflect.TypeOf((*MockManager)(nil).GenerateRetryPaymentLink), c, req)
}

// GetActivities mocks base method.
func (m *MockManager) GetActivities(c echo.Context, req *request8.ListActivityRequest) (*response8.ListActivityReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivities", c, req)
	ret0, _ := ret[0].(*response8.ListActivityReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivities indicates an expected call of GetActivities.
func (mr *MockManagerMockRecorder) GetActivities(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivities", reflect.TypeOf((*MockManager)(nil).GetActivities), c, req)
}

// GetActivitiesByTimeRange mocks base method.
func (m *MockManager) GetActivitiesByTimeRange(c echo.Context, req *request8.ListActivityTimeRangeRequest) (*response8.ListActivityReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByTimeRange", c, req)
	ret0, _ := ret[0].(*response8.ListActivityReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByTimeRange indicates an expected call of GetActivitiesByTimeRange.
func (mr *MockManagerMockRecorder) GetActivitiesByTimeRange(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByTimeRange", reflect.TypeOf((*MockManager)(nil).GetActivitiesByTimeRange), c, req)
}

// GetAddressByID mocks base method.
func (m *MockManager) GetAddressByID(c echo.Context, cnf *config.Config, request *request36.GetAddressByIdRequest) (*response34.GetAddressByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByID", c, cnf, request)
	ret0, _ := ret[0].(*response34.GetAddressByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByID indicates an expected call of GetAddressByID.
func (mr *MockManagerMockRecorder) GetAddressByID(c, cnf, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByID", reflect.TypeOf((*MockManager)(nil).GetAddressByID), c, cnf, request)
}

// GetAddressClient mocks base method.
func (m *MockManager) GetAddressClient(c echo.Context) v111.AddressClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressClient", c)
	ret0, _ := ret[0].(v111.AddressClient)
	return ret0
}

// GetAddressClient indicates an expected call of GetAddressClient.
func (mr *MockManagerMockRecorder) GetAddressClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressClient", reflect.TypeOf((*MockManager)(nil).GetAddressClient), c)
}

// GetAdminTestSolutions mocks base method.
func (m *MockManager) GetAdminTestSolutions(ctx echo.Context, request *request31.GetSolutionsPreviewRequest) (*reply0.GetSolutionsPreviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminTestSolutions", ctx, request)
	ret0, _ := ret[0].(*reply0.GetSolutionsPreviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminTestSolutions indicates an expected call of GetAdminTestSolutions.
func (mr *MockManagerMockRecorder) GetAdminTestSolutions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminTestSolutions", reflect.TypeOf((*MockManager)(nil).GetAdminTestSolutions), ctx, request)
}

// GetAdminUserServiceClient mocks base method.
func (m *MockManager) GetAdminUserServiceClient(c echo.Context) (v111.UserAdminClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserServiceClient", c)
	ret0, _ := ret[0].(v111.UserAdminClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserServiceClient indicates an expected call of GetAdminUserServiceClient.
func (mr *MockManagerMockRecorder) GetAdminUserServiceClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserServiceClient", reflect.TypeOf((*MockManager)(nil).GetAdminUserServiceClient), c)
}

// GetAllAddresses mocks base method.
func (m *MockManager) GetAllAddresses(c echo.Context, cnf *config.Config, request *request36.GetAllAddressesRequest) (*response34.GetAllAddressesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddresses", c, cnf, request)
	ret0, _ := ret[0].(*response34.GetAllAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddresses indicates an expected call of GetAllAddresses.
func (mr *MockManagerMockRecorder) GetAllAddresses(c, cnf, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddresses", reflect.TypeOf((*MockManager)(nil).GetAllAddresses), c, cnf, request)
}

// GetAllDoubtsForResolverID mocks base method.
func (m *MockManager) GetAllDoubtsForResolverID(c echo.Context, req *request9.GetAllDoubtForResolverIdRequest) (*response9.GetAllDoubtsForResolverIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoubtsForResolverID", c, req)
	ret0, _ := ret[0].(*response9.GetAllDoubtsForResolverIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoubtsForResolverID indicates an expected call of GetAllDoubtsForResolverID.
func (mr *MockManagerMockRecorder) GetAllDoubtsForResolverID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoubtsForResolverID", reflect.TypeOf((*MockManager)(nil).GetAllDoubtsForResolverID), c, req)
}

// GetAllDoubtsForSeekerID mocks base method.
func (m *MockManager) GetAllDoubtsForSeekerID(c echo.Context, req *request9.GetAllDoubtForSeekerIdRequest) (*response9.GetAllDoubtsForSeekerIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoubtsForSeekerID", c, req)
	ret0, _ := ret[0].(*response9.GetAllDoubtsForSeekerIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoubtsForSeekerID indicates an expected call of GetAllDoubtsForSeekerID.
func (mr *MockManagerMockRecorder) GetAllDoubtsForSeekerID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoubtsForSeekerID", reflect.TypeOf((*MockManager)(nil).GetAllDoubtsForSeekerID), c, req)
}

// GetAllRepliesPaginated mocks base method.
func (m *MockManager) GetAllRepliesPaginated(c echo.Context, req *request9.GetAllRepliesPaginatedRequest) (*response9.GetAllRepliesPaginatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepliesPaginated", c, req)
	ret0, _ := ret[0].(*response9.GetAllRepliesPaginatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepliesPaginated indicates an expected call of GetAllRepliesPaginated.
func (mr *MockManagerMockRecorder) GetAllRepliesPaginated(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepliesPaginated", reflect.TypeOf((*MockManager)(nil).GetAllRepliesPaginated), c, req)
}

// GetAllRepliesPostTimestamp mocks base method.
func (m *MockManager) GetAllRepliesPostTimestamp(c echo.Context, req *request9.GetAllRepliesPostTimestampRequest) (*response9.GetAllRepliesPostTimestampResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRepliesPostTimestamp", c, req)
	ret0, _ := ret[0].(*response9.GetAllRepliesPostTimestampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRepliesPostTimestamp indicates an expected call of GetAllRepliesPostTimestamp.
func (mr *MockManagerMockRecorder) GetAllRepliesPostTimestamp(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRepliesPostTimestamp", reflect.TypeOf((*MockManager)(nil).GetAllRepliesPostTimestamp), c, req)
}

// GetAllTaxonomyIDForResolverID mocks base method.
func (m *MockManager) GetAllTaxonomyIDForResolverID(c echo.Context, req *request9.GetAllTaxonomyIdForResolverIdRequest) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTaxonomyIDForResolverID", c, req)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTaxonomyIDForResolverID indicates an expected call of GetAllTaxonomyIDForResolverID.
func (mr *MockManagerMockRecorder) GetAllTaxonomyIDForResolverID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTaxonomyIDForResolverID", reflect.TypeOf((*MockManager)(nil).GetAllTaxonomyIDForResolverID), c, req)
}

// GetAncestors mocks base method.
func (m *MockManager) GetAncestors(c echo.Context, request *request28.GetAncestorsOfANodeRequest) (*response29.GetAncestorsOfANodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestors", c, request)
	ret0, _ := ret[0].(*response29.GetAncestorsOfANodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestors indicates an expected call of GetAncestors.
func (mr *MockManagerMockRecorder) GetAncestors(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestors", reflect.TypeOf((*MockManager)(nil).GetAncestors), c, request)
}

// GetAncestorsOfAFacility mocks base method.
func (m *MockManager) GetAncestorsOfAFacility(c echo.Context, request *request25.GetAncestorsOfAFacilityRequest) (*response26.GetAncestorsOfAFacilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestorsOfAFacility", c, request)
	ret0, _ := ret[0].(*response26.GetAncestorsOfAFacilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestorsOfAFacility indicates an expected call of GetAncestorsOfAFacility.
func (mr *MockManagerMockRecorder) GetAncestorsOfAFacility(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestorsOfAFacility", reflect.TypeOf((*MockManager)(nil).GetAncestorsOfAFacility), c, request)
}

// GetApplicableOfferForAll mocks base method.
func (m *MockManager) GetApplicableOfferForAll(c echo.Context, req []*request19.GetApplicableOffers) (map[string]*response20.GetApplicableOffers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicableOfferForAll", c, req)
	ret0, _ := ret[0].(map[string]*response20.GetApplicableOffers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicableOfferForAll indicates an expected call of GetApplicableOfferForAll.
func (mr *MockManagerMockRecorder) GetApplicableOfferForAll(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicableOfferForAll", reflect.TypeOf((*MockManager)(nil).GetApplicableOfferForAll), c, req)
}

// GetApplicableOffers mocks base method.
func (m *MockManager) GetApplicableOffers(c echo.Context, req *request19.GetApplicableOffers) (*response20.GetApplicableOffers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicableOffers", c, req)
	ret0, _ := ret[0].(*response20.GetApplicableOffers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicableOffers indicates an expected call of GetApplicableOffers.
func (mr *MockManagerMockRecorder) GetApplicableOffers(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicableOffers", reflect.TypeOf((*MockManager)(nil).GetApplicableOffers), c, req)
}

// GetAuthClient mocks base method.
func (m *MockManager) GetAuthClient(c echo.Context) (v1.AuthenticationClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthClient", c)
	ret0, _ := ret[0].(v1.AuthenticationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthClient indicates an expected call of GetAuthClient.
func (mr *MockManagerMockRecorder) GetAuthClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthClient", reflect.TypeOf((*MockManager)(nil).GetAuthClient), c)
}

// GetBatch mocks base method.
func (m *MockManager) GetBatch(c echo.Context, request *request25.GetBatchRequest) (*response26.GetBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", c, request)
	ret0, _ := ret[0].(*response26.GetBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockManagerMockRecorder) GetBatch(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockManager)(nil).GetBatch), c, request)
}

// GetBatchActivities mocks base method.
func (m *MockManager) GetBatchActivities(c echo.Context, req *request8.ListBatchActivityRequest) (*response8.ListActivityReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchActivities", c, req)
	ret0, _ := ret[0].(*response8.ListActivityReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchActivities indicates an expected call of GetBatchActivities.
func (mr *MockManagerMockRecorder) GetBatchActivities(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchActivities", reflect.TypeOf((*MockManager)(nil).GetBatchActivities), c, req)
}

// GetBatchCourseContents mocks base method.
func (m *MockManager) GetBatchCourseContents(c echo.Context, req *request8.GetBatchContentListRequestByIds) (*response8.GetContentListByIdsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchCourseContents", c, req)
	ret0, _ := ret[0].(*response8.GetContentListByIdsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchCourseContents indicates an expected call of GetBatchCourseContents.
func (mr *MockManagerMockRecorder) GetBatchCourseContents(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchCourseContents", reflect.TypeOf((*MockManager)(nil).GetBatchCourseContents), c, req)
}

// GetBatchDetail mocks base method.
func (m *MockManager) GetBatchDetail(c echo.Context, request *request25.GetBatchDetailRequest) (*response26.GetBatchDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchDetail", c, request)
	ret0, _ := ret[0].(*response26.GetBatchDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchDetail indicates an expected call of GetBatchDetail.
func (mr *MockManagerMockRecorder) GetBatchDetail(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchDetail", reflect.TypeOf((*MockManager)(nil).GetBatchDetail), c, request)
}

// GetBatchIDToBatchMap mocks base method.
func (m *MockManager) GetBatchIDToBatchMap(c echo.Context, batchIDs []string) (map[string]*response26.ResourceFilterResponse_Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchIDToBatchMap", c, batchIDs)
	ret0, _ := ret[0].(map[string]*response26.ResourceFilterResponse_Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchIDToBatchMap indicates an expected call of GetBatchIDToBatchMap.
func (mr *MockManagerMockRecorder) GetBatchIDToBatchMap(c, batchIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchIDToBatchMap", reflect.TypeOf((*MockManager)(nil).GetBatchIDToBatchMap), c, batchIDs)
}

// GetBatchSyllabus mocks base method.
func (m *MockManager) GetBatchSyllabus(c echo.Context, arg1 *config.Config, request *request25.GetBatchSyllabusRequest) (*response26.GetCourseSyllabusV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchSyllabus", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetCourseSyllabusV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchSyllabus indicates an expected call of GetBatchSyllabus.
func (mr *MockManagerMockRecorder) GetBatchSyllabus(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchSyllabus", reflect.TypeOf((*MockManager)(nil).GetBatchSyllabus), c, arg1, request)
}

// GetBatches mocks base method.
func (m *MockManager) GetBatches(c echo.Context, request *request25.GetBatchesRequest) (*response26.GetBatchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatches", c, request)
	ret0, _ := ret[0].(*response26.GetBatchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatches indicates an expected call of GetBatches.
func (mr *MockManagerMockRecorder) GetBatches(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatches", reflect.TypeOf((*MockManager)(nil).GetBatches), c, request)
}

// GetBatchesFilter mocks base method.
func (m *MockManager) GetBatchesFilter(c echo.Context, request *request25.GetBatchesRequestV2) (*response26.ResourceFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchesFilter", c, request)
	ret0, _ := ret[0].(*response26.ResourceFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchesFilter indicates an expected call of GetBatchesFilter.
func (mr *MockManagerMockRecorder) GetBatchesFilter(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchesFilter", reflect.TypeOf((*MockManager)(nil).GetBatchesFilter), c, request)
}

// GetBatchesInBulk mocks base method.
func (m *MockManager) GetBatchesInBulk(c echo.Context, request *request25.BulkGetBatchRequest) (*response26.GetBatchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchesInBulk", c, request)
	ret0, _ := ret[0].(*response26.GetBatchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchesInBulk indicates an expected call of GetBatchesInBulk.
func (mr *MockManagerMockRecorder) GetBatchesInBulk(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchesInBulk", reflect.TypeOf((*MockManager)(nil).GetBatchesInBulk), c, request)
}

// GetBatchesListing mocks base method.
func (m *MockManager) GetBatchesListing(c echo.Context, request *request25.GetBatchesRequestV2) (*response26.GetBatchesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchesListing", c, request)
	ret0, _ := ret[0].(*response26.GetBatchesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchesListing indicates an expected call of GetBatchesListing.
func (mr *MockManagerMockRecorder) GetBatchesListing(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchesListing", reflect.TypeOf((*MockManager)(nil).GetBatchesListing), c, request)
}

// GetBulkDownloadMaterial mocks base method.
func (m *MockManager) GetBulkDownloadMaterial(c echo.Context, cnf *config.Config, req *request2.GetBulkDownloadMaterialRequest) (*response2.GetBulkDownloadMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkDownloadMaterial", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetBulkDownloadMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkDownloadMaterial indicates an expected call of GetBulkDownloadMaterial.
func (mr *MockManagerMockRecorder) GetBulkDownloadMaterial(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkDownloadMaterial", reflect.TypeOf((*MockManager)(nil).GetBulkDownloadMaterial), c, cnf, req)
}

// GetCardsStack mocks base method.
func (m *MockManager) GetCardsStack(c echo.Context, request *request3.GetCardsStackRequest) (*response3.GetCardsStackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardsStack", c, request)
	ret0, _ := ret[0].(*response3.GetCardsStackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardsStack indicates an expected call of GetCardsStack.
func (mr *MockManagerMockRecorder) GetCardsStack(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsStack", reflect.TypeOf((*MockManager)(nil).GetCardsStack), c, request)
}

// GetCart mocks base method.
func (m *MockManager) GetCart(c echo.Context, req *request5.GetCartRequest) (*response5.GetCartReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", c, req)
	ret0, _ := ret[0].(*response5.GetCartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockManagerMockRecorder) GetCart(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockManager)(nil).GetCart), c, req)
}

// GetCartV2 mocks base method.
func (m *MockManager) GetCartV2(c echo.Context, req *request6.GetCartRequest) (*response6.GetCartReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartV2", c, req)
	ret0, _ := ret[0].(*response6.GetCartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartV2 indicates an expected call of GetCartV2.
func (mr *MockManagerMockRecorder) GetCartV2(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartV2", reflect.TypeOf((*MockManager)(nil).GetCartV2), c, req)
}

// GetCheckoutByCartID mocks base method.
func (m *MockManager) GetCheckoutByCartID(c echo.Context, req *request5.GetCheckoutByCartIDRequest) (*response5.GetCheckoutByCartIDReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckoutByCartID", c, req)
	ret0, _ := ret[0].(*response5.GetCheckoutByCartIDReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckoutByCartID indicates an expected call of GetCheckoutByCartID.
func (mr *MockManagerMockRecorder) GetCheckoutByCartID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckoutByCartID", reflect.TypeOf((*MockManager)(nil).GetCheckoutByCartID), c, req)
}

// GetChildrenNodes mocks base method.
func (m *MockManager) GetChildrenNodes(c echo.Context, taxonomyID, nodeID, ignoreCache string) (*response29.GetChildrenOfANodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenNodes", c, taxonomyID, nodeID, ignoreCache)
	ret0, _ := ret[0].(*response29.GetChildrenOfANodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenNodes indicates an expected call of GetChildrenNodes.
func (mr *MockManagerMockRecorder) GetChildrenNodes(c, taxonomyID, nodeID, ignoreCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenNodes", reflect.TypeOf((*MockManager)(nil).GetChildrenNodes), c, taxonomyID, nodeID, ignoreCache)
}

// GetClassSchedule mocks base method.
func (m *MockManager) GetClassSchedule(c echo.Context, request *request25.ClassScheduleGetRequest) (*response26.ClassScheduleGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassSchedule", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassSchedule indicates an expected call of GetClassSchedule.
func (mr *MockManagerMockRecorder) GetClassSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassSchedule", reflect.TypeOf((*MockManager)(nil).GetClassSchedule), c, request)
}

// GetClassScheduleClient mocks base method.
func (m *MockManager) GetClassScheduleClient(c echo.Context) (v110.ClassScheduleClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassScheduleClient", c)
	ret0, _ := ret[0].(v110.ClassScheduleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassScheduleClient indicates an expected call of GetClassScheduleClient.
func (mr *MockManagerMockRecorder) GetClassScheduleClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassScheduleClient", reflect.TypeOf((*MockManager)(nil).GetClassScheduleClient), c)
}

// GetClassScheduleColumns mocks base method.
func (m *MockManager) GetClassScheduleColumns(c echo.Context, request *request25.ClassScheduleGetColumnsRequest) (*response26.ClassScheduleGetColumnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassScheduleColumns", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleGetColumnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassScheduleColumns indicates an expected call of GetClassScheduleColumns.
func (mr *MockManagerMockRecorder) GetClassScheduleColumns(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassScheduleColumns", reflect.TypeOf((*MockManager)(nil).GetClassScheduleColumns), c, request)
}

// GetClassScheduleSummary mocks base method.
func (m *MockManager) GetClassScheduleSummary(c echo.Context, request *request25.ClassSchedulesSummaryRequest) (*response26.ClassSchedulesSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassScheduleSummary", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassScheduleSummary indicates an expected call of GetClassScheduleSummary.
func (mr *MockManagerMockRecorder) GetClassScheduleSummary(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassScheduleSummary", reflect.TypeOf((*MockManager)(nil).GetClassScheduleSummary), c, request)
}

// GetClassSchedules mocks base method.
func (m *MockManager) GetClassSchedules(c echo.Context, request *request25.ClassSchedulesGetRequest) (*response26.ClassSchedulesGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassSchedules", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassSchedules indicates an expected call of GetClassSchedules.
func (mr *MockManagerMockRecorder) GetClassSchedules(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassSchedules", reflect.TypeOf((*MockManager)(nil).GetClassSchedules), c, request)
}

// GetClassSchedulesV2 mocks base method.
func (m *MockManager) GetClassSchedulesV2(c echo.Context, request *request25.ClassSchedulesGetRequestV2) (*response26.ClassSchedulesGetResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassSchedulesV2", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesGetResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassSchedulesV2 indicates an expected call of GetClassSchedulesV2.
func (mr *MockManagerMockRecorder) GetClassSchedulesV2(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassSchedulesV2", reflect.TypeOf((*MockManager)(nil).GetClassSchedulesV2), c, request)
}

// GetContentByID mocks base method.
func (m *MockManager) GetContentByID(c echo.Context, req *request8.GetContentReq) (*response8.GetContentByIdsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", c, req)
	ret0, _ := ret[0].(*response8.GetContentByIdsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockManagerMockRecorder) GetContentByID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockManager)(nil).GetContentByID), c, req)
}

// GetCourseChangeList mocks base method.
func (m *MockManager) GetCourseChangeList(c echo.Context, request *request26.GetStudentCourseChangeListRequest) (*response27.GetStudentCourseChangeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseChangeList", c, request)
	ret0, _ := ret[0].(*response27.GetStudentCourseChangeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseChangeList indicates an expected call of GetCourseChangeList.
func (mr *MockManagerMockRecorder) GetCourseChangeList(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseChangeList", reflect.TypeOf((*MockManager)(nil).GetCourseChangeList), c, request)
}

// GetCourseContent mocks base method.
func (m *MockManager) GetCourseContent(c echo.Context, arg1 *config.Config, request *request25.GetCourseContentRequest) (*response26.GetCourseContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContent", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetCourseContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContent indicates an expected call of GetCourseContent.
func (mr *MockManagerMockRecorder) GetCourseContent(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContent", reflect.TypeOf((*MockManager)(nil).GetCourseContent), c, arg1, request)
}

// GetCourseContents mocks base method.
func (m *MockManager) GetCourseContents(c echo.Context, req *request8.GetContentListRequestByIds) (*response8.GetContentListByIdsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContents", c, req)
	ret0, _ := ret[0].(*response8.GetContentListByIdsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContents indicates an expected call of GetCourseContents.
func (mr *MockManagerMockRecorder) GetCourseContents(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContents", reflect.TypeOf((*MockManager)(nil).GetCourseContents), c, req)
}

// GetCourseSummary mocks base method.
func (m *MockManager) GetCourseSummary(c echo.Context, request *request25.CourseRequest) (*response26.CourseSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseSummary", c, request)
	ret0, _ := ret[0].(*response26.CourseSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseSummary indicates an expected call of GetCourseSummary.
func (mr *MockManagerMockRecorder) GetCourseSummary(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseSummary", reflect.TypeOf((*MockManager)(nil).GetCourseSummary), c, request)
}

// GetCourseSyllabus mocks base method.
func (m *MockManager) GetCourseSyllabus(c echo.Context, arg1 *config.Config, request *request25.GetCourseSyllabusRequest) (*response26.GetCourseSyllabusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseSyllabus", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetCourseSyllabusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseSyllabus indicates an expected call of GetCourseSyllabus.
func (mr *MockManagerMockRecorder) GetCourseSyllabus(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseSyllabus", reflect.TypeOf((*MockManager)(nil).GetCourseSyllabus), c, arg1, request)
}

// GetCourseSyllabusV2 mocks base method.
func (m *MockManager) GetCourseSyllabusV2(c echo.Context, arg1 *config.Config, request *request25.GetCourseSyllabusV2Request) (*response26.GetCourseSyllabusV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseSyllabusV2", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetCourseSyllabusV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseSyllabusV2 indicates an expected call of GetCourseSyllabusV2.
func (mr *MockManagerMockRecorder) GetCourseSyllabusV2(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseSyllabusV2", reflect.TypeOf((*MockManager)(nil).GetCourseSyllabusV2), c, arg1, request)
}

// GetCourseTopicNodes mocks base method.
func (m *MockManager) GetCourseTopicNodes(c echo.Context, request *request25.LecturePlanTopicNodesRequest) (*response26.LecturePlanTopicNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseTopicNodes", c, request)
	ret0, _ := ret[0].(*response26.LecturePlanTopicNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseTopicNodes indicates an expected call of GetCourseTopicNodes.
func (mr *MockManagerMockRecorder) GetCourseTopicNodes(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseTopicNodes", reflect.TypeOf((*MockManager)(nil).GetCourseTopicNodes), c, request)
}

// GetCourses mocks base method.
func (m *MockManager) GetCourses(c echo.Context, req *request8.ListListingRequest, grpcHandler grpc.Manager) (*response8.ListListingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourses", c, req, grpcHandler)
	ret0, _ := ret[0].(*response8.ListListingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses.
func (mr *MockManagerMockRecorder) GetCourses(c, req, grpcHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockManager)(nil).GetCourses), c, req, grpcHandler)
}

// GetCoursesFilter mocks base method.
func (m *MockManager) GetCoursesFilter(c echo.Context, request *request25.GetCoursesRequestV2) (*response26.ResourceFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesFilter", c, request)
	ret0, _ := ret[0].(*response26.ResourceFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesFilter indicates an expected call of GetCoursesFilter.
func (mr *MockManagerMockRecorder) GetCoursesFilter(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesFilter", reflect.TypeOf((*MockManager)(nil).GetCoursesFilter), c, request)
}

// GetCoursesList mocks base method.
func (m *MockManager) GetCoursesList(c echo.Context, request *request25.GetCoursesRequest) (*response26.GetCoursesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesList", c, request)
	ret0, _ := ret[0].(*response26.GetCoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesList indicates an expected call of GetCoursesList.
func (mr *MockManagerMockRecorder) GetCoursesList(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesList", reflect.TypeOf((*MockManager)(nil).GetCoursesList), c, request)
}

// GetCoursesListWithV2Syllabus mocks base method.
func (m *MockManager) GetCoursesListWithV2Syllabus(c echo.Context, request *request25.GetCoursesRequestV2) (*response26.GetCoursesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesListWithV2Syllabus", c, request)
	ret0, _ := ret[0].(*response26.GetCoursesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesListWithV2Syllabus indicates an expected call of GetCoursesListWithV2Syllabus.
func (mr *MockManagerMockRecorder) GetCoursesListWithV2Syllabus(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesListWithV2Syllabus", reflect.TypeOf((*MockManager)(nil).GetCoursesListWithV2Syllabus), c, request)
}

// GetCoursesListing mocks base method.
func (m *MockManager) GetCoursesListing(c echo.Context, request *request25.GetCoursesRequestV2) (*response26.GetCoursesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesListing", c, request)
	ret0, _ := ret[0].(*response26.GetCoursesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesListing indicates an expected call of GetCoursesListing.
func (mr *MockManagerMockRecorder) GetCoursesListing(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesListing", reflect.TypeOf((*MockManager)(nil).GetCoursesListing), c, request)
}

// GetCustomTestFilters mocks base method.
func (m *MockManager) GetCustomTestFilters(ctx echo.Context, req *customTestRequest.GetCustomTestFiltersRequest) (*customTestResponse.GetCustomTestFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomTestFilters", ctx, req)
	ret0, _ := ret[0].(*customTestResponse.GetCustomTestFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomTestFilters indicates an expected call of GetCustomTestFilters.
func (mr *MockManagerMockRecorder) GetCustomTestFilters(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomTestFilters", reflect.TypeOf((*MockManager)(nil).GetCustomTestFilters), ctx, req)
}

// GetDefaultMentorListForBatches mocks base method.
func (m *MockManager) GetDefaultMentorListForBatches(c echo.Context, req *request3.GetDefaultMentorListRequest) (*response3.GetDefaultMentorListReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultMentorListForBatches", c, req)
	ret0, _ := ret[0].(*response3.GetDefaultMentorListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultMentorListForBatches indicates an expected call of GetDefaultMentorListForBatches.
func (mr *MockManagerMockRecorder) GetDefaultMentorListForBatches(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultMentorListForBatches", reflect.TypeOf((*MockManager)(nil).GetDefaultMentorListForBatches), c, req)
}

// GetDescendantsOfAFacility mocks base method.
func (m *MockManager) GetDescendantsOfAFacility(c echo.Context, request *request25.GetDescendantsOfAFacilityRequest) (*response26.GetDescendantsOfAFacilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescendantsOfAFacility", c, request)
	ret0, _ := ret[0].(*response26.GetDescendantsOfAFacilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDescendantsOfAFacility indicates an expected call of GetDescendantsOfAFacility.
func (mr *MockManagerMockRecorder) GetDescendantsOfAFacility(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescendantsOfAFacility", reflect.TypeOf((*MockManager)(nil).GetDescendantsOfAFacility), c, request)
}

// GetDoubt mocks base method.
func (m *MockManager) GetDoubt(c echo.Context, req *request9.GetDoubtRequest) (*response9.GetDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoubt", c, req)
	ret0, _ := ret[0].(*response9.GetDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoubt indicates an expected call of GetDoubt.
func (mr *MockManagerMockRecorder) GetDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoubt", reflect.TypeOf((*MockManager)(nil).GetDoubt), c, req)
}

// GetDoubtTeacherMapping mocks base method.
func (m *MockManager) GetDoubtTeacherMapping(c echo.Context, request *request25.DoubtMappingRequest) (*response26.DoubtMappingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoubtTeacherMapping", c, request)
	ret0, _ := ret[0].(*response26.DoubtMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoubtTeacherMapping indicates an expected call of GetDoubtTeacherMapping.
func (mr *MockManagerMockRecorder) GetDoubtTeacherMapping(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoubtTeacherMapping", reflect.TypeOf((*MockManager)(nil).GetDoubtTeacherMapping), c, request)
}

// GetDownloadPresignedURL mocks base method.
func (m *MockManager) GetDownloadPresignedURL(c echo.Context, cnf *config.Config, req *request2.GetDownloadPresignedURLRequest) (*response2.GetDownloadPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadPresignedURL", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetDownloadPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadPresignedURL indicates an expected call of GetDownloadPresignedURL.
func (mr *MockManagerMockRecorder) GetDownloadPresignedURL(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadPresignedURL", reflect.TypeOf((*MockManager)(nil).GetDownloadPresignedURL), c, cnf, req)
}

// GetDownloadURL mocks base method.
func (m *MockManager) GetDownloadURL(c echo.Context, req *request20.GetDownloadURLRequest) (*response21.GetDownloadURLReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURL", c, req)
	ret0, _ := ret[0].(*response21.GetDownloadURLReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadURL indicates an expected call of GetDownloadURL.
func (mr *MockManagerMockRecorder) GetDownloadURL(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURL", reflect.TypeOf((*MockManager)(nil).GetDownloadURL), c, req)
}

// GetDraftDoubt mocks base method.
func (m *MockManager) GetDraftDoubt(c echo.Context, req *request9.GetDoubtRequest) (*response9.GetDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraftDoubt", c, req)
	ret0, _ := ret[0].(*response9.GetDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraftDoubt indicates an expected call of GetDraftDoubt.
func (mr *MockManagerMockRecorder) GetDraftDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftDoubt", reflect.TypeOf((*MockManager)(nil).GetDraftDoubt), c, req)
}

// GetDynamicURL mocks base method.
func (m *MockManager) GetDynamicURL(c echo.Context, orgUserID, tenantID string) (*response3.GetDynamicUrlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicURL", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetDynamicUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicURL indicates an expected call of GetDynamicURL.
func (mr *MockManagerMockRecorder) GetDynamicURL(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicURL", reflect.TypeOf((*MockManager)(nil).GetDynamicURL), c, orgUserID, tenantID)
}

// GetFacilities mocks base method.
func (m *MockManager) GetFacilities(c echo.Context, request *request25.GetFacilitiesRequest) (*response26.GetFacilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilities", c, request)
	ret0, _ := ret[0].(*response26.GetFacilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilities indicates an expected call of GetFacilities.
func (mr *MockManagerMockRecorder) GetFacilities(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilities", reflect.TypeOf((*MockManager)(nil).GetFacilities), c, request)
}

// GetFacilitiesFilter mocks base method.
func (m *MockManager) GetFacilitiesFilter(c echo.Context, request *request25.GetFacilitiesRequestV2) (*response26.ResourceFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilitiesFilter", c, request)
	ret0, _ := ret[0].(*response26.ResourceFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilitiesFilter indicates an expected call of GetFacilitiesFilter.
func (mr *MockManagerMockRecorder) GetFacilitiesFilter(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilitiesFilter", reflect.TypeOf((*MockManager)(nil).GetFacilitiesFilter), c, request)
}

// GetFacilitiesListing mocks base method.
func (m *MockManager) GetFacilitiesListing(c echo.Context, request *request25.GetFacilitiesRequestV2) (*response26.GetFacilitiesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilitiesListing", c, request)
	ret0, _ := ret[0].(*response26.GetFacilitiesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilitiesListing indicates an expected call of GetFacilitiesListing.
func (mr *MockManagerMockRecorder) GetFacilitiesListing(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilitiesListing", reflect.TypeOf((*MockManager)(nil).GetFacilitiesListing), c, request)
}

// GetFacilityIDToFacilityMap mocks base method.
func (m *MockManager) GetFacilityIDToFacilityMap(c echo.Context, facilityIDs []string) (map[string]*types0.FacilityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilityIDToFacilityMap", c, facilityIDs)
	ret0, _ := ret[0].(map[string]*types0.FacilityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilityIDToFacilityMap indicates an expected call of GetFacilityIDToFacilityMap.
func (mr *MockManagerMockRecorder) GetFacilityIDToFacilityMap(c, facilityIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilityIDToFacilityMap", reflect.TypeOf((*MockManager)(nil).GetFacilityIDToFacilityMap), c, facilityIDs)
}

// GetFeedbacks mocks base method.
func (m *MockManager) GetFeedbacks(ctx echo.Context, req *v15.GetFeedbacksRequest) (*v16.GetFeedbacksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbacks", ctx, req)
	ret0, _ := ret[0].(*v16.GetFeedbacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbacks indicates an expected call of GetFeedbacks.
func (mr *MockManagerMockRecorder) GetFeedbacks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbacks", reflect.TypeOf((*MockManager)(nil).GetFeedbacks), ctx, req)
}

// GetFileURL mocks base method.
func (m *MockManager) GetFileURL(c echo.Context, req *request9.GetFileUrlRequest) (*response9.GetFileUrlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileURL", c, req)
	ret0, _ := ret[0].(*response9.GetFileUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileURL indicates an expected call of GetFileURL.
func (mr *MockManagerMockRecorder) GetFileURL(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileURL", reflect.TypeOf((*MockManager)(nil).GetFileURL), c, req)
}

// GetFilteredQuestionCollections mocks base method.
func (m *MockManager) GetFilteredQuestionCollections(ctx echo.Context, filterReq *request23.GetFilteredQuestionCollectionsRequest) (*response24.GetFilteredQuestionCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredQuestionCollections", ctx, filterReq)
	ret0, _ := ret[0].(*response24.GetFilteredQuestionCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredQuestionCollections indicates an expected call of GetFilteredQuestionCollections.
func (mr *MockManagerMockRecorder) GetFilteredQuestionCollections(ctx, filterReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredQuestionCollections", reflect.TypeOf((*MockManager)(nil).GetFilteredQuestionCollections), ctx, filterReq)
}

// GetFlashcards mocks base method.
func (m *MockManager) GetFlashcards(c echo.Context, cnf *config.Config, req *request2.GetFlashcardsRequest) (*response2.GetFlashcardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlashcards", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetFlashcardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlashcards indicates an expected call of GetFlashcards.
func (mr *MockManagerMockRecorder) GetFlashcards(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlashcards", reflect.TypeOf((*MockManager)(nil).GetFlashcards), c, cnf, req)
}

// GetFlashcardsCount mocks base method.
func (m *MockManager) GetFlashcardsCount(c echo.Context, cnf *config.Config, req *request2.CreateFlashcardSessionRequest) (*response2.GetFlashcardsCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlashcardsCount", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetFlashcardsCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlashcardsCount indicates an expected call of GetFlashcardsCount.
func (mr *MockManagerMockRecorder) GetFlashcardsCount(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlashcardsCount", reflect.TypeOf((*MockManager)(nil).GetFlashcardsCount), c, cnf, req)
}

// GetFlashcardsSessionStats mocks base method.
func (m *MockManager) GetFlashcardsSessionStats(c echo.Context, cnf *config.Config, req *request2.GetFlashcardSessionStatsRequest) (*response2.GetFlashcardSessionStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlashcardsSessionStats", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetFlashcardSessionStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlashcardsSessionStats indicates an expected call of GetFlashcardsSessionStats.
func (mr *MockManagerMockRecorder) GetFlashcardsSessionStats(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlashcardsSessionStats", reflect.TypeOf((*MockManager)(nil).GetFlashcardsSessionStats), c, cnf, req)
}

// GetFreemiumCourse mocks base method.
func (m *MockManager) GetFreemiumCourse(c echo.Context, request *request25.GetFreemiumCourseRequest) (*response26.GetFreemiumCourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreemiumCourse", c, request)
	ret0, _ := ret[0].(*response26.GetFreemiumCourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreemiumCourse indicates an expected call of GetFreemiumCourse.
func (mr *MockManagerMockRecorder) GetFreemiumCourse(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreemiumCourse", reflect.TypeOf((*MockManager)(nil).GetFreemiumCourse), c, request)
}

// GetGoalTemplate mocks base method.
func (m *MockManager) GetGoalTemplate(ctx echo.Context, req *request13.GetGoalTemplateRequest) (*response13.GetGoalTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalTemplate", ctx, req)
	ret0, _ := ret[0].(*response13.GetGoalTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalTemplate indicates an expected call of GetGoalTemplate.
func (mr *MockManagerMockRecorder) GetGoalTemplate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalTemplate", reflect.TypeOf((*MockManager)(nil).GetGoalTemplate), ctx, req)
}

// GetGroupMentorshipEligibilityStatus mocks base method.
func (m *MockManager) GetGroupMentorshipEligibilityStatus(c echo.Context, req *request3.GetGroupMentorshipEligibilityStatusRequest) (*response3.GetGroupMentorshipEligibilityStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMentorshipEligibilityStatus", c, req)
	ret0, _ := ret[0].(*response3.GetGroupMentorshipEligibilityStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMentorshipEligibilityStatus indicates an expected call of GetGroupMentorshipEligibilityStatus.
func (mr *MockManagerMockRecorder) GetGroupMentorshipEligibilityStatus(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMentorshipEligibilityStatus", reflect.TypeOf((*MockManager)(nil).GetGroupMentorshipEligibilityStatus), c, req)
}

// GetHomework mocks base method.
func (m *MockManager) GetHomework(ctx echo.Context, req *request11.SearchHomeworkRequest) (*response11.Homework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomework", ctx, req)
	ret0, _ := ret[0].(*response11.Homework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomework indicates an expected call of GetHomework.
func (mr *MockManagerMockRecorder) GetHomework(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomework", reflect.TypeOf((*MockManager)(nil).GetHomework), ctx, req)
}

// GetHomeworkQuestionCollectionMergedView mocks base method.
func (m *MockManager) GetHomeworkQuestionCollectionMergedView(ctx echo.Context, req *request24.GetHomeworkQuestionCollectionMergedViewRequest) (*response25.GetHomeworkQuestionCollectionMergedViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeworkQuestionCollectionMergedView", ctx, req)
	ret0, _ := ret[0].(*response25.GetHomeworkQuestionCollectionMergedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeworkQuestionCollectionMergedView indicates an expected call of GetHomeworkQuestionCollectionMergedView.
func (mr *MockManagerMockRecorder) GetHomeworkQuestionCollectionMergedView(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeworkQuestionCollectionMergedView", reflect.TypeOf((*MockManager)(nil).GetHomeworkQuestionCollectionMergedView), ctx, req)
}

// GetHomeworkQuestionCollectionPreview mocks base method.
func (m *MockManager) GetHomeworkQuestionCollectionPreview(ctx echo.Context, req *request24.GetHomeworkQuestionCollectionPreviewRequest) (*response25.GetHomeworkQuestionCollectionPreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeworkQuestionCollectionPreview", ctx, req)
	ret0, _ := ret[0].(*response25.GetHomeworkQuestionCollectionPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeworkQuestionCollectionPreview indicates an expected call of GetHomeworkQuestionCollectionPreview.
func (mr *MockManagerMockRecorder) GetHomeworkQuestionCollectionPreview(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeworkQuestionCollectionPreview", reflect.TypeOf((*MockManager)(nil).GetHomeworkQuestionCollectionPreview), ctx, req)
}

// GetHomeworkQuestionCollectionSynopsis mocks base method.
func (m *MockManager) GetHomeworkQuestionCollectionSynopsis(ctx echo.Context, req *request24.GetHomeworkQuestionCollectionSynopsisRequest) (*response25.GetHomeworkQuestionCollectionSynopsisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeworkQuestionCollectionSynopsis", ctx, req)
	ret0, _ := ret[0].(*response25.GetHomeworkQuestionCollectionSynopsisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeworkQuestionCollectionSynopsis indicates an expected call of GetHomeworkQuestionCollectionSynopsis.
func (mr *MockManagerMockRecorder) GetHomeworkQuestionCollectionSynopsis(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeworkQuestionCollectionSynopsis", reflect.TypeOf((*MockManager)(nil).GetHomeworkQuestionCollectionSynopsis), ctx, req)
}

// GetIBQuestionsByStatus mocks base method.
func (m *MockManager) GetIBQuestionsByStatus(ctx echo.Context, req *request12.GetIBQuestionsByStatusRequest) (*response12.GetIBQuestionsByStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIBQuestionsByStatus", ctx, req)
	ret0, _ := ret[0].(*response12.GetIBQuestionsByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIBQuestionsByStatus indicates an expected call of GetIBQuestionsByStatus.
func (mr *MockManagerMockRecorder) GetIBQuestionsByStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIBQuestionsByStatus", reflect.TypeOf((*MockManager)(nil).GetIBQuestionsByStatus), ctx, req)
}

// GetIBQuestionsForReattempt mocks base method.
func (m *MockManager) GetIBQuestionsForReattempt(ctx echo.Context, req *request12.GetIBQuestionsForReattemptRequest) (*response12.GetIBQuestionsForReattemptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIBQuestionsForReattempt", ctx, req)
	ret0, _ := ret[0].(*response12.GetIBQuestionsForReattemptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIBQuestionsForReattempt indicates an expected call of GetIBQuestionsForReattempt.
func (mr *MockManagerMockRecorder) GetIBQuestionsForReattempt(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIBQuestionsForReattempt", reflect.TypeOf((*MockManager)(nil).GetIBQuestionsForReattempt), ctx, req)
}

// GetIBQuestionsForReview mocks base method.
func (m *MockManager) GetIBQuestionsForReview(ctx echo.Context, req *request12.GetIBQuestionsForReviewRequest) (*response12.GetIBQuestionsForReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIBQuestionsForReview", ctx, req)
	ret0, _ := ret[0].(*response12.GetIBQuestionsForReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIBQuestionsForReview indicates an expected call of GetIBQuestionsForReview.
func (mr *MockManagerMockRecorder) GetIBQuestionsForReview(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIBQuestionsForReview", reflect.TypeOf((*MockManager)(nil).GetIBQuestionsForReview), ctx, req)
}

// GetIdentitiesByUser mocks base method.
func (m *MockManager) GetIdentitiesByUser(c echo.Context, cnf *config.Config, tenantID, userID string) (*response34.GetIdentitiesByUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentitiesByUser", c, cnf, tenantID, userID)
	ret0, _ := ret[0].(*response34.GetIdentitiesByUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentitiesByUser indicates an expected call of GetIdentitiesByUser.
func (mr *MockManagerMockRecorder) GetIdentitiesByUser(c, cnf, tenantID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitiesByUser", reflect.TypeOf((*MockManager)(nil).GetIdentitiesByUser), c, cnf, tenantID, userID)
}

// GetLanguages mocks base method.
func (m *MockManager) GetLanguages(ctx echo.Context) (*response14.GetLanguagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguages", ctx)
	ret0, _ := ret[0].(*response14.GetLanguagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockManagerMockRecorder) GetLanguages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockManager)(nil).GetLanguages), ctx)
}

// GetLastAccessedStep mocks base method.
func (m *MockManager) GetLastAccessedStep(ctx echo.Context, req *request13.LastAccessedStepRequest) (*response13.LastAccessedStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAccessedStep", ctx, req)
	ret0, _ := ret[0].(*response13.LastAccessedStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastAccessedStep indicates an expected call of GetLastAccessedStep.
func (mr *MockManagerMockRecorder) GetLastAccessedStep(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAccessedStep", reflect.TypeOf((*MockManager)(nil).GetLastAccessedStep), ctx, req)
}

// GetLastCompletedMeeting mocks base method.
func (m *MockManager) GetLastCompletedMeeting(c echo.Context, cnf *config.Config, meetingInfo *response7.MeetingInfo, attendeeID string) (*response7.CommonMeetingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCompletedMeeting", c, cnf, meetingInfo, attendeeID)
	ret0, _ := ret[0].(*response7.CommonMeetingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCompletedMeeting indicates an expected call of GetLastCompletedMeeting.
func (mr *MockManagerMockRecorder) GetLastCompletedMeeting(c, cnf, meetingInfo, attendeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCompletedMeeting", reflect.TypeOf((*MockManager)(nil).GetLastCompletedMeeting), c, cnf, meetingInfo, attendeeID)
}

// GetLatestAttemptStudentTestOverview mocks base method.
func (m *MockManager) GetLatestAttemptStudentTestOverview(ctx echo.Context, request *request32.GetStudentTestOverviewRequest) (*reply1.StudentTestOverviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAttemptStudentTestOverview", ctx, request)
	ret0, _ := ret[0].(*reply1.StudentTestOverviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAttemptStudentTestOverview indicates an expected call of GetLatestAttemptStudentTestOverview.
func (mr *MockManagerMockRecorder) GetLatestAttemptStudentTestOverview(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAttemptStudentTestOverview", reflect.TypeOf((*MockManager)(nil).GetLatestAttemptStudentTestOverview), ctx, request)
}

// GetLatestIbByStudentID mocks base method.
func (m *MockManager) GetLatestIbByStudentID(ctx echo.Context, req *request12.GetLatestIbByStudentIdRequest) (*response12.GetLatestIbByStudentIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestIbByStudentID", ctx, req)
	ret0, _ := ret[0].(*response12.GetLatestIbByStudentIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestIbByStudentID indicates an expected call of GetLatestIbByStudentID.
func (mr *MockManagerMockRecorder) GetLatestIbByStudentID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestIbByStudentID", reflect.TypeOf((*MockManager)(nil).GetLatestIbByStudentID), ctx, req)
}

// GetLatestResultPreviewReports mocks base method.
func (m *MockManager) GetLatestResultPreviewReports(ctx echo.Context, request *request31.GetLatestResultPreviewReportsRequest) (*reply0.GetLatestResultPreviewReportsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestResultPreviewReports", ctx, request)
	ret0, _ := ret[0].(*reply0.GetLatestResultPreviewReportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestResultPreviewReports indicates an expected call of GetLatestResultPreviewReports.
func (mr *MockManagerMockRecorder) GetLatestResultPreviewReports(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestResultPreviewReports", reflect.TypeOf((*MockManager)(nil).GetLatestResultPreviewReports), ctx, request)
}

// GetLatestTestCorrection mocks base method.
func (m *MockManager) GetLatestTestCorrection(ctx echo.Context, request *request31.GetLatestTestCorrectionRequest) (*reply0.GetLatestTestCorrectionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTestCorrection", ctx, request)
	ret0, _ := ret[0].(*reply0.GetLatestTestCorrectionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTestCorrection indicates an expected call of GetLatestTestCorrection.
func (mr *MockManagerMockRecorder) GetLatestTestCorrection(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTestCorrection", reflect.TypeOf((*MockManager)(nil).GetLatestTestCorrection), ctx, request)
}

// GetLearningCategories mocks base method.
func (m *MockManager) GetLearningCategories(ctx echo.Context) (*response14.GetLearningCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearningCategories", ctx)
	ret0, _ := ret[0].(*response14.GetLearningCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearningCategories indicates an expected call of GetLearningCategories.
func (mr *MockManagerMockRecorder) GetLearningCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearningCategories", reflect.TypeOf((*MockManager)(nil).GetLearningCategories), ctx)
}

// GetLearningJourneyStep mocks base method.
func (m *MockManager) GetLearningJourneyStep(ctx echo.Context, req *request13.GetLearningJourneyStepRequest) (*response13.GetLearningJourneyStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearningJourneyStep", ctx, req)
	ret0, _ := ret[0].(*response13.GetLearningJourneyStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearningJourneyStep indicates an expected call of GetLearningJourneyStep.
func (mr *MockManagerMockRecorder) GetLearningJourneyStep(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearningJourneyStep", reflect.TypeOf((*MockManager)(nil).GetLearningJourneyStep), ctx, req)
}

// GetLearningJourneyStepsList mocks base method.
func (m *MockManager) GetLearningJourneyStepsList(ctx echo.Context, req *request13.GetLearningJourneyStepsListRequest) (*response13.GetLearningJourneyStepsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearningJourneyStepsList", ctx, req)
	ret0, _ := ret[0].(*response13.GetLearningJourneyStepsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearningJourneyStepsList indicates an expected call of GetLearningJourneyStepsList.
func (mr *MockManagerMockRecorder) GetLearningJourneyStepsList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearningJourneyStepsList", reflect.TypeOf((*MockManager)(nil).GetLearningJourneyStepsList), ctx, req)
}

// GetLearningMaterial mocks base method.
func (m *MockManager) GetLearningMaterial(c echo.Context, cnf *config.Config, req *request2.GetLearningMaterialRequest) (*response2.GetLearningMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLearningMaterial", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetLearningMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLearningMaterial indicates an expected call of GetLearningMaterial.
func (mr *MockManagerMockRecorder) GetLearningMaterial(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLearningMaterial", reflect.TypeOf((*MockManager)(nil).GetLearningMaterial), c, cnf, req)
}

// GetLecturePlanClient mocks base method.
func (m *MockManager) GetLecturePlanClient(c echo.Context) (v110.LecturePlanClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturePlanClient", c)
	ret0, _ := ret[0].(v110.LecturePlanClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturePlanClient indicates an expected call of GetLecturePlanClient.
func (mr *MockManagerMockRecorder) GetLecturePlanClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturePlanClient", reflect.TypeOf((*MockManager)(nil).GetLecturePlanClient), c)
}

// GetLecturePlanDetails mocks base method.
func (m *MockManager) GetLecturePlanDetails(c echo.Context, request *request25.LecturePlansGetRequest) (*response26.LecturePlansGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturePlanDetails", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturePlanDetails indicates an expected call of GetLecturePlanDetails.
func (mr *MockManagerMockRecorder) GetLecturePlanDetails(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturePlanDetails", reflect.TypeOf((*MockManager)(nil).GetLecturePlanDetails), c, request)
}

// GetLecturePlanMetas mocks base method.
func (m *MockManager) GetLecturePlanMetas(c echo.Context, request *request25.LecturePlanMetasGetRequest) (*response26.LecturePlanMetasGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturePlanMetas", c, request)
	ret0, _ := ret[0].(*response26.LecturePlanMetasGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturePlanMetas indicates an expected call of GetLecturePlanMetas.
func (mr *MockManagerMockRecorder) GetLecturePlanMetas(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturePlanMetas", reflect.TypeOf((*MockManager)(nil).GetLecturePlanMetas), c, request)
}

// GetLecturePlanMetasByBatchIDs mocks base method.
func (m *MockManager) GetLecturePlanMetasByBatchIDs(c echo.Context, tenantID string, batches []string) (map[string][]*types0.LecturePlanMetaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLecturePlanMetasByBatchIDs", c, tenantID, batches)
	ret0, _ := ret[0].(map[string][]*types0.LecturePlanMetaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLecturePlanMetasByBatchIDs indicates an expected call of GetLecturePlanMetasByBatchIDs.
func (mr *MockManagerMockRecorder) GetLecturePlanMetasByBatchIDs(c, tenantID, batches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLecturePlanMetasByBatchIDs", reflect.TypeOf((*MockManager)(nil).GetLecturePlanMetasByBatchIDs), c, tenantID, batches)
}

// GetListing mocks base method.
func (m *MockManager) GetListing(c echo.Context, req *request15.GetListingRequest) (*response15.GetListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListing", c, req)
	ret0, _ := ret[0].(*response15.GetListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListing indicates an expected call of GetListing.
func (mr *MockManagerMockRecorder) GetListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListing", reflect.TypeOf((*MockManager)(nil).GetListing), c, req)
}

// GetListingByFilter mocks base method.
func (m *MockManager) GetListingByFilter(c echo.Context, req *request15.ListingByFilterRequest) (*response15.ListingByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListingByFilter", c, req)
	ret0, _ := ret[0].(*response15.ListingByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListingByFilter indicates an expected call of GetListingByFilter.
func (mr *MockManagerMockRecorder) GetListingByFilter(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingByFilter", reflect.TypeOf((*MockManager)(nil).GetListingByFilter), c, req)
}

// GetLocationClient mocks base method.
func (m *MockManager) GetLocationClient(c echo.Context) v111.LocationClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationClient", c)
	ret0, _ := ret[0].(v111.LocationClient)
	return ret0
}

// GetLocationClient indicates an expected call of GetLocationClient.
func (mr *MockManagerMockRecorder) GetLocationClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationClient", reflect.TypeOf((*MockManager)(nil).GetLocationClient), c)
}

// GetMLModelData mocks base method.
func (m *MockManager) GetMLModelData(c echo.Context, req *request9.GetMLModelDataRequest) (*response9.GetMLModelDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLModelData", c, req)
	ret0, _ := ret[0].(*response9.GetMLModelDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLModelData indicates an expected call of GetMLModelData.
func (mr *MockManagerMockRecorder) GetMLModelData(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLModelData", reflect.TypeOf((*MockManager)(nil).GetMLModelData), c, req)
}

// GetMaterialByID mocks base method.
func (m *MockManager) GetMaterialByID(ctx echo.Context, req *request14.GetLearningMaterialByIdRequest) (*response14.GetLearningMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialByID", ctx, req)
	ret0, _ := ret[0].(*response14.GetLearningMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialByID indicates an expected call of GetMaterialByID.
func (mr *MockManagerMockRecorder) GetMaterialByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialByID", reflect.TypeOf((*MockManager)(nil).GetMaterialByID), ctx, req)
}

// GetMaterialByMaterialID mocks base method.
func (m *MockManager) GetMaterialByMaterialID(ctx echo.Context, req *request14.GetLearningMaterialByMaterialIdRequest) (*response14.GetLearningMaterialResponseByMaterialId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialByMaterialID", ctx, req)
	ret0, _ := ret[0].(*response14.GetLearningMaterialResponseByMaterialId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialByMaterialID indicates an expected call of GetMaterialByMaterialID.
func (mr *MockManagerMockRecorder) GetMaterialByMaterialID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialByMaterialID", reflect.TypeOf((*MockManager)(nil).GetMaterialByMaterialID), ctx, req)
}

// GetMaterialStates mocks base method.
func (m *MockManager) GetMaterialStates(ctx echo.Context) (*response14.GetMaterialStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialStates", ctx)
	ret0, _ := ret[0].(*response14.GetMaterialStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialStates indicates an expected call of GetMaterialStates.
func (mr *MockManagerMockRecorder) GetMaterialStates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialStates", reflect.TypeOf((*MockManager)(nil).GetMaterialStates), ctx)
}

// GetMediaURL mocks base method.
func (m *MockManager) GetMediaURL(c echo.Context, req *request17.GetMediaUrlRequest) (*response17.GetMediaUrlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaURL", c, req)
	ret0, _ := ret[0].(*response17.GetMediaUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaURL indicates an expected call of GetMediaURL.
func (mr *MockManagerMockRecorder) GetMediaURL(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaURL", reflect.TypeOf((*MockManager)(nil).GetMediaURL), c, req)
}

// GetMeditationStatus mocks base method.
func (m *MockManager) GetMeditationStatus(c echo.Context, orgUserID, tenantID string) (*response3.GetMeditationStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeditationStatus", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetMeditationStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeditationStatus indicates an expected call of GetMeditationStatus.
func (mr *MockManagerMockRecorder) GetMeditationStatus(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeditationStatus", reflect.TypeOf((*MockManager)(nil).GetMeditationStatus), c, orgUserID, tenantID)
}

// GetMeditationStatusV2 mocks base method.
func (m *MockManager) GetMeditationStatusV2(c echo.Context, orgUserID, tenantID string) (*response3.GetMeditationStatusV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeditationStatusV2", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetMeditationStatusV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeditationStatusV2 indicates an expected call of GetMeditationStatusV2.
func (mr *MockManagerMockRecorder) GetMeditationStatusV2(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeditationStatusV2", reflect.TypeOf((*MockManager)(nil).GetMeditationStatusV2), c, orgUserID, tenantID)
}

// GetMeetingInfo mocks base method.
func (m *MockManager) GetMeetingInfo(c echo.Context, cnf *config.Config, meetingID string) (*response7.CommonMeetingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeetingInfo", c, cnf, meetingID)
	ret0, _ := ret[0].(*response7.CommonMeetingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeetingInfo indicates an expected call of GetMeetingInfo.
func (mr *MockManagerMockRecorder) GetMeetingInfo(c, cnf, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeetingInfo", reflect.TypeOf((*MockManager)(nil).GetMeetingInfo), c, cnf, meetingID)
}

// GetMeetingWithHomework mocks base method.
func (m *MockManager) GetMeetingWithHomework(c echo.Context, cnf *config.Config, meetingID string) (*response7.CommonMeetingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeetingWithHomework", c, cnf, meetingID)
	ret0, _ := ret[0].(*response7.CommonMeetingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeetingWithHomework indicates an expected call of GetMeetingWithHomework.
func (mr *MockManagerMockRecorder) GetMeetingWithHomework(c, cnf, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeetingWithHomework", reflect.TypeOf((*MockManager)(nil).GetMeetingWithHomework), c, cnf, meetingID)
}

// GetMonthlyActivities mocks base method.
func (m *MockManager) GetMonthlyActivities(c echo.Context, orgUserID, tenantID string) (*response3.GetMonthlyActivitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyActivities", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetMonthlyActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyActivities indicates an expected call of GetMonthlyActivities.
func (mr *MockManagerMockRecorder) GetMonthlyActivities(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyActivities", reflect.TypeOf((*MockManager)(nil).GetMonthlyActivities), c, orgUserID, tenantID)
}

// GetNAC mocks base method.
func (m *MockManager) GetNAC(c echo.Context, cnf *config.Config, req *request2.GetNACRequest) (*response2.GetNACResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNAC", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetNACResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNAC indicates an expected call of GetNAC.
func (mr *MockManagerMockRecorder) GetNAC(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNAC", reflect.TypeOf((*MockManager)(nil).GetNAC), c, cnf, req)
}

// GetNACByID mocks base method.
func (m *MockManager) GetNACByID(ctx echo.Context, req *requests.GetNACByIDRequest) (*responses.GetNACByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNACByID", ctx, req)
	ret0, _ := ret[0].(*responses.GetNACByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNACByID indicates an expected call of GetNACByID.
func (mr *MockManagerMockRecorder) GetNACByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNACByID", reflect.TypeOf((*MockManager)(nil).GetNACByID), ctx, req)
}

// GetNACPlaylistFile mocks base method.
func (m *MockManager) GetNACPlaylistFile(c echo.Context, cnf *config.Config, contentId string) (*response2.GetNACVideoPlaylistFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNACPlaylistFile", c, cnf, contentId)
	ret0, _ := ret[0].(*response2.GetNACVideoPlaylistFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNACPlaylistFile indicates an expected call of GetNACPlaylistFile.
func (mr *MockManagerMockRecorder) GetNACPlaylistFile(c, cnf, contentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNACPlaylistFile", reflect.TypeOf((*MockManager)(nil).GetNACPlaylistFile), c, cnf, contentId)
}

// GetNACPresignedURL mocks base method.
func (m *MockManager) GetNACPresignedURL(ctx echo.Context, req *requests.GetNACPresignedURLRequest) (*responses.PresignedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNACPresignedURL", ctx, req)
	ret0, _ := ret[0].(*responses.PresignedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNACPresignedURL indicates an expected call of GetNACPresignedURL.
func (mr *MockManagerMockRecorder) GetNACPresignedURL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNACPresignedURL", reflect.TypeOf((*MockManager)(nil).GetNACPresignedURL), ctx, req)
}

// GetNextContent mocks base method.
func (m *MockManager) GetNextContent(ctx echo.Context, req *request13.UserGetNextContentRequest) (*response13.UserGetNextContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextContent", ctx, req)
	ret0, _ := ret[0].(*response13.UserGetNextContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextContent indicates an expected call of GetNextContent.
func (mr *MockManagerMockRecorder) GetNextContent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextContent", reflect.TypeOf((*MockManager)(nil).GetNextContent), ctx, req)
}

// GetNodeAndDescendantsOfANode mocks base method.
func (m *MockManager) GetNodeAndDescendantsOfANode(c echo.Context, request *request28.GetNodeAndDescendantsRequest) (*response29.GetNodeAndDescendantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeAndDescendantsOfANode", c, request)
	ret0, _ := ret[0].(*response29.GetNodeAndDescendantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeAndDescendantsOfANode indicates an expected call of GetNodeAndDescendantsOfANode.
func (mr *MockManagerMockRecorder) GetNodeAndDescendantsOfANode(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeAndDescendantsOfANode", reflect.TypeOf((*MockManager)(nil).GetNodeAndDescendantsOfANode), c, request)
}

// GetNodePath mocks base method.
func (m *MockManager) GetNodePath(c echo.Context, request *request28.GetNodePathRequest) (*response29.GetNodePathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePath", c, request)
	ret0, _ := ret[0].(*response29.GetNodePathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePath indicates an expected call of GetNodePath.
func (mr *MockManagerMockRecorder) GetNodePath(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePath", reflect.TypeOf((*MockManager)(nil).GetNodePath), c, request)
}

// GetNotice mocks base method.
func (m *MockManager) GetNotice(c echo.Context, req *request17.GetNoticeRequest) (*response17.GetNoticeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotice", c, req)
	ret0, _ := ret[0].(*response17.GetNoticeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotice indicates an expected call of GetNotice.
func (mr *MockManagerMockRecorder) GetNotice(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotice", reflect.TypeOf((*MockManager)(nil).GetNotice), c, req)
}

// GetNotices mocks base method.
func (m *MockManager) GetNotices(c echo.Context, req *request17.GetNoticesRequest) (*response17.GetNoticesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotices", c, req)
	ret0, _ := ret[0].(*response17.GetNoticesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotices indicates an expected call of GetNotices.
func (mr *MockManagerMockRecorder) GetNotices(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotices", reflect.TypeOf((*MockManager)(nil).GetNotices), c, req)
}

// GetOfferByID mocks base method.
func (m *MockManager) GetOfferByID(c echo.Context, req *request19.GetById) (*response20.GetById, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferByID", c, req)
	ret0, _ := ret[0].(*response20.GetById)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferByID indicates an expected call of GetOfferByID.
func (mr *MockManagerMockRecorder) GetOfferByID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferByID", reflect.TypeOf((*MockManager)(nil).GetOfferByID), c, req)
}

// GetOfferFileURL mocks base method.
func (m *MockManager) GetOfferFileURL(c echo.Context, req *request19.GetOfferFileUrl) (*response20.GetOfferFileUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferFileURL", c, req)
	ret0, _ := ret[0].(*response20.GetOfferFileUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferFileURL indicates an expected call of GetOfferFileURL.
func (mr *MockManagerMockRecorder) GetOfferFileURL(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferFileURL", reflect.TypeOf((*MockManager)(nil).GetOfferFileURL), c, req)
}

// GetOfflineResponseList mocks base method.
func (m *MockManager) GetOfflineResponseList(ctx echo.Context, request *request31.GetOfflineResponseFileRequest) (*taaservice.OfflineResponseFileList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfflineResponseList", ctx, request)
	ret0, _ := ret[0].(*taaservice.OfflineResponseFileList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfflineResponseList indicates an expected call of GetOfflineResponseList.
func (mr *MockManagerMockRecorder) GetOfflineResponseList(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfflineResponseList", reflect.TypeOf((*MockManager)(nil).GetOfflineResponseList), ctx, request)
}

// GetOrder mocks base method.
func (m *MockManager) GetOrder(c echo.Context, req *request20.GetOrderRequest) (*response21.GetOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", c, req)
	ret0, _ := ret[0].(*response21.GetOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockManagerMockRecorder) GetOrder(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockManager)(nil).GetOrder), c, req)
}

// GetOrderDetails mocks base method.
func (m *MockManager) GetOrderDetails(c echo.Context, req *request20.GetOrderRequest) (*response21.GetOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", c, req)
	ret0, _ := ret[0].(*response21.GetOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockManagerMockRecorder) GetOrderDetails(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockManager)(nil).GetOrderDetails), c, req)
}

// GetOrderStatus mocks base method.
func (m *MockManager) GetOrderStatus(c echo.Context, req *request5.GetOrderStatusRequest) (*response5.GetOrderStatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", c, req)
	ret0, _ := ret[0].(*response5.GetOrderStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockManagerMockRecorder) GetOrderStatus(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockManager)(nil).GetOrderStatus), c, req)
}

// GetPageClient mocks base method.
func (m *MockManager) GetPageClient(c echo.Context) (v11.PageClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageClient", c)
	ret0, _ := ret[0].(v11.PageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageClient indicates an expected call of GetPageClient.
func (mr *MockManagerMockRecorder) GetPageClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageClient", reflect.TypeOf((*MockManager)(nil).GetPageClient), c)
}

// GetPaymentClients mocks base method.
func (m *MockManager) GetPaymentClients(c echo.Context, req *request5.GetPaymentClientsRequest) (*response5.GetPaymentClientsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentClients", c, req)
	ret0, _ := ret[0].(*response5.GetPaymentClientsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentClients indicates an expected call of GetPaymentClients.
func (mr *MockManagerMockRecorder) GetPaymentClients(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentClients", reflect.TypeOf((*MockManager)(nil).GetPaymentClients), c, req)
}

// GetPersonalMentorsForBatch mocks base method.
func (m *MockManager) GetPersonalMentorsForBatch(c echo.Context, request *request3.GetPersonalMentorsForBatchRequest) (*response3.GetPersonalMentorsForBatchReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalMentorsForBatch", c, request)
	ret0, _ := ret[0].(*response3.GetPersonalMentorsForBatchReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalMentorsForBatch indicates an expected call of GetPersonalMentorsForBatch.
func (mr *MockManagerMockRecorder) GetPersonalMentorsForBatch(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalMentorsForBatch", reflect.TypeOf((*MockManager)(nil).GetPersonalMentorsForBatch), c, request)
}

// GetPersonalisedTestRecommendedTaxonomyNodes mocks base method.
func (m *MockManager) GetPersonalisedTestRecommendedTaxonomyNodes(ctx echo.Context, req *customTestRequest.GetCustomTestRecommendedTaxonomyNodesRequest) (*customTestResponse.GetCustomTestRecommendedTaxonomyNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalisedTestRecommendedTaxonomyNodes", ctx, req)
	ret0, _ := ret[0].(*customTestResponse.GetCustomTestRecommendedTaxonomyNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalisedTestRecommendedTaxonomyNodes indicates an expected call of GetPersonalisedTestRecommendedTaxonomyNodes.
func (mr *MockManagerMockRecorder) GetPersonalisedTestRecommendedTaxonomyNodes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalisedTestRecommendedTaxonomyNodes", reflect.TypeOf((*MockManager)(nil).GetPersonalisedTestRecommendedTaxonomyNodes), ctx, req)
}

// GetPhaseDetail mocks base method.
func (m *MockManager) GetPhaseDetail(c echo.Context, arg1 *config.Config, request *request25.GetPhaseDetailRequest) (*response26.GetPhaseDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhaseDetail", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetPhaseDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhaseDetail indicates an expected call of GetPhaseDetail.
func (mr *MockManagerMockRecorder) GetPhaseDetail(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhaseDetail", reflect.TypeOf((*MockManager)(nil).GetPhaseDetail), c, arg1, request)
}

// GetPhases mocks base method.
func (m *MockManager) GetPhases(c echo.Context, arg1 *config.Config, request *request25.GetPhasesRequest) (*response26.GetPhasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhases", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetPhasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhases indicates an expected call of GetPhases.
func (mr *MockManagerMockRecorder) GetPhases(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhases", reflect.TypeOf((*MockManager)(nil).GetPhases), c, arg1, request)
}

// GetPhasesFilter mocks base method.
func (m *MockManager) GetPhasesFilter(c echo.Context, request *request25.GetPhasesRequestV2) (*response26.ResourceFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhasesFilter", c, request)
	ret0, _ := ret[0].(*response26.ResourceFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhasesFilter indicates an expected call of GetPhasesFilter.
func (mr *MockManagerMockRecorder) GetPhasesFilter(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhasesFilter", reflect.TypeOf((*MockManager)(nil).GetPhasesFilter), c, request)
}

// GetPhasesListing mocks base method.
func (m *MockManager) GetPhasesListing(c echo.Context, request *request25.GetPhasesRequestV2) (*response26.GetPhasesResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhasesListing", c, request)
	ret0, _ := ret[0].(*response26.GetPhasesResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhasesListing indicates an expected call of GetPhasesListing.
func (mr *MockManagerMockRecorder) GetPhasesListing(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhasesListing", reflect.TypeOf((*MockManager)(nil).GetPhasesListing), c, request)
}

// GetPlayList mocks base method.
func (m *MockManager) GetPlayList(c echo.Context, cnf *config.Config, req *request2.GetVideoPlaylistFileRequest) (*response2.GetVideoPlaylistFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayList", c, cnf, req)
	ret0, _ := ret[0].(*response2.GetVideoPlaylistFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayList indicates an expected call of GetPlayList.
func (mr *MockManagerMockRecorder) GetPlayList(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayList", reflect.TypeOf((*MockManager)(nil).GetPlayList), c, cnf, req)
}

// GetPlaylistFileRequest mocks base method.
func (m *MockManager) GetPlaylistFileRequest(c echo.Context, cnf *config.Config, contentID string) *request2.GetVideoPlaylistFileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistFileRequest", c, cnf, contentID)
	ret0, _ := ret[0].(*request2.GetVideoPlaylistFileRequest)
	return ret0
}

// GetPlaylistFileRequest indicates an expected call of GetPlaylistFileRequest.
func (mr *MockManagerMockRecorder) GetPlaylistFileRequest(c, cnf, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistFileRequest", reflect.TypeOf((*MockManager)(nil).GetPlaylistFileRequest), c, cnf, contentID)
}

// GetPolicy mocks base method.
func (m *MockManager) GetPolicy(c echo.Context, req *request22.GetPolicyRequest) (*response23.GetPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", c, req)
	ret0, _ := ret[0].(*response23.GetPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockManagerMockRecorder) GetPolicy(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockManager)(nil).GetPolicy), c, req)
}

// GetPolicyMetaData mocks base method.
func (m *MockManager) GetPolicyMetaData(c echo.Context, request *request22.GetPolicyMetaEntitiesRequest) (*response23.GetPolicyMetaEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyMetaData", c, request)
	ret0, _ := ret[0].(*response23.GetPolicyMetaEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyMetaData indicates an expected call of GetPolicyMetaData.
func (mr *MockManagerMockRecorder) GetPolicyMetaData(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyMetaData", reflect.TypeOf((*MockManager)(nil).GetPolicyMetaData), c, request)
}

// GetPresignedURL mocks base method.
func (m *MockManager) GetPresignedURL(c echo.Context, req *request19.PresignedUrl) (*response20.PresignedUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", c, req)
	ret0, _ := ret[0].(*response20.PresignedUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL.
func (mr *MockManagerMockRecorder) GetPresignedURL(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockManager)(nil).GetPresignedURL), c, req)
}

// GetPresignedURLForUpload mocks base method.
func (m *MockManager) GetPresignedURLForUpload(c echo.Context, req *request9.GetPreSignedURLRequest) (*response9.GetPreSignedURLForUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURLForUpload", c, req)
	ret0, _ := ret[0].(*response9.GetPreSignedURLForUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURLForUpload indicates an expected call of GetPresignedURLForUpload.
func (mr *MockManagerMockRecorder) GetPresignedURLForUpload(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURLForUpload", reflect.TypeOf((*MockManager)(nil).GetPresignedURLForUpload), c, req)
}

// GetPresignedURLToUploadPart mocks base method.
func (m *MockManager) GetPresignedURLToUploadPart(ctx echo.Context, req *requests.NACPartPresignedURLRequest) (*responses.PresignedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURLToUploadPart", ctx, req)
	ret0, _ := ret[0].(*responses.PresignedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURLToUploadPart indicates an expected call of GetPresignedURLToUploadPart.
func (mr *MockManagerMockRecorder) GetPresignedURLToUploadPart(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURLToUploadPart", reflect.TypeOf((*MockManager)(nil).GetPresignedURLToUploadPart), ctx, req)
}

// GetPresignedURLToWatchMaterial mocks base method.
func (m *MockManager) GetPresignedURLToWatchMaterial(ctx echo.Context, req *request14.GetOriginalMaterialFileRequest) (*response14.GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURLToWatchMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURLToWatchMaterial indicates an expected call of GetPresignedURLToWatchMaterial.
func (mr *MockManagerMockRecorder) GetPresignedURLToWatchMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURLToWatchMaterial", reflect.TypeOf((*MockManager)(nil).GetPresignedURLToWatchMaterial), ctx, req)
}

// GetProfiles mocks base method.
func (m *MockManager) GetProfiles(c echo.Context, cnf *config.Config, req *request4.GetProfilesRequest) (*response4.GetProfilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", c, cnf, req)
	ret0, _ := ret[0].(*response4.GetProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockManagerMockRecorder) GetProfiles(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockManager)(nil).GetProfiles), c, cnf, req)
}

// GetQReelConceptCards mocks base method.
func (m *MockManager) GetQReelConceptCards(ctx echo.Context, request *request13.GetConceptCardsRequest) (*response13.GetConceptCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQReelConceptCards", ctx, request)
	ret0, _ := ret[0].(*response13.GetConceptCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQReelConceptCards indicates an expected call of GetQReelConceptCards.
func (mr *MockManagerMockRecorder) GetQReelConceptCards(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQReelConceptCards", reflect.TypeOf((*MockManager)(nil).GetQReelConceptCards), ctx, request)
}

// GetQuestionPaper mocks base method.
func (m *MockManager) GetQuestionPaper(ctx echo.Context, request *request29.GetQuestionPaperRequest) (*response30.GetQuestionPaperReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionPaper", ctx, request)
	ret0, _ := ret[0].(*response30.GetQuestionPaperReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionPaper indicates an expected call of GetQuestionPaper.
func (mr *MockManagerMockRecorder) GetQuestionPaper(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionPaper", reflect.TypeOf((*MockManager)(nil).GetQuestionPaper), ctx, request)
}

// GetQuestionPaperByPaperCode mocks base method.
func (m *MockManager) GetQuestionPaperByPaperCode(ctx echo.Context, paperCode string) (*v17.QuestionSetInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionPaperByPaperCode", ctx, paperCode)
	ret0, _ := ret[0].(*v17.QuestionSetInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionPaperByPaperCode indicates an expected call of GetQuestionPaperByPaperCode.
func (mr *MockManagerMockRecorder) GetQuestionPaperByPaperCode(ctx, paperCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionPaperByPaperCode", reflect.TypeOf((*MockManager)(nil).GetQuestionPaperByPaperCode), ctx, paperCode)
}

// GetQuestionPaperInstructions mocks base method.
func (m *MockManager) GetQuestionPaperInstructions(ctx echo.Context, request *request29.GetQuestionPaperInstructionsRequest) (*response30.GetQuestionPaperInstructionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionPaperInstructions", ctx, request)
	ret0, _ := ret[0].(*response30.GetQuestionPaperInstructionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionPaperInstructions indicates an expected call of GetQuestionPaperInstructions.
func (mr *MockManagerMockRecorder) GetQuestionPaperInstructions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionPaperInstructions", reflect.TypeOf((*MockManager)(nil).GetQuestionPaperInstructions), ctx, request)
}

// GetQuestionPaperPreview mocks base method.
func (m *MockManager) GetQuestionPaperPreview(ctx echo.Context, request *request31.QuestionPaperAdminPreviewRequest) (*reply0.QuestionPaperAdminPreviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionPaperPreview", ctx, request)
	ret0, _ := ret[0].(*reply0.QuestionPaperAdminPreviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionPaperPreview indicates an expected call of GetQuestionPaperPreview.
func (mr *MockManagerMockRecorder) GetQuestionPaperPreview(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionPaperPreview", reflect.TypeOf((*MockManager)(nil).GetQuestionPaperPreview), ctx, request)
}

// GetQuestionSetInformation mocks base method.
func (m *MockManager) GetQuestionSetInformation(ctx echo.Context, paperCode string) (*response24.GetQuestionSetInformationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionSetInformation", ctx, paperCode)
	ret0, _ := ret[0].(*response24.GetQuestionSetInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionSetInformation indicates an expected call of GetQuestionSetInformation.
func (mr *MockManagerMockRecorder) GetQuestionSetInformation(ctx, paperCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionSetInformation", reflect.TypeOf((*MockManager)(nil).GetQuestionSetInformation), ctx, paperCode)
}

// GetQuestionTestInsightByTest mocks base method.
func (m *MockManager) GetQuestionTestInsightByTest(ctx echo.Context, request *request30.GetQuestionTestInsightByTestRequest) (*reply.GetQuestionTestInsightByTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionTestInsightByTest", ctx, request)
	ret0, _ := ret[0].(*reply.GetQuestionTestInsightByTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionTestInsightByTest indicates an expected call of GetQuestionTestInsightByTest.
func (mr *MockManagerMockRecorder) GetQuestionTestInsightByTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionTestInsightByTest", reflect.TypeOf((*MockManager)(nil).GetQuestionTestInsightByTest), ctx, request)
}

// GetQuestions mocks base method.
func (m *MockManager) GetQuestions(ctx echo.Context, request *request13.GetQuestionsRequest) (*response13.GetQuestionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", ctx, request)
	ret0, _ := ret[0].(*response13.GetQuestionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockManagerMockRecorder) GetQuestions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockManager)(nil).GetQuestions), ctx, request)
}

// GetQuestionsByIDs mocks base method.
func (m *MockManager) GetQuestionsByIDs(ctx echo.Context, req *v18.GetQuestionsRequest) (*v19.GetQuestionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByIDs", ctx, req)
	ret0, _ := ret[0].(*v19.GetQuestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByIDs indicates an expected call of GetQuestionsByIDs.
func (mr *MockManagerMockRecorder) GetQuestionsByIDs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByIDs", reflect.TypeOf((*MockManager)(nil).GetQuestionsByIDs), ctx, req)
}

// GetQuestionsByOldQuestionID mocks base method.
func (m *MockManager) GetQuestionsByOldQuestionID(ctx echo.Context, req *v18.GetQuestionsByOldQuestionIdRequest) (*v19.GetQuestionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByOldQuestionID", ctx, req)
	ret0, _ := ret[0].(*v19.GetQuestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByOldQuestionID indicates an expected call of GetQuestionsByOldQuestionID.
func (mr *MockManagerMockRecorder) GetQuestionsByOldQuestionID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByOldQuestionID", reflect.TypeOf((*MockManager)(nil).GetQuestionsByOldQuestionID), ctx, req)
}

// GetReattemptCumulativeStudentTestInsights mocks base method.
func (m *MockManager) GetReattemptCumulativeStudentTestInsights(ctx echo.Context, request *request32.GetStudentTestInsightsRequest) (*reply1.StudentTestInsightsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReattemptCumulativeStudentTestInsights", ctx, request)
	ret0, _ := ret[0].(*reply1.StudentTestInsightsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReattemptCumulativeStudentTestInsights indicates an expected call of GetReattemptCumulativeStudentTestInsights.
func (mr *MockManagerMockRecorder) GetReattemptCumulativeStudentTestInsights(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReattemptCumulativeStudentTestInsights", reflect.TypeOf((*MockManager)(nil).GetReattemptCumulativeStudentTestInsights), ctx, request)
}

// GetRelevantHomeworkQuestionCollections mocks base method.
func (m *MockManager) GetRelevantHomeworkQuestionCollections(ctx echo.Context, req *request24.GetRelevantHomeworkQuestionCollectionsRequest) (*response25.GetRelevantHomeworkQuestionCollectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelevantHomeworkQuestionCollections", ctx, req)
	ret0, _ := ret[0].(*response25.GetRelevantHomeworkQuestionCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelevantHomeworkQuestionCollections indicates an expected call of GetRelevantHomeworkQuestionCollections.
func (mr *MockManagerMockRecorder) GetRelevantHomeworkQuestionCollections(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelevantHomeworkQuestionCollections", reflect.TypeOf((*MockManager)(nil).GetRelevantHomeworkQuestionCollections), ctx, req)
}

// GetRepliesOnDoubt mocks base method.
func (m *MockManager) GetRepliesOnDoubt(c echo.Context, req *request9.GetRepliesOnDoubtRequest) (*response9.GetRepliesOnDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesOnDoubt", c, req)
	ret0, _ := ret[0].(*response9.GetRepliesOnDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesOnDoubt indicates an expected call of GetRepliesOnDoubt.
func (mr *MockManagerMockRecorder) GetRepliesOnDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesOnDoubt", reflect.TypeOf((*MockManager)(nil).GetRepliesOnDoubt), c, req)
}

// GetRepliesOnDoubtPaginated mocks base method.
func (m *MockManager) GetRepliesOnDoubtPaginated(c echo.Context, req *request9.GetAllRepliesPaginatedRequest) (*response9.GetAllRepliesPaginatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesOnDoubtPaginated", c, req)
	ret0, _ := ret[0].(*response9.GetAllRepliesPaginatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesOnDoubtPaginated indicates an expected call of GetRepliesOnDoubtPaginated.
func (mr *MockManagerMockRecorder) GetRepliesOnDoubtPaginated(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesOnDoubtPaginated", reflect.TypeOf((*MockManager)(nil).GetRepliesOnDoubtPaginated), c, req)
}

// GetResolverFilters mocks base method.
func (m *MockManager) GetResolverFilters(c echo.Context, req *request9.GetFilters) (*response9.GetFilters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverFilters", c, req)
	ret0, _ := ret[0].(*response9.GetFilters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverFilters indicates an expected call of GetResolverFilters.
func (mr *MockManagerMockRecorder) GetResolverFilters(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverFilters", reflect.TypeOf((*MockManager)(nil).GetResolverFilters), c, req)
}

// GetResourceMetaEntities mocks base method.
func (m *MockManager) GetResourceMetaEntities(c echo.Context, arg1 *config.Config, request *request25.GetResourceMetaEntitiesRequest) (*response26.GetResourceMetaEntitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceMetaEntities", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetResourceMetaEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceMetaEntities indicates an expected call of GetResourceMetaEntities.
func (mr *MockManagerMockRecorder) GetResourceMetaEntities(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceMetaEntities", reflect.TypeOf((*MockManager)(nil).GetResourceMetaEntities), c, arg1, request)
}

// GetRoleClient mocks base method.
func (m *MockManager) GetRoleClient(c echo.Context) (v10.RoleClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleClient", c)
	ret0, _ := ret[0].(v10.RoleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleClient indicates an expected call of GetRoleClient.
func (mr *MockManagerMockRecorder) GetRoleClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleClient", reflect.TypeOf((*MockManager)(nil).GetRoleClient), c)
}

// GetRoleNamesByUserIDs mocks base method.
func (m *MockManager) GetRoleNamesByUserIDs(c echo.Context, cnf *config.Config, userIDs []string) (*response0.GetRoleNamesByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleNamesByUserIDs", c, cnf, userIDs)
	ret0, _ := ret[0].(*response0.GetRoleNamesByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleNamesByUserIDs indicates an expected call of GetRoleNamesByUserIDs.
func (mr *MockManagerMockRecorder) GetRoleNamesByUserIDs(c, cnf, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleNamesByUserIDs", reflect.TypeOf((*MockManager)(nil).GetRoleNamesByUserIDs), c, cnf, userIDs)
}

// GetS3FileURL mocks base method.
func (m *MockManager) GetS3FileURL(c echo.Context, request *request26.GetS3FileURLRequest) (*response27.GetS3FileURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3FileURL", c, request)
	ret0, _ := ret[0].(*response27.GetS3FileURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3FileURL indicates an expected call of GetS3FileURL.
func (mr *MockManagerMockRecorder) GetS3FileURL(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3FileURL", reflect.TypeOf((*MockManager)(nil).GetS3FileURL), c, request)
}

// GetS3UploadURL mocks base method.
func (m *MockManager) GetS3UploadURL(c echo.Context, request *request26.GetS3UploadURLRequest) (*response27.GetS3UploadURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3UploadURL", c, request)
	ret0, _ := ret[0].(*response27.GetS3UploadURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3UploadURL indicates an expected call of GetS3UploadURL.
func (mr *MockManagerMockRecorder) GetS3UploadURL(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3UploadURL", reflect.TypeOf((*MockManager)(nil).GetS3UploadURL), c, request)
}

// GetSeekerFilters mocks base method.
func (m *MockManager) GetSeekerFilters(c echo.Context, req *request9.GetFilters) (*response9.GetFilters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerFilters", c, req)
	ret0, _ := ret[0].(*response9.GetFilters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerFilters indicates an expected call of GetSeekerFilters.
func (mr *MockManagerMockRecorder) GetSeekerFilters(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerFilters", reflect.TypeOf((*MockManager)(nil).GetSeekerFilters), c, req)
}

// GetSolution mocks base method.
func (m *MockManager) GetSolution(ctx echo.Context, req *request12.GetSolutionRequest) (*response12.GetSolutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolution", ctx, req)
	ret0, _ := ret[0].(*response12.GetSolutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolution indicates an expected call of GetSolution.
func (mr *MockManagerMockRecorder) GetSolution(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolution", reflect.TypeOf((*MockManager)(nil).GetSolution), ctx, req)
}

// GetStaticClasses mocks base method.
func (m *MockManager) GetStaticClasses(c echo.Context, request *request28.GetStaticClassesRequest) (*response29.GetStaticClassesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticClasses", c, request)
	ret0, _ := ret[0].(*response29.GetStaticClassesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticClasses indicates an expected call of GetStaticClasses.
func (mr *MockManagerMockRecorder) GetStaticClasses(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticClasses", reflect.TypeOf((*MockManager)(nil).GetStaticClasses), c, request)
}

// GetStatusAggregateDetails mocks base method.
func (m *MockManager) GetStatusAggregateDetails(ctx echo.Context, req *request12.StatusAggregateRequest) (*response12.StatusAggregateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusAggregateDetails", ctx, req)
	ret0, _ := ret[0].(*response12.StatusAggregateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusAggregateDetails indicates an expected call of GetStatusAggregateDetails.
func (mr *MockManagerMockRecorder) GetStatusAggregateDetails(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusAggregateDetails", reflect.TypeOf((*MockManager)(nil).GetStatusAggregateDetails), ctx, req)
}

// GetStreamingToken mocks base method.
func (m *MockManager) GetStreamingToken(c echo.Context, cnf *config.Config, channelID, mode string) (*response7.RefreshStreamingTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingToken", c, cnf, channelID, mode)
	ret0, _ := ret[0].(*response7.RefreshStreamingTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingToken indicates an expected call of GetStreamingToken.
func (mr *MockManagerMockRecorder) GetStreamingToken(c, cnf, channelID, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingToken", reflect.TypeOf((*MockManager)(nil).GetStreamingToken), c, cnf, channelID, mode)
}

// GetStudentBatchChangeHistory mocks base method.
func (m *MockManager) GetStudentBatchChangeHistory(c echo.Context, arg1 *config.Config, request *request25.GetStudentBatchHistoryRequest) (*response26.GetStudentBatchHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentBatchChangeHistory", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetStudentBatchHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentBatchChangeHistory indicates an expected call of GetStudentBatchChangeHistory.
func (mr *MockManagerMockRecorder) GetStudentBatchChangeHistory(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentBatchChangeHistory", reflect.TypeOf((*MockManager)(nil).GetStudentBatchChangeHistory), c, arg1, request)
}

// GetStudentBatchDetails mocks base method.
func (m *MockManager) GetStudentBatchDetails(c echo.Context, arg1 *config.Config, request *request25.GetStudentBatchDetailsRequest) (*response26.GetStudentBatchDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentBatchDetails", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetStudentBatchDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentBatchDetails indicates an expected call of GetStudentBatchDetails.
func (mr *MockManagerMockRecorder) GetStudentBatchDetails(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentBatchDetails", reflect.TypeOf((*MockManager)(nil).GetStudentBatchDetails), c, arg1, request)
}

// GetStudentBatchListing mocks base method.
func (m *MockManager) GetStudentBatchListing(c echo.Context, arg1 *config.Config, request *request25.GetBatchesRequestV2) (*response26.GetStudentBatchDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentBatchListing", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetStudentBatchDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentBatchListing indicates an expected call of GetStudentBatchListing.
func (mr *MockManagerMockRecorder) GetStudentBatchListing(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentBatchListing", reflect.TypeOf((*MockManager)(nil).GetStudentBatchListing), c, arg1, request)
}

// GetStudentCourseDetails mocks base method.
func (m *MockManager) GetStudentCourseDetails(c echo.Context, request *request25.StudentCourseDetailsRequest) (*response26.StudentCourseDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentCourseDetails", c, request)
	ret0, _ := ret[0].(*response26.StudentCourseDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentCourseDetails indicates an expected call of GetStudentCourseDetails.
func (mr *MockManagerMockRecorder) GetStudentCourseDetails(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentCourseDetails", reflect.TypeOf((*MockManager)(nil).GetStudentCourseDetails), c, request)
}

// GetStudentDetailsForBatch mocks base method.
func (m *MockManager) GetStudentDetailsForBatch(c echo.Context, arg1 *config.Config, request *request25.GetStudentsForBatchRequest) (*response26.GetStudentsForBatchInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentDetailsForBatch", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetStudentsForBatchInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentDetailsForBatch indicates an expected call of GetStudentDetailsForBatch.
func (mr *MockManagerMockRecorder) GetStudentDetailsForBatch(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentDetailsForBatch", reflect.TypeOf((*MockManager)(nil).GetStudentDetailsForBatch), c, arg1, request)
}

// GetStudentOverallPerformanceData mocks base method.
func (m *MockManager) GetStudentOverallPerformanceData(c echo.Context, request *request3.GetStudentOverallPerformanceDataRequest) (*response3.GetStudentOverallPerformanceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentOverallPerformanceData", c, request)
	ret0, _ := ret[0].(*response3.GetStudentOverallPerformanceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentOverallPerformanceData indicates an expected call of GetStudentOverallPerformanceData.
func (mr *MockManagerMockRecorder) GetStudentOverallPerformanceData(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentOverallPerformanceData", reflect.TypeOf((*MockManager)(nil).GetStudentOverallPerformanceData), c, request)
}

// GetStudentPastTests mocks base method.
func (m *MockManager) GetStudentPastTests(ctx echo.Context, request *request32.GetStudentPastTestsRequest) (*reply1.GetStudentPastTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentPastTests", ctx, request)
	ret0, _ := ret[0].(*reply1.GetStudentPastTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentPastTests indicates an expected call of GetStudentPastTests.
func (mr *MockManagerMockRecorder) GetStudentPastTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentPastTests", reflect.TypeOf((*MockManager)(nil).GetStudentPastTests), ctx, request)
}

// GetStudentPersonalMentorID mocks base method.
func (m *MockManager) GetStudentPersonalMentorID(c echo.Context, request *request3.GetStudentPersonalMentorIdRequest) (*response3.GetStudentPersonalMentorIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentPersonalMentorID", c, request)
	ret0, _ := ret[0].(*response3.GetStudentPersonalMentorIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentPersonalMentorID indicates an expected call of GetStudentPersonalMentorID.
func (mr *MockManagerMockRecorder) GetStudentPersonalMentorID(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentPersonalMentorID", reflect.TypeOf((*MockManager)(nil).GetStudentPersonalMentorID), c, request)
}

// GetStudentSubjectWisePerformanceData mocks base method.
func (m *MockManager) GetStudentSubjectWisePerformanceData(c echo.Context, request *request3.GetStudentSubjectWisePerformanceDataRequest) (*response3.GetStudentSubjectWisePerformanceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentSubjectWisePerformanceData", c, request)
	ret0, _ := ret[0].(*response3.GetStudentSubjectWisePerformanceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentSubjectWisePerformanceData indicates an expected call of GetStudentSubjectWisePerformanceData.
func (mr *MockManagerMockRecorder) GetStudentSubjectWisePerformanceData(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentSubjectWisePerformanceData", reflect.TypeOf((*MockManager)(nil).GetStudentSubjectWisePerformanceData), c, request)
}

// GetStudentTestInsights mocks base method.
func (m *MockManager) GetStudentTestInsights(ctx echo.Context, request *request32.GetStudentTestInsightsRequest) (*reply1.StudentTestInsightsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestInsights", ctx, request)
	ret0, _ := ret[0].(*reply1.StudentTestInsightsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestInsights indicates an expected call of GetStudentTestInsights.
func (mr *MockManagerMockRecorder) GetStudentTestInsights(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestInsights", reflect.TypeOf((*MockManager)(nil).GetStudentTestInsights), ctx, request)
}

// GetStudentTestInsightsByFilters mocks base method.
func (m *MockManager) GetStudentTestInsightsByFilters(ctx echo.Context, request *request30.FetchStudentTestInsightsByFiltersRequest) (*reply.FetchStudentTestInsightsByFiltersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestInsightsByFilters", ctx, request)
	ret0, _ := ret[0].(*reply.FetchStudentTestInsightsByFiltersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestInsightsByFilters indicates an expected call of GetStudentTestInsightsByFilters.
func (mr *MockManagerMockRecorder) GetStudentTestInsightsByFilters(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestInsightsByFilters", reflect.TypeOf((*MockManager)(nil).GetStudentTestInsightsByFilters), ctx, request)
}

// GetStudentTestOverview mocks base method.
func (m *MockManager) GetStudentTestOverview(ctx echo.Context, request *request32.GetStudentTestOverviewRequest) (*reply1.StudentTestOverviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestOverview", ctx, request)
	ret0, _ := ret[0].(*reply1.StudentTestOverviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestOverview indicates an expected call of GetStudentTestOverview.
func (mr *MockManagerMockRecorder) GetStudentTestOverview(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestOverview", reflect.TypeOf((*MockManager)(nil).GetStudentTestOverview), ctx, request)
}

// GetStudentTestOverviewByFilter mocks base method.
func (m *MockManager) GetStudentTestOverviewByFilter(ctx echo.Context, request *request30.GetStudentTestOverviewByFilterRequest) (*reply.GetStudentTestOverviewByFilterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestOverviewByFilter", ctx, request)
	ret0, _ := ret[0].(*reply.GetStudentTestOverviewByFilterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestOverviewByFilter indicates an expected call of GetStudentTestOverviewByFilter.
func (mr *MockManagerMockRecorder) GetStudentTestOverviewByFilter(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestOverviewByFilter", reflect.TypeOf((*MockManager)(nil).GetStudentTestOverviewByFilter), ctx, request)
}

// GetStudentTestResult mocks base method.
func (m *MockManager) GetStudentTestResult(ctx echo.Context, request *request32.GetStudentTestResultRequest) (*reply1.GetStudentTestResultReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestResult", ctx, request)
	ret0, _ := ret[0].(*reply1.GetStudentTestResultReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestResult indicates an expected call of GetStudentTestResult.
func (mr *MockManagerMockRecorder) GetStudentTestResult(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestResult", reflect.TypeOf((*MockManager)(nil).GetStudentTestResult), ctx, request)
}

// GetStudentTestSolution mocks base method.
func (m *MockManager) GetStudentTestSolution(ctx echo.Context, request *request32.GetStudentTestSolutionRequest) (*reply1.GetStudentTestSolutionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestSolution", ctx, request)
	ret0, _ := ret[0].(*reply1.GetStudentTestSolutionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestSolution indicates an expected call of GetStudentTestSolution.
func (mr *MockManagerMockRecorder) GetStudentTestSolution(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestSolution", reflect.TypeOf((*MockManager)(nil).GetStudentTestSolution), ctx, request)
}

// GetStudentTestStatus mocks base method.
func (m *MockManager) GetStudentTestStatus(ctx echo.Context, request *request32.FilterTestsRequest) (*reply1.FilterTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTestStatus", ctx, request)
	ret0, _ := ret[0].(*reply1.FilterTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTestStatus indicates an expected call of GetStudentTestStatus.
func (mr *MockManagerMockRecorder) GetStudentTestStatus(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTestStatus", reflect.TypeOf((*MockManager)(nil).GetStudentTestStatus), ctx, request)
}

// GetStudentsForBatchIn mocks base method.
func (m *MockManager) GetStudentsForBatchIn(c echo.Context, arg1 *config.Config, request *request25.GetStudentsForBatchInRequest) (*response26.GetStudentsForBatchInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsForBatchIn", c, arg1, request)
	ret0, _ := ret[0].(*response26.GetStudentsForBatchInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsForBatchIn indicates an expected call of GetStudentsForBatchIn.
func (mr *MockManagerMockRecorder) GetStudentsForBatchIn(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsForBatchIn", reflect.TypeOf((*MockManager)(nil).GetStudentsForBatchIn), c, arg1, request)
}

// GetSubjectTopics mocks base method.
func (m *MockManager) GetSubjectTopics(ctx echo.Context, req *request12.GetSubjectTopicsRequest) (*response12.GetSubjectTopicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectTopics", ctx, req)
	ret0, _ := ret[0].(*response12.GetSubjectTopicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectTopics indicates an expected call of GetSubjectTopics.
func (mr *MockManagerMockRecorder) GetSubjectTopics(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectTopics", reflect.TypeOf((*MockManager)(nil).GetSubjectTopics), ctx, req)
}

// GetSummary mocks base method.
func (m *MockManager) GetSummary(ctx echo.Context, req *request12.GetSummaryRequest) (*response12.GetSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", ctx, req)
	ret0, _ := ret[0].(*response12.GetSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockManagerMockRecorder) GetSummary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockManager)(nil).GetSummary), ctx, req)
}

// GetSurveyDataByID mocks base method.
func (m *MockManager) GetSurveyDataByID(c echo.Context, orgUserID, surveyID string) (*response28.GetSurveyDataByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveyDataByID", c, orgUserID, surveyID)
	ret0, _ := ret[0].(*response28.GetSurveyDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveyDataByID indicates an expected call of GetSurveyDataByID.
func (mr *MockManagerMockRecorder) GetSurveyDataByID(c, orgUserID, surveyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveyDataByID", reflect.TypeOf((*MockManager)(nil).GetSurveyDataByID), c, orgUserID, surveyID)
}

// GetTabClient mocks base method.
func (m *MockManager) GetTabClient(c echo.Context) v11.TabClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTabClient", c)
	ret0, _ := ret[0].(v11.TabClient)
	return ret0
}

// GetTabClient indicates an expected call of GetTabClient.
func (mr *MockManagerMockRecorder) GetTabClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTabClient", reflect.TypeOf((*MockManager)(nil).GetTabClient), c)
}

// GetTaxonomyByID mocks base method.
func (m *MockManager) GetTaxonomyByID(c echo.Context, cnf *config.Config, taxonomyID string) (*response29.GetTaxonomyByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyByID", c, cnf, taxonomyID)
	ret0, _ := ret[0].(*response29.GetTaxonomyByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyByID indicates an expected call of GetTaxonomyByID.
func (mr *MockManagerMockRecorder) GetTaxonomyByID(c, cnf, taxonomyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyByID", reflect.TypeOf((*MockManager)(nil).GetTaxonomyByID), c, cnf, taxonomyID)
}

// GetTaxonomyNodesByID mocks base method.
func (m *MockManager) GetTaxonomyNodesByID(c echo.Context, cnf *config.Config, taxonomyID string, nodeIds []string) (*response29.GetTaxonomyNodesByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxonomyNodesByID", c, cnf, taxonomyID, nodeIds)
	ret0, _ := ret[0].(*response29.GetTaxonomyNodesByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxonomyNodesByID indicates an expected call of GetTaxonomyNodesByID.
func (mr *MockManagerMockRecorder) GetTaxonomyNodesByID(c, cnf, taxonomyID, nodeIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxonomyNodesByID", reflect.TypeOf((*MockManager)(nil).GetTaxonomyNodesByID), c, cnf, taxonomyID, nodeIds)
}

// GetTest mocks base method.
func (m *MockManager) GetTest(ctx echo.Context, request *request31.GetTestRequest) (*reply0.GetTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTest", ctx, request)
	ret0, _ := ret[0].(*reply0.GetTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTest indicates an expected call of GetTest.
func (mr *MockManagerMockRecorder) GetTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTest", reflect.TypeOf((*MockManager)(nil).GetTest), ctx, request)
}

// GetTestInsights mocks base method.
func (m *MockManager) GetTestInsights(ctx echo.Context, request *request30.GetTestInsightRequest) (*reply.GetTestInsightReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestInsights", ctx, request)
	ret0, _ := ret[0].(*reply.GetTestInsightReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestInsights indicates an expected call of GetTestInsights.
func (mr *MockManagerMockRecorder) GetTestInsights(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestInsights", reflect.TypeOf((*MockManager)(nil).GetTestInsights), ctx, request)
}

// GetTestMinimalInfo mocks base method.
func (m *MockManager) GetTestMinimalInfo(ctx echo.Context, request *request31.GetTestInfoMinimalRequest) (*reply0.GetTestInfoMinimalReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestMinimalInfo", ctx, request)
	ret0, _ := ret[0].(*reply0.GetTestInfoMinimalReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestMinimalInfo indicates an expected call of GetTestMinimalInfo.
func (mr *MockManagerMockRecorder) GetTestMinimalInfo(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestMinimalInfo", reflect.TypeOf((*MockManager)(nil).GetTestMinimalInfo), ctx, request)
}

// GetTestQuestionSetInfo mocks base method.
func (m *MockManager) GetTestQuestionSetInfo(ctx echo.Context, request *request32.GetTestQuestionSetRequest) (*reply1.GetTestQuestionSetReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestQuestionSetInfo", ctx, request)
	ret0, _ := ret[0].(*reply1.GetTestQuestionSetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestQuestionSetInfo indicates an expected call of GetTestQuestionSetInfo.
func (mr *MockManagerMockRecorder) GetTestQuestionSetInfo(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestQuestionSetInfo", reflect.TypeOf((*MockManager)(nil).GetTestQuestionSetInfo), ctx, request)
}

// GetTestSolutions mocks base method.
func (m *MockManager) GetTestSolutions(ctx echo.Context, request *request32.GetTestSolutionsRequest) (*reply1.GetTestSolutionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSolutions", ctx, request)
	ret0, _ := ret[0].(*reply1.GetTestSolutionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSolutions indicates an expected call of GetTestSolutions.
func (mr *MockManagerMockRecorder) GetTestSolutions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSolutions", reflect.TypeOf((*MockManager)(nil).GetTestSolutions), ctx, request)
}

// GetTestSubmissionStatistics mocks base method.
func (m *MockManager) GetTestSubmissionStatistics(ctx echo.Context, request *request30.GetTestSubmissionStatisticsRequest) (*reply.GetTestSubmissionStatisticsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSubmissionStatistics", ctx, request)
	ret0, _ := ret[0].(*reply.GetTestSubmissionStatisticsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSubmissionStatistics indicates an expected call of GetTestSubmissionStatistics.
func (mr *MockManagerMockRecorder) GetTestSubmissionStatistics(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSubmissionStatistics", reflect.TypeOf((*MockManager)(nil).GetTestSubmissionStatistics), ctx, request)
}

// GetTestimonials mocks base method.
func (m *MockManager) GetTestimonials(c echo.Context, orgUserID, tenantID string) (*response3.GetTestimonialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestimonials", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetTestimonialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestimonials indicates an expected call of GetTestimonials.
func (mr *MockManagerMockRecorder) GetTestimonials(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestimonials", reflect.TypeOf((*MockManager)(nil).GetTestimonials), c, orgUserID, tenantID)
}

// GetThumbnailByID mocks base method.
func (m *MockManager) GetThumbnailByID(ctx echo.Context, req *request14.GetThumbnailByIDRequest) (*response14.GetThumbnailByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThumbnailByID", ctx, req)
	ret0, _ := ret[0].(*response14.GetThumbnailByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThumbnailByID indicates an expected call of GetThumbnailByID.
func (mr *MockManagerMockRecorder) GetThumbnailByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThumbnailByID", reflect.TypeOf((*MockManager)(nil).GetThumbnailByID), ctx, req)
}

// GetThumbnailURLByTaxonomy mocks base method.
func (m *MockManager) GetThumbnailURLByTaxonomy(ctx echo.Context, req *request14.ThumbnailFilterRequest) (*lmm.ThumbnailURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThumbnailURLByTaxonomy", ctx, req)
	ret0, _ := ret[0].(*lmm.ThumbnailURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThumbnailURLByTaxonomy indicates an expected call of GetThumbnailURLByTaxonomy.
func (mr *MockManagerMockRecorder) GetThumbnailURLByTaxonomy(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThumbnailURLByTaxonomy", reflect.TypeOf((*MockManager)(nil).GetThumbnailURLByTaxonomy), ctx, req)
}

// GetTodaysActivity mocks base method.
func (m *MockManager) GetTodaysActivity(c echo.Context, orgUserID, tenantID string) (*response3.GetTodaysActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodaysActivity", c, orgUserID, tenantID)
	ret0, _ := ret[0].(*response3.GetTodaysActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodaysActivity indicates an expected call of GetTodaysActivity.
func (mr *MockManagerMockRecorder) GetTodaysActivity(c, orgUserID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodaysActivity", reflect.TypeOf((*MockManager)(nil).GetTodaysActivity), c, orgUserID, tenantID)
}

// GetTypeSubTypes mocks base method.
func (m *MockManager) GetTypeSubTypes(ctx echo.Context) (*response14.GetTypeSubTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeSubTypes", ctx)
	ret0, _ := ret[0].(*response14.GetTypeSubTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeSubTypes indicates an expected call of GetTypeSubTypes.
func (mr *MockManagerMockRecorder) GetTypeSubTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeSubTypes", reflect.TypeOf((*MockManager)(nil).GetTypeSubTypes), ctx)
}

// GetURLClient mocks base method.
func (m *MockManager) GetURLClient(c echo.Context) v11.URLClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLClient", c)
	ret0, _ := ret[0].(v11.URLClient)
	return ret0
}

// GetURLClient indicates an expected call of GetURLClient.
func (mr *MockManagerMockRecorder) GetURLClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLClient", reflect.TypeOf((*MockManager)(nil).GetURLClient), c)
}

// GetUnreadCount mocks base method.
func (m *MockManager) GetUnreadCount(c echo.Context, request *emptypb.Empty) (*response19.GetUnreadCountRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCount", c, request)
	ret0, _ := ret[0].(*response19.GetUnreadCountRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCount indicates an expected call of GetUnreadCount.
func (mr *MockManagerMockRecorder) GetUnreadCount(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCount", reflect.TypeOf((*MockManager)(nil).GetUnreadCount), c, request)
}

// GetUploadSyllabusPreSignedURL mocks base method.
func (m *MockManager) GetUploadSyllabusPreSignedURL(ctx echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadSyllabusPreSignedURL", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadSyllabusPreSignedURL indicates an expected call of GetUploadSyllabusPreSignedURL.
func (mr *MockManagerMockRecorder) GetUploadSyllabusPreSignedURL(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadSyllabusPreSignedURL", reflect.TypeOf((*MockManager)(nil).GetUploadSyllabusPreSignedURL), ctx)
}

// GetUploadURL mocks base method.
func (m *MockManager) GetUploadURL(c echo.Context, cnf *config.Config, req *request10.UploadRequest) (*response10.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadURL", c, cnf, req)
	ret0, _ := ret[0].(*response10.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadURL indicates an expected call of GetUploadURL.
func (mr *MockManagerMockRecorder) GetUploadURL(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadURL", reflect.TypeOf((*MockManager)(nil).GetUploadURL), c, cnf, req)
}

// GetUser mocks base method.
func (m *MockManager) GetUser(c echo.Context, cnf *config.Config, grpcHandler grpc.Manager) (*response34.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", c, cnf, grpcHandler)
	ret0, _ := ret[0].(*response34.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockManagerMockRecorder) GetUser(c, cnf, grpcHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManager)(nil).GetUser), c, cnf, grpcHandler)
}

// GetUserActivities mocks base method.
func (m *MockManager) GetUserActivities(ctx echo.Context, req *request35.GetUserActivitiesRequest) (*response33.GetUserActivitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActivities", ctx, req)
	ret0, _ := ret[0].(*response33.GetUserActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActivities indicates an expected call of GetUserActivities.
func (mr *MockManagerMockRecorder) GetUserActivities(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActivities", reflect.TypeOf((*MockManager)(nil).GetUserActivities), ctx, req)
}

// GetUserAgenda mocks base method.
func (m *MockManager) GetUserAgenda(c echo.Context, cnf *config.Config, agendaRequest *request7.GetUserAgendaRequest) (*response7.GetUserAgendaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgenda", c, cnf, agendaRequest)
	ret0, _ := ret[0].(*response7.GetUserAgendaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAgenda indicates an expected call of GetUserAgenda.
func (mr *MockManagerMockRecorder) GetUserAgenda(c, cnf, agendaRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgenda", reflect.TypeOf((*MockManager)(nil).GetUserAgenda), c, cnf, agendaRequest)
}

// GetUserAttribute mocks base method.
func (m *MockManager) GetUserAttribute(c echo.Context, req *request8.GetUserAttributeRequest) (*response8.GetUserAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAttribute", c, req)
	ret0, _ := ret[0].(*response8.GetUserAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttribute indicates an expected call of GetUserAttribute.
func (mr *MockManagerMockRecorder) GetUserAttribute(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttribute", reflect.TypeOf((*MockManager)(nil).GetUserAttribute), c, req)
}

// GetUserAttributes mocks base method.
func (m *MockManager) GetUserAttributes(c echo.Context, cnf *config.Config, resource types.ResourceTypes) (*response0.GetUserAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAttributes", c, cnf, resource)
	ret0, _ := ret[0].(*response0.GetUserAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttributes indicates an expected call of GetUserAttributes.
func (mr *MockManagerMockRecorder) GetUserAttributes(c, cnf, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttributes", reflect.TypeOf((*MockManager)(nil).GetUserAttributes), c, cnf, resource)
}

// GetUserAttributesFromUAS mocks base method.
func (m *MockManager) GetUserAttributesFromUAS(c echo.Context, request *request34.GetUserAttributesRequest) (*response32.GetUserAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAttributesFromUAS", c, request)
	ret0, _ := ret[0].(*response32.GetUserAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAttributesFromUAS indicates an expected call of GetUserAttributesFromUAS.
func (mr *MockManagerMockRecorder) GetUserAttributesFromUAS(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAttributesFromUAS", reflect.TypeOf((*MockManager)(nil).GetUserAttributesFromUAS), c, request)
}

// GetUserByID mocks base method.
func (m *MockManager) GetUserByID(c echo.Context, arg1 *config.Config, uid, tenant string) (*response34.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", c, arg1, uid, tenant)
	ret0, _ := ret[0].(*response34.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockManagerMockRecorder) GetUserByID(c, arg1, uid, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockManager)(nil).GetUserByID), c, arg1, uid, tenant)
}

// GetUserByIdentity mocks base method.
func (m *MockManager) GetUserByIdentity(c echo.Context, req *request36.GetUserByIdentityRequest) (*response34.GetUserByIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdentity", c, req)
	ret0, _ := ret[0].(*response34.GetUserByIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdentity indicates an expected call of GetUserByIdentity.
func (mr *MockManagerMockRecorder) GetUserByIdentity(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdentity", reflect.TypeOf((*MockManager)(nil).GetUserByIdentity), c, req)
}

// GetUserConflict mocks base method.
func (m *MockManager) GetUserConflict(c echo.Context, req *request26.GetUserConflictRequest) (*response27.GetUserConflictResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConflict", c, req)
	ret0, _ := ret[0].(*response27.GetUserConflictResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConflict indicates an expected call of GetUserConflict.
func (mr *MockManagerMockRecorder) GetUserConflict(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConflict", reflect.TypeOf((*MockManager)(nil).GetUserConflict), c, req)
}

// GetUserConflicts mocks base method.
func (m *MockManager) GetUserConflicts(c echo.Context, req *request26.GetUserConflictsRequest) (*response27.GetUserConflictsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConflicts", c, req)
	ret0, _ := ret[0].(*response27.GetUserConflictsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConflicts indicates an expected call of GetUserConflicts.
func (mr *MockManagerMockRecorder) GetUserConflicts(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConflicts", reflect.TypeOf((*MockManager)(nil).GetUserConflicts), c, req)
}

// GetUserGoal mocks base method.
func (m *MockManager) GetUserGoal(ctx echo.Context, req *request13.GetUserGoalRequest) (*response13.UserGoalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGoal", ctx, req)
	ret0, _ := ret[0].(*response13.UserGoalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGoal indicates an expected call of GetUserGoal.
func (mr *MockManagerMockRecorder) GetUserGoal(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGoal", reflect.TypeOf((*MockManager)(nil).GetUserGoal), ctx, req)
}

// GetUserIDFromEmpID mocks base method.
func (m *MockManager) GetUserIDFromEmpID(c echo.Context, employeeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromEmpID", c, employeeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromEmpID indicates an expected call of GetUserIDFromEmpID.
func (mr *MockManagerMockRecorder) GetUserIDFromEmpID(c, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromEmpID", reflect.TypeOf((*MockManager)(nil).GetUserIDFromEmpID), c, employeeID)
}

// GetUserIDToUserMap mocks base method.
func (m *MockManager) GetUserIDToUserMap(c echo.Context, userIDs []string) (map[string]*types1.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDToUserMap", c, userIDs)
	ret0, _ := ret[0].(map[string]*types1.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDToUserMap indicates an expected call of GetUserIDToUserMap.
func (mr *MockManagerMockRecorder) GetUserIDToUserMap(c, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDToUserMap", reflect.TypeOf((*MockManager)(nil).GetUserIDToUserMap), c, userIDs)
}

// GetUserIDsByEmpIDs mocks base method.
func (m *MockManager) GetUserIDsByEmpIDs(c echo.Context, empIDs []string) ([]*types1.UserIDEmpIDMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDsByEmpIDs", c, empIDs)
	ret0, _ := ret[0].([]*types1.UserIDEmpIDMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDsByEmpIDs indicates an expected call of GetUserIDsByEmpIDs.
func (mr *MockManagerMockRecorder) GetUserIDsByEmpIDs(c, empIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDsByEmpIDs", reflect.TypeOf((*MockManager)(nil).GetUserIDsByEmpIDs), c, empIDs)
}

// GetUserIdentitiesByIdentity mocks base method.
func (m *MockManager) GetUserIdentitiesByIdentity(c echo.Context, req *request36.GetUserIdentitiesByIdentityRequest) (*response34.GetUserIdentitiesByIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdentitiesByIdentity", c, req)
	ret0, _ := ret[0].(*response34.GetUserIdentitiesByIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdentitiesByIdentity indicates an expected call of GetUserIdentitiesByIdentity.
func (mr *MockManagerMockRecorder) GetUserIdentitiesByIdentity(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdentitiesByIdentity", reflect.TypeOf((*MockManager)(nil).GetUserIdentitiesByIdentity), c, req)
}

// GetUserMinimal mocks base method.
func (m *MockManager) GetUserMinimal(c echo.Context, arg1 *config.Config, request *request36.GetUserMinimalRequest) (*response34.GetUserMinimalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMinimal", c, arg1, request)
	ret0, _ := ret[0].(*response34.GetUserMinimalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMinimal indicates an expected call of GetUserMinimal.
func (mr *MockManagerMockRecorder) GetUserMinimal(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMinimal", reflect.TypeOf((*MockManager)(nil).GetUserMinimal), c, arg1, request)
}

// GetUserNotices mocks base method.
func (m *MockManager) GetUserNotices(c echo.Context, req *request8.ListUserNoticeRequest) (*response8.ListUserNoticeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotices", c, req)
	ret0, _ := ret[0].(*response8.ListUserNoticeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotices indicates an expected call of GetUserNotices.
func (mr *MockManagerMockRecorder) GetUserNotices(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotices", reflect.TypeOf((*MockManager)(nil).GetUserNotices), c, req)
}

// GetUserPolicies mocks base method.
func (m *MockManager) GetUserPolicies(c echo.Context, cnf *config.Config, userID string) (*response0.GetUserPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPolicies", c, cnf, userID)
	ret0, _ := ret[0].(*response0.GetUserPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPolicies indicates an expected call of GetUserPolicies.
func (mr *MockManagerMockRecorder) GetUserPolicies(c, cnf, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPolicies", reflect.TypeOf((*MockManager)(nil).GetUserPolicies), c, cnf, userID)
}

// GetUserPrivilegeClient mocks base method.
func (m *MockManager) GetUserPrivilegeClient(c echo.Context) (v10.UserPrivilegeClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivilegeClient", c)
	ret0, _ := ret[0].(v10.UserPrivilegeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivilegeClient indicates an expected call of GetUserPrivilegeClient.
func (mr *MockManagerMockRecorder) GetUserPrivilegeClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivilegeClient", reflect.TypeOf((*MockManager)(nil).GetUserPrivilegeClient), c)
}

// GetUserPrivileges mocks base method.
func (m *MockManager) GetUserPrivileges(c echo.Context, cnf *config.Config, userID, tenantID string) (*response0.GetUserPrivilegesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivileges", c, cnf, userID, tenantID)
	ret0, _ := ret[0].(*response0.GetUserPrivilegesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivileges indicates an expected call of GetUserPrivileges.
func (mr *MockManagerMockRecorder) GetUserPrivileges(c, cnf, userID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivileges", reflect.TypeOf((*MockManager)(nil).GetUserPrivileges), c, cnf, userID, tenantID)
}

// GetUserProgress mocks base method.
func (m *MockManager) GetUserProgress(ctx echo.Context, req *request13.GetUserProgressRequest) (*response13.GetUserProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProgress", ctx, req)
	ret0, _ := ret[0].(*response13.GetUserProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProgress indicates an expected call of GetUserProgress.
func (mr *MockManagerMockRecorder) GetUserProgress(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProgress", reflect.TypeOf((*MockManager)(nil).GetUserProgress), ctx, req)
}

// GetUserResources mocks base method.
func (m *MockManager) GetUserResources(c echo.Context, cnf *config.Config) (*response0.GetUserResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserResources", c, cnf)
	ret0, _ := ret[0].(*response0.GetUserResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResources indicates an expected call of GetUserResources.
func (mr *MockManagerMockRecorder) GetUserResources(c, cnf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResources", reflect.TypeOf((*MockManager)(nil).GetUserResources), c, cnf)
}

// GetUserServiceClient mocks base method.
func (m *MockManager) GetUserServiceClient(c echo.Context) (v111.UserClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserServiceClient", c)
	ret0, _ := ret[0].(v111.UserClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserServiceClient indicates an expected call of GetUserServiceClient.
func (mr *MockManagerMockRecorder) GetUserServiceClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserServiceClient", reflect.TypeOf((*MockManager)(nil).GetUserServiceClient), c)
}

// GetUserSkillMappings mocks base method.
func (m *MockManager) GetUserSkillMappings(c echo.Context, request *request25.GetUserSkillRequest) (*response26.GetUserSkillMappingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillMappings", c, request)
	ret0, _ := ret[0].(*response26.GetUserSkillMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillMappings indicates an expected call of GetUserSkillMappings.
func (mr *MockManagerMockRecorder) GetUserSkillMappings(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillMappings", reflect.TypeOf((*MockManager)(nil).GetUserSkillMappings), c, request)
}

// GetUsers mocks base method.
func (m *MockManager) GetUsers(c echo.Context, arg1 *config.Config, request *request36.GetUsersRequest) (*response34.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", c, arg1, request)
	ret0, _ := ret[0].(*response34.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockManagerMockRecorder) GetUsers(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockManager)(nil).GetUsers), c, arg1, request)
}

// GetWidgetClient mocks base method.
func (m *MockManager) GetWidgetClient(c echo.Context) v11.WidgetClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidgetClient", c)
	ret0, _ := ret[0].(v11.WidgetClient)
	return ret0
}

// GetWidgetClient indicates an expected call of GetWidgetClient.
func (mr *MockManagerMockRecorder) GetWidgetClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidgetClient", reflect.TypeOf((*MockManager)(nil).GetWidgetClient), c)
}

// GetWidgetDefinitionClient mocks base method.
func (m *MockManager) GetWidgetDefinitionClient(c echo.Context) v11.WidgetDefinitionClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidgetDefinitionClient", c)
	ret0, _ := ret[0].(v11.WidgetDefinitionClient)
	return ret0
}

// GetWidgetDefinitionClient indicates an expected call of GetWidgetDefinitionClient.
func (mr *MockManagerMockRecorder) GetWidgetDefinitionClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidgetDefinitionClient", reflect.TypeOf((*MockManager)(nil).GetWidgetDefinitionClient), c)
}

// HealPaper mocks base method.
func (m *MockManager) HealPaper(ctx echo.Context, req *v14.MigrateHomeworkRequest) (*v14.QBMigrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealPaper", ctx, req)
	ret0, _ := ret[0].(*v14.QBMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealPaper indicates an expected call of HealPaper.
func (mr *MockManagerMockRecorder) HealPaper(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealPaper", reflect.TypeOf((*MockManager)(nil).HealPaper), ctx, req)
}

// IBReattemptMarkResponse mocks base method.
func (m *MockManager) IBReattemptMarkResponse(ctx echo.Context, req *request12.IBReattemptMarkResponseRequest) (*response12.IBReattemptMarkResponseReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IBReattemptMarkResponse", ctx, req)
	ret0, _ := ret[0].(*response12.IBReattemptMarkResponseReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IBReattemptMarkResponse indicates an expected call of IBReattemptMarkResponse.
func (mr *MockManagerMockRecorder) IBReattemptMarkResponse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IBReattemptMarkResponse", reflect.TypeOf((*MockManager)(nil).IBReattemptMarkResponse), ctx, req)
}

// IBReattemptResult mocks base method.
func (m *MockManager) IBReattemptResult(ctx echo.Context, req *request12.GetIBReattemptResultRequest) (*response12.GetIBReattemptResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IBReattemptResult", ctx, req)
	ret0, _ := ret[0].(*response12.GetIBReattemptResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IBReattemptResult indicates an expected call of IBReattemptResult.
func (mr *MockManagerMockRecorder) IBReattemptResult(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IBReattemptResult", reflect.TypeOf((*MockManager)(nil).IBReattemptResult), ctx, req)
}

// InAppPurchase mocks base method.
func (m *MockManager) InAppPurchase(c echo.Context, req *request5.InAppPurchaseRequest) (*response5.InAppPurchaseReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InAppPurchase", c, req)
	ret0, _ := ret[0].(*response5.InAppPurchaseReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InAppPurchase indicates an expected call of InAppPurchase.
func (mr *MockManagerMockRecorder) InAppPurchase(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InAppPurchase", reflect.TypeOf((*MockManager)(nil).InAppPurchase), c, req)
}

// IndexMaterial mocks base method.
func (m *MockManager) IndexMaterial(ctx echo.Context, req *request14.IndexMaterialRequest) (*response14.OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexMaterial indicates an expected call of IndexMaterial.
func (mr *MockManagerMockRecorder) IndexMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexMaterial", reflect.TypeOf((*MockManager)(nil).IndexMaterial), ctx, req)
}

// IndexNAC mocks base method.
func (m *MockManager) IndexNAC(ctx echo.Context, req *requests.IndexRequest) (*responses.OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexNAC", ctx, req)
	ret0, _ := ret[0].(*responses.OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexNAC indicates an expected call of IndexNAC.
func (mr *MockManagerMockRecorder) IndexNAC(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexNAC", reflect.TypeOf((*MockManager)(nil).IndexNAC), ctx, req)
}

// InitNACMultipartUpload mocks base method.
func (m *MockManager) InitNACMultipartUpload(ctx echo.Context, req *requests.InitNACMultipartUploadRequest) (*responses.UploadId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitNACMultipartUpload", ctx, req)
	ret0, _ := ret[0].(*responses.UploadId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitNACMultipartUpload indicates an expected call of InitNACMultipartUpload.
func (mr *MockManagerMockRecorder) InitNACMultipartUpload(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitNACMultipartUpload", reflect.TypeOf((*MockManager)(nil).InitNACMultipartUpload), ctx, req)
}

// InitiateCreateRecordingByChunkWorkflow mocks base method.
func (m *MockManager) InitiateCreateRecordingByChunkWorkflow(c echo.Context, meetingID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateCreateRecordingByChunkWorkflow", c, meetingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiateCreateRecordingByChunkWorkflow indicates an expected call of InitiateCreateRecordingByChunkWorkflow.
func (mr *MockManagerMockRecorder) InitiateCreateRecordingByChunkWorkflow(c, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateCreateRecordingByChunkWorkflow", reflect.TypeOf((*MockManager)(nil).InitiateCreateRecordingByChunkWorkflow), c, meetingID)
}

// InitiateMultipartUploadForMaterial mocks base method.
func (m *MockManager) InitiateMultipartUploadForMaterial(ctx echo.Context, req *request14.MaterialUploadRequest) (*response14.GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateMultipartUploadForMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUploadForMaterial indicates an expected call of InitiateMultipartUploadForMaterial.
func (mr *MockManagerMockRecorder) InitiateMultipartUploadForMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUploadForMaterial", reflect.TypeOf((*MockManager)(nil).InitiateMultipartUploadForMaterial), ctx, req)
}

// InitiateUserJourney mocks base method.
func (m *MockManager) InitiateUserJourney(ctx echo.Context, req *request13.InitiateUserJourneyRequest) (*response13.UserGoalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateUserJourney", ctx, req)
	ret0, _ := ret[0].(*response13.UserGoalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateUserJourney indicates an expected call of InitiateUserJourney.
func (mr *MockManagerMockRecorder) InitiateUserJourney(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateUserJourney", reflect.TypeOf((*MockManager)(nil).InitiateUserJourney), ctx, req)
}

// JoinMeetingInfo mocks base method.
func (m *MockManager) JoinMeetingInfo(c echo.Context, cnf *config.Config, meetingID, streamMode string) (*response7.JoinMeetingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinMeetingInfo", c, cnf, meetingID, streamMode)
	ret0, _ := ret[0].(*response7.JoinMeetingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinMeetingInfo indicates an expected call of JoinMeetingInfo.
func (mr *MockManagerMockRecorder) JoinMeetingInfo(c, cnf, meetingID, streamMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinMeetingInfo", reflect.TypeOf((*MockManager)(nil).JoinMeetingInfo), c, cnf, meetingID, streamMode)
}

// JuspayPaymentStatus mocks base method.
func (m *MockManager) JuspayPaymentStatus(c echo.Context, payload interface{}, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JuspayPaymentStatus", c, payload, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// JuspayPaymentStatus indicates an expected call of JuspayPaymentStatus.
func (mr *MockManagerMockRecorder) JuspayPaymentStatus(c, payload, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JuspayPaymentStatus", reflect.TypeOf((*MockManager)(nil).JuspayPaymentStatus), c, payload, username, password)
}

// LatchEvaluation mocks base method.
func (m *MockManager) LatchEvaluation(ctx echo.Context, req *models0.EvaluateLatchRequest) (*models0.EvaluateLatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatchEvaluation", ctx, req)
	ret0, _ := ret[0].(*models0.EvaluateLatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatchEvaluation indicates an expected call of LatchEvaluation.
func (mr *MockManagerMockRecorder) LatchEvaluation(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatchEvaluation", reflect.TypeOf((*MockManager)(nil).LatchEvaluation), ctx, req)
}

// LeaveMeeting mocks base method.
func (m *MockManager) LeaveMeeting(c echo.Context, cnf *config.Config, meetingID string) (*response7.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveMeeting", c, cnf, meetingID)
	ret0, _ := ret[0].(*response7.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveMeeting indicates an expected call of LeaveMeeting.
func (mr *MockManagerMockRecorder) LeaveMeeting(c, cnf, meetingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveMeeting", reflect.TypeOf((*MockManager)(nil).LeaveMeeting), c, cnf, meetingID)
}

// ListBookmarkBySource mocks base method.
func (m *MockManager) ListBookmarkBySource(ctx echo.Context, req *request1.ListBookmarksBySourceRequest) (*response1.ListBookmarkBySourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarkBySource", ctx, req)
	ret0, _ := ret[0].(*response1.ListBookmarkBySourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarkBySource indicates an expected call of ListBookmarkBySource.
func (mr *MockManagerMockRecorder) ListBookmarkBySource(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarkBySource", reflect.TypeOf((*MockManager)(nil).ListBookmarkBySource), ctx, req)
}

// ListGoalTemplatesByFilter mocks base method.
func (m *MockManager) ListGoalTemplatesByFilter(ctx echo.Context, req *request13.ListGoalTemplatesByFilterRequest) (*response13.ListGoalTemplatesByFilterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGoalTemplatesByFilter", ctx, req)
	ret0, _ := ret[0].(*response13.ListGoalTemplatesByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGoalTemplatesByFilter indicates an expected call of ListGoalTemplatesByFilter.
func (mr *MockManagerMockRecorder) ListGoalTemplatesByFilter(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGoalTemplatesByFilter", reflect.TypeOf((*MockManager)(nil).ListGoalTemplatesByFilter), ctx, req)
}

// ListGroupMentorshipRules mocks base method.
func (m *MockManager) ListGroupMentorshipRules(c echo.Context, req *request3.ListGroupMentorshipRulesRequest) (*response3.ListGroupMentorshipRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMentorshipRules", c, req)
	ret0, _ := ret[0].(*response3.ListGroupMentorshipRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMentorshipRules indicates an expected call of ListGroupMentorshipRules.
func (mr *MockManagerMockRecorder) ListGroupMentorshipRules(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMentorshipRules", reflect.TypeOf((*MockManager)(nil).ListGroupMentorshipRules), c, req)
}

// ListListing mocks base method.
func (m *MockManager) ListListing(c echo.Context, req *request15.GetListingsRequest) (*response15.GetListingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListing", c, req)
	ret0, _ := ret[0].(*response15.GetListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListing indicates an expected call of ListListing.
func (mr *MockManagerMockRecorder) ListListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListing", reflect.TypeOf((*MockManager)(nil).ListListing), c, req)
}

// ListListingV2 mocks base method.
func (m *MockManager) ListListingV2(c echo.Context, req *request16.GetListingsFilterRequest) (*response16.GetListingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListingV2", c, req)
	ret0, _ := ret[0].(*response16.GetListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListingV2 indicates an expected call of ListListingV2.
func (mr *MockManagerMockRecorder) ListListingV2(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListingV2", reflect.TypeOf((*MockManager)(nil).ListListingV2), c, req)
}

// ListMasterData mocks base method.
func (m *MockManager) ListMasterData(ctx echo.Context, request *request31.ListMasterDataRequest) (*reply0.ListMasterDataReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMasterData", ctx, request)
	ret0, _ := ret[0].(*reply0.ListMasterDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMasterData indicates an expected call of ListMasterData.
func (mr *MockManagerMockRecorder) ListMasterData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMasterData", reflect.TypeOf((*MockManager)(nil).ListMasterData), ctx, request)
}

// ListMeetings mocks base method.
func (m *MockManager) ListMeetings(c echo.Context, cnf *config.Config, meetingIds []string) (*response7.ListMeetingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeetings", c, cnf, meetingIds)
	ret0, _ := ret[0].(*response7.ListMeetingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeetings indicates an expected call of ListMeetings.
func (mr *MockManagerMockRecorder) ListMeetings(c, cnf, meetingIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeetings", reflect.TypeOf((*MockManager)(nil).ListMeetings), c, cnf, meetingIds)
}

// ListMentorshipExecutions mocks base method.
func (m *MockManager) ListMentorshipExecutions(c echo.Context, request *request3.ListMentorshipExecutionsRequest) (*response3.ListMentorshipExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMentorshipExecutions", c, request)
	ret0, _ := ret[0].(*response3.ListMentorshipExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMentorshipExecutions indicates an expected call of ListMentorshipExecutions.
func (mr *MockManagerMockRecorder) ListMentorshipExecutions(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMentorshipExecutions", reflect.TypeOf((*MockManager)(nil).ListMentorshipExecutions), c, request)
}

// ListOrders mocks base method.
func (m *MockManager) ListOrders(c echo.Context, req *request20.ListOrderRequest) (*response21.ListOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", c, req)
	ret0, _ := ret[0].(*response21.ListOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockManagerMockRecorder) ListOrders(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockManager)(nil).ListOrders), c, req)
}

// ListRoles mocks base method.
func (m *MockManager) ListRoles(c echo.Context, cnf *config.Config) (*response0.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", c, cnf)
	ret0, _ := ret[0].(*response0.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockManagerMockRecorder) ListRoles(c, cnf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockManager)(nil).ListRoles), c, cnf)
}

// ListTestMinimal mocks base method.
func (m *MockManager) ListTestMinimal(ctx echo.Context, request *request31.ListTestInfoMinimalRequest) (*reply0.ListTestInfoMinimalReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestMinimal", ctx, request)
	ret0, _ := ret[0].(*reply0.ListTestInfoMinimalReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestMinimal indicates an expected call of ListTestMinimal.
func (mr *MockManagerMockRecorder) ListTestMinimal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestMinimal", reflect.TypeOf((*MockManager)(nil).ListTestMinimal), ctx, request)
}

// ListUserGoals mocks base method.
func (m *MockManager) ListUserGoals(ctx echo.Context, req *request13.ListUserGoalsRequest) (*response13.ListUserGoalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGoals", ctx, req)
	ret0, _ := ret[0].(*response13.ListUserGoalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGoals indicates an expected call of ListUserGoals.
func (mr *MockManagerMockRecorder) ListUserGoals(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGoals", reflect.TypeOf((*MockManager)(nil).ListUserGoals), ctx, req)
}

// ListUserIDsByFilters mocks base method.
func (m *MockManager) ListUserIDsByFilters(c echo.Context, cnf *config.Config, roleID string, attributes *types.Attributes) (*response0.ListUserIDsByRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserIDsByFilters", c, cnf, roleID, attributes)
	ret0, _ := ret[0].(*response0.ListUserIDsByRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserIDsByFilters indicates an expected call of ListUserIDsByFilters.
func (mr *MockManagerMockRecorder) ListUserIDsByFilters(c, cnf, roleID, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserIDsByFilters", reflect.TypeOf((*MockManager)(nil).ListUserIDsByFilters), c, cnf, roleID, attributes)
}

// ListUserSteps mocks base method.
func (m *MockManager) ListUserSteps(ctx echo.Context, req *request13.ListUserStepsRequest) (*response13.ListUserStepsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSteps", ctx, req)
	ret0, _ := ret[0].(*response13.ListUserStepsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSteps indicates an expected call of ListUserSteps.
func (mr *MockManagerMockRecorder) ListUserSteps(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSteps", reflect.TypeOf((*MockManager)(nil).ListUserSteps), ctx, req)
}

// Logout mocks base method.
func (m *MockManager) Logout(c echo.Context, cnf *config.Config, req *request.LogoutRequest) (*response.LogoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", c, cnf, req)
	ret0, _ := ret[0].(*response.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockManagerMockRecorder) Logout(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockManager)(nil).Logout), c, cnf, req)
}

// MapTaxonomyNodes mocks base method.
func (m *MockManager) MapTaxonomyNodes(c echo.Context, request *request28.MapTaxonomyNodesRequest) (*response29.MapTaxonomyNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapTaxonomyNodes", c, request)
	ret0, _ := ret[0].(*response29.MapTaxonomyNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapTaxonomyNodes indicates an expected call of MapTaxonomyNodes.
func (mr *MockManagerMockRecorder) MapTaxonomyNodes(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapTaxonomyNodes", reflect.TypeOf((*MockManager)(nil).MapTaxonomyNodes), c, request)
}

// MarkDoubtAsSupport mocks base method.
func (m *MockManager) MarkDoubtAsSupport(c echo.Context, req *request9.MarkDoubtAsSupportRequest) (*response9.MarkDoubtAsSupportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDoubtAsSupport", c, req)
	ret0, _ := ret[0].(*response9.MarkDoubtAsSupportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkDoubtAsSupport indicates an expected call of MarkDoubtAsSupport.
func (mr *MockManagerMockRecorder) MarkDoubtAsSupport(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDoubtAsSupport", reflect.TypeOf((*MockManager)(nil).MarkDoubtAsSupport), c, req)
}

// MarkDoubtReplyStatus mocks base method.
func (m *MockManager) MarkDoubtReplyStatus(c echo.Context, req *request9.MarkDoubtReplyStatusRequest) (*response9.MarkDoubtReplyStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDoubtReplyStatus", c, req)
	ret0, _ := ret[0].(*response9.MarkDoubtReplyStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkDoubtReplyStatus indicates an expected call of MarkDoubtReplyStatus.
func (mr *MockManagerMockRecorder) MarkDoubtReplyStatus(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDoubtReplyStatus", reflect.TypeOf((*MockManager)(nil).MarkDoubtReplyStatus), c, req)
}

// MarkDoubtStatus mocks base method.
func (m *MockManager) MarkDoubtStatus(c echo.Context, req *request9.MarkDoubtStatusRequest) (*response9.MarkDoubtStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDoubtStatus", c, req)
	ret0, _ := ret[0].(*response9.MarkDoubtStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkDoubtStatus indicates an expected call of MarkDoubtStatus.
func (mr *MockManagerMockRecorder) MarkDoubtStatus(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDoubtStatus", reflect.TypeOf((*MockManager)(nil).MarkDoubtStatus), c, req)
}

// MarkResponse mocks base method.
func (m *MockManager) MarkResponse(ctx echo.Context, request *request29.MarkResponseRequest) (*response30.MarkResponseReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkResponse", ctx, request)
	ret0, _ := ret[0].(*response30.MarkResponseReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkResponse indicates an expected call of MarkResponse.
func (mr *MockManagerMockRecorder) MarkResponse(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkResponse", reflect.TypeOf((*MockManager)(nil).MarkResponse), ctx, request)
}

// MergeTest mocks base method.
func (m *MockManager) MergeTest(ctx echo.Context, request *request31.MergeTestsRequest) (*reply0.MergeTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeTest", ctx, request)
	ret0, _ := ret[0].(*reply0.MergeTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeTest indicates an expected call of MergeTest.
func (mr *MockManagerMockRecorder) MergeTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeTest", reflect.TypeOf((*MockManager)(nil).MergeTest), ctx, request)
}

// MigratePaper mocks base method.
func (m *MockManager) MigratePaper(ctx echo.Context, req *v13.FetchPaperContentRequest) (*v13.FetchPaperContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigratePaper", ctx, req)
	ret0, _ := ret[0].(*v13.FetchPaperContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigratePaper indicates an expected call of MigratePaper.
func (mr *MockManagerMockRecorder) MigratePaper(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigratePaper", reflect.TypeOf((*MockManager)(nil).MigratePaper), ctx, req)
}

// PeakmindGetStudentDetails mocks base method.
func (m *MockManager) PeakmindGetStudentDetails(c echo.Context, req *request3.GetStudentDetailsRequest) (*response3.GetStudentDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeakmindGetStudentDetails", c, req)
	ret0, _ := ret[0].(*response3.GetStudentDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeakmindGetStudentDetails indicates an expected call of PeakmindGetStudentDetails.
func (mr *MockManagerMockRecorder) PeakmindGetStudentDetails(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeakmindGetStudentDetails", reflect.TypeOf((*MockManager)(nil).PeakmindGetStudentDetails), c, req)
}

// PhaseMerge mocks base method.
func (m *MockManager) PhaseMerge(c echo.Context, request *request26.PhaseMergeRequest) (*response27.PhaseMergeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhaseMerge", c, request)
	ret0, _ := ret[0].(*response27.PhaseMergeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhaseMerge indicates an expected call of PhaseMerge.
func (mr *MockManagerMockRecorder) PhaseMerge(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhaseMerge", reflect.TypeOf((*MockManager)(nil).PhaseMerge), c, request)
}

// PresignedURLForThumbnailUpload mocks base method.
func (m *MockManager) PresignedURLForThumbnailUpload(ctx echo.Context, req *request14.InitUploadThumbnailRequest) (*response14.PresignedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignedURLForThumbnailUpload", ctx, req)
	ret0, _ := ret[0].(*response14.PresignedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignedURLForThumbnailUpload indicates an expected call of PresignedURLForThumbnailUpload.
func (mr *MockManagerMockRecorder) PresignedURLForThumbnailUpload(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignedURLForThumbnailUpload", reflect.TypeOf((*MockManager)(nil).PresignedURLForThumbnailUpload), ctx, req)
}

// PreviewAnswers mocks base method.
func (m *MockManager) PreviewAnswers(ctx echo.Context, request *request29.PreviewAnswersRequest) (*response30.PreviewAnswersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewAnswers", ctx, request)
	ret0, _ := ret[0].(*response30.PreviewAnswersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewAnswers indicates an expected call of PreviewAnswers.
func (mr *MockManagerMockRecorder) PreviewAnswers(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewAnswers", reflect.TypeOf((*MockManager)(nil).PreviewAnswers), ctx, request)
}

// ProcessBulkOrder mocks base method.
func (m *MockManager) ProcessBulkOrder(c echo.Context, cnf *config.Config, req *request10.CreateBulkOrderRequest) (*response10.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBulkOrder", c, cnf, req)
	ret0, _ := ret[0].(*response10.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessBulkOrder indicates an expected call of ProcessBulkOrder.
func (mr *MockManagerMockRecorder) ProcessBulkOrder(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBulkOrder", reflect.TypeOf((*MockManager)(nil).ProcessBulkOrder), c, cnf, req)
}

// ProcessSubjectiveResultsFile mocks base method.
func (m *MockManager) ProcessSubjectiveResultsFile(ctx echo.Context, request *request31.ProcessSubjectiveResultsFileRequest) (*reply0.ProcessSubjectiveResultsFileReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSubjectiveResultsFile", ctx, request)
	ret0, _ := ret[0].(*reply0.ProcessSubjectiveResultsFileReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSubjectiveResultsFile indicates an expected call of ProcessSubjectiveResultsFile.
func (mr *MockManagerMockRecorder) ProcessSubjectiveResultsFile(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSubjectiveResultsFile", reflect.TypeOf((*MockManager)(nil).ProcessSubjectiveResultsFile), ctx, request)
}

// ProvisionalResultGeneration mocks base method.
func (m *MockManager) ProvisionalResultGeneration(ctx echo.Context, request *request33.TestAndAssessmentWorkflowProvisionalRequest) (*response31.TestAndAssessmentWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionalResultGeneration", ctx, request)
	ret0, _ := ret[0].(*response31.TestAndAssessmentWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionalResultGeneration indicates an expected call of ProvisionalResultGeneration.
func (mr *MockManagerMockRecorder) ProvisionalResultGeneration(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionalResultGeneration", reflect.TypeOf((*MockManager)(nil).ProvisionalResultGeneration), ctx, request)
}

// PublishStudentTestResult mocks base method.
func (m *MockManager) PublishStudentTestResult(ctx echo.Context, request *request31.PublishFinalResultForStudentsRequest) (*reply0.PublishFinalResultForStudentsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishStudentTestResult", ctx, request)
	ret0, _ := ret[0].(*reply0.PublishFinalResultForStudentsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishStudentTestResult indicates an expected call of PublishStudentTestResult.
func (mr *MockManagerMockRecorder) PublishStudentTestResult(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStudentTestResult", reflect.TypeOf((*MockManager)(nil).PublishStudentTestResult), ctx, request)
}

// QReelRecordActions mocks base method.
func (m *MockManager) QReelRecordActions(ctx echo.Context, request *request13.RecordActionsRequest) (*response13.AckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QReelRecordActions", ctx, request)
	ret0, _ := ret[0].(*response13.AckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QReelRecordActions indicates an expected call of QReelRecordActions.
func (mr *MockManagerMockRecorder) QReelRecordActions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QReelRecordActions", reflect.TypeOf((*MockManager)(nil).QReelRecordActions), ctx, request)
}

// ReInitiateCheckout mocks base method.
func (m *MockManager) ReInitiateCheckout(c echo.Context, req *request5.ReInitiateCheckoutRequest) (*response5.CreateCheckoutReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReInitiateCheckout", c, req)
	ret0, _ := ret[0].(*response5.CreateCheckoutReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReInitiateCheckout indicates an expected call of ReInitiateCheckout.
func (mr *MockManagerMockRecorder) ReInitiateCheckout(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReInitiateCheckout", reflect.TypeOf((*MockManager)(nil).ReInitiateCheckout), c, req)
}

// ReadReceipt mocks base method.
func (m *MockManager) ReadReceipt(c echo.Context, req *request17.ReadReceiptRequest) (*response17.ReadReceiptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReceipt", c, req)
	ret0, _ := ret[0].(*response17.ReadReceiptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadReceipt indicates an expected call of ReadReceipt.
func (mr *MockManagerMockRecorder) ReadReceipt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReceipt", reflect.TypeOf((*MockManager)(nil).ReadReceipt), c, req)
}

// ReconcileClassSchedules mocks base method.
func (m *MockManager) ReconcileClassSchedules(c echo.Context, request *request25.ClassSchedulesReconcileRequest) (*response26.ClassSchedulesReconcileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileClassSchedules", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesReconcileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileClassSchedules indicates an expected call of ReconcileClassSchedules.
func (mr *MockManagerMockRecorder) ReconcileClassSchedules(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileClassSchedules", reflect.TypeOf((*MockManager)(nil).ReconcileClassSchedules), c, request)
}

// RecordActions mocks base method.
func (m *MockManager) RecordActions(ctx echo.Context, req *request13.UserRecordActionsRequest) (*response13.UserRecordActionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordActions", ctx, req)
	ret0, _ := ret[0].(*response13.UserRecordActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordActions indicates an expected call of RecordActions.
func (mr *MockManagerMockRecorder) RecordActions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordActions", reflect.TypeOf((*MockManager)(nil).RecordActions), ctx, req)
}

// RecordAns mocks base method.
func (m *MockManager) RecordAns(ctx echo.Context, req *request12.IBRecordAnsRequest) (*response12.IBRecordAnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordAns", ctx, req)
	ret0, _ := ret[0].(*response12.IBRecordAnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordAns indicates an expected call of RecordAns.
func (mr *MockManagerMockRecorder) RecordAns(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAns", reflect.TypeOf((*MockManager)(nil).RecordAns), ctx, req)
}

// RefreshJourneys mocks base method.
func (m *MockManager) RefreshJourneys(ctx echo.Context, req *request13.RefreshJourneysRequest) (*response13.RefreshJourneysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshJourneys", ctx, req)
	ret0, _ := ret[0].(*response13.RefreshJourneysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshJourneys indicates an expected call of RefreshJourneys.
func (mr *MockManagerMockRecorder) RefreshJourneys(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshJourneys", reflect.TypeOf((*MockManager)(nil).RefreshJourneys), ctx, req)
}

// RefreshToken mocks base method.
func (m *MockManager) RefreshToken(c echo.Context, cnf *config.Config, req *request.RefreshTokenRequest) (*response.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", c, cnf, req)
	ret0, _ := ret[0].(*response.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockManagerMockRecorder) RefreshToken(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockManager)(nil).RefreshToken), c, cnf, req)
}

// RegisterDevice mocks base method.
func (m *MockManager) RegisterDevice(c echo.Context, arg1 *config.Config, request *request18.RegisterDeviceRequest) (*response18.RegisterDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", c, arg1, request)
	ret0, _ := ret[0].(*response18.RegisterDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockManagerMockRecorder) RegisterDevice(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockManager)(nil).RegisterDevice), c, arg1, request)
}

// RegisterForTest mocks base method.
func (m *MockManager) RegisterForTest(ctx echo.Context, request *request32.RegisterForTestRequest) (*reply1.RegisterForTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterForTest", ctx, request)
	ret0, _ := ret[0].(*reply1.RegisterForTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterForTest indicates an expected call of RegisterForTest.
func (mr *MockManagerMockRecorder) RegisterForTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForTest", reflect.TypeOf((*MockManager)(nil).RegisterForTest), ctx, request)
}

// RegisterPptForConversion mocks base method.
func (m *MockManager) RegisterPptForConversion(c echo.Context, cnf *config.Config, rawPptContentId string) (*response7.RegisterPptForConversionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPptForConversion", c, cnf, rawPptContentId)
	ret0, _ := ret[0].(*response7.RegisterPptForConversionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPptForConversion indicates an expected call of RegisterPptForConversion.
func (mr *MockManagerMockRecorder) RegisterPptForConversion(c, cnf, rawPptContentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPptForConversion", reflect.TypeOf((*MockManager)(nil).RegisterPptForConversion), c, cnf, rawPptContentId)
}

// RegisterUser mocks base method.
func (m *MockManager) RegisterUser(c echo.Context, req *request36.RegisterUserRequest) (*response34.RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", c, req)
	ret0, _ := ret[0].(*response34.RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockManagerMockRecorder) RegisterUser(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockManager)(nil).RegisterUser), c, req)
}

// RemoveCoupons mocks base method.
func (m *MockManager) RemoveCoupons(c echo.Context, req *request5.RemoveCouponsRequest) (*response5.RemoveCouponsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCoupons", c, req)
	ret0, _ := ret[0].(*response5.RemoveCouponsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCoupons indicates an expected call of RemoveCoupons.
func (mr *MockManagerMockRecorder) RemoveCoupons(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCoupons", reflect.TypeOf((*MockManager)(nil).RemoveCoupons), c, req)
}

// RemoveCourseContent mocks base method.
func (m *MockManager) RemoveCourseContent(c echo.Context, arg1 *config.Config, request *request25.RemoveCourseContentRequest) (*response26.RemoveCourseContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCourseContent", c, arg1, request)
	ret0, _ := ret[0].(*response26.RemoveCourseContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCourseContent indicates an expected call of RemoveCourseContent.
func (mr *MockManagerMockRecorder) RemoveCourseContent(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCourseContent", reflect.TypeOf((*MockManager)(nil).RemoveCourseContent), c, arg1, request)
}

// ReplaceTeacherMappings mocks base method.
func (m *MockManager) ReplaceTeacherMappings(c echo.Context, request *request25.ReplaceTeacherRequest) (*response26.ReplaceTeacherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTeacherMappings", c, request)
	ret0, _ := ret[0].(*response26.ReplaceTeacherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceTeacherMappings indicates an expected call of ReplaceTeacherMappings.
func (mr *MockManagerMockRecorder) ReplaceTeacherMappings(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTeacherMappings", reflect.TypeOf((*MockManager)(nil).ReplaceTeacherMappings), c, request)
}

// ResetHomework mocks base method.
func (m *MockManager) ResetHomework(ctx echo.Context, req *request11.ResetHomeworkRequest) (*response11.Homework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetHomework", ctx, req)
	ret0, _ := ret[0].(*response11.Homework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetHomework indicates an expected call of ResetHomework.
func (mr *MockManagerMockRecorder) ResetHomework(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetHomework", reflect.TypeOf((*MockManager)(nil).ResetHomework), ctx, req)
}

// SearchAdminTests mocks base method.
func (m *MockManager) SearchAdminTests(ctx echo.Context, request *request31.SearchAdminTestsRequest) (*reply0.SearchAdminTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAdminTests", ctx, request)
	ret0, _ := ret[0].(*reply0.SearchAdminTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAdminTests indicates an expected call of SearchAdminTests.
func (mr *MockManagerMockRecorder) SearchAdminTests(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAdminTests", reflect.TypeOf((*MockManager)(nil).SearchAdminTests), ctx, request)
}

// SearchOfflineTestResultFile mocks base method.
func (m *MockManager) SearchOfflineTestResultFile(ctx echo.Context, request *request31.SearchOfflineFileRequest) (*taaservice.OfflineResponseFileList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOfflineTestResultFile", ctx, request)
	ret0, _ := ret[0].(*taaservice.OfflineResponseFileList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOfflineTestResultFile indicates an expected call of SearchOfflineTestResultFile.
func (mr *MockManagerMockRecorder) SearchOfflineTestResultFile(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOfflineTestResultFile", reflect.TypeOf((*MockManager)(nil).SearchOfflineTestResultFile), ctx, request)
}

// SendNotice mocks base method.
func (m *MockManager) SendNotice(c echo.Context, req *request17.SendNoticeRequest) (*response17.SendNoticeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotice", c, req)
	ret0, _ := ret[0].(*response17.SendNoticeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotice indicates an expected call of SendNotice.
func (mr *MockManagerMockRecorder) SendNotice(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotice", reflect.TypeOf((*MockManager)(nil).SendNotice), c, req)
}

// SendNotification mocks base method.
func (m *MockManager) SendNotification(c echo.Context, request *request18.CreateNotificationRequest) (*response18.CreateNotificationReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", c, request)
	ret0, _ := ret[0].(*response18.CreateNotificationReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockManagerMockRecorder) SendNotification(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockManager)(nil).SendNotification), c, request)
}

// StartBulkProcessing mocks base method.
func (m *MockManager) StartBulkProcessing(c echo.Context, request *request26.StartBulkProcessingRequest) (*response27.StartBulkProcessingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkProcessing", c, request)
	ret0, _ := ret[0].(*response27.StartBulkProcessingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkProcessing indicates an expected call of StartBulkProcessing.
func (mr *MockManagerMockRecorder) StartBulkProcessing(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkProcessing", reflect.TypeOf((*MockManager)(nil).StartBulkProcessing), c, request)
}

// StartTest mocks base method.
func (m *MockManager) StartTest(ctx echo.Context, request *request29.StartTestRequest) (*response30.StartTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTest", ctx, request)
	ret0, _ := ret[0].(*response30.StartTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTest indicates an expected call of StartTest.
func (mr *MockManagerMockRecorder) StartTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockManager)(nil).StartTest), ctx, request)
}

// StartTestTimer mocks base method.
func (m *MockManager) StartTestTimer(ctx echo.Context, request *request29.StartTestTimerRequest) (*response30.StartTestTimerReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTestTimer", ctx, request)
	ret0, _ := ret[0].(*response30.StartTestTimerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTestTimer indicates an expected call of StartTestTimer.
func (mr *MockManagerMockRecorder) StartTestTimer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTestTimer", reflect.TypeOf((*MockManager)(nil).StartTestTimer), ctx, request)
}

// StudentBatchMovement mocks base method.
func (m *MockManager) StudentBatchMovement(c echo.Context, arg1 *config.Config, request *request25.StudentBatchMovementRequest) (*response26.StudentBatchMovementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StudentBatchMovement", c, arg1, request)
	ret0, _ := ret[0].(*response26.StudentBatchMovementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StudentBatchMovement indicates an expected call of StudentBatchMovement.
func (mr *MockManagerMockRecorder) StudentBatchMovement(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StudentBatchMovement", reflect.TypeOf((*MockManager)(nil).StudentBatchMovement), c, arg1, request)
}

// SubmitDocuments mocks base method.
func (m *MockManager) SubmitDocuments(c echo.Context, request *request36.SubmitDocumentsRequest) (*response34.SubmitDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitDocuments", c, request)
	ret0, _ := ret[0].(*response34.SubmitDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitDocuments indicates an expected call of SubmitDocuments.
func (mr *MockManagerMockRecorder) SubmitDocuments(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitDocuments", reflect.TypeOf((*MockManager)(nil).SubmitDocuments), c, request)
}

// SubmitPolicyReview mocks base method.
func (m *MockManager) SubmitPolicyReview(c echo.Context, request *request22.SubmitPolicyReviewRequest) (*response23.SubmitPolicyReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPolicyReview", c, request)
	ret0, _ := ret[0].(*response23.SubmitPolicyReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPolicyReview indicates an expected call of SubmitPolicyReview.
func (mr *MockManagerMockRecorder) SubmitPolicyReview(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPolicyReview", reflect.TypeOf((*MockManager)(nil).SubmitPolicyReview), c, request)
}

// SubmitSurveyData mocks base method.
func (m *MockManager) SubmitSurveyData(c echo.Context, orgUserID string, request *request27.SubmitSurveyDataRequest) (*response28.SubmitSurveyDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSurveyData", c, orgUserID, request)
	ret0, _ := ret[0].(*response28.SubmitSurveyDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitSurveyData indicates an expected call of SubmitSurveyData.
func (mr *MockManagerMockRecorder) SubmitSurveyData(c, orgUserID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSurveyData", reflect.TypeOf((*MockManager)(nil).SubmitSurveyData), c, orgUserID, request)
}

// SubmitTest mocks base method.
func (m *MockManager) SubmitTest(ctx echo.Context, request *request29.SubmitTestRequest) (*response30.SubmitTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTest", ctx, request)
	ret0, _ := ret[0].(*response30.SubmitTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTest indicates an expected call of SubmitTest.
func (mr *MockManagerMockRecorder) SubmitTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTest", reflect.TypeOf((*MockManager)(nil).SubmitTest), ctx, request)
}

// SuggestNextContent mocks base method.
func (m *MockManager) SuggestNextContent(ctx echo.Context, req *request13.UserContentSuggestionRequest) (*response13.UserContentSuggestionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestNextContent", ctx, req)
	ret0, _ := ret[0].(*response13.UserContentSuggestionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestNextContent indicates an expected call of SuggestNextContent.
func (mr *MockManagerMockRecorder) SuggestNextContent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestNextContent", reflect.TypeOf((*MockManager)(nil).SuggestNextContent), ctx, req)
}

// SyncSubmitTest mocks base method.
func (m *MockManager) SyncSubmitTest(ctx echo.Context, request *request29.SyncSubmitTestRequest) (*response30.SyncSubmitTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSubmitTest", ctx, request)
	ret0, _ := ret[0].(*response30.SyncSubmitTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncSubmitTest indicates an expected call of SyncSubmitTest.
func (mr *MockManagerMockRecorder) SyncSubmitTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSubmitTest", reflect.TypeOf((*MockManager)(nil).SyncSubmitTest), ctx, request)
}

// TransferAllDoubtsOfResolver mocks base method.
func (m *MockManager) TransferAllDoubtsOfResolver(c echo.Context, req *request9.TransferAllDoubtsOfResolverRequest) (*response9.TransferAllDoubtsOfResolverResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAllDoubtsOfResolver", c, req)
	ret0, _ := ret[0].(*response9.TransferAllDoubtsOfResolverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferAllDoubtsOfResolver indicates an expected call of TransferAllDoubtsOfResolver.
func (mr *MockManagerMockRecorder) TransferAllDoubtsOfResolver(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAllDoubtsOfResolver", reflect.TypeOf((*MockManager)(nil).TransferAllDoubtsOfResolver), c, req)
}

// TransferDoubt mocks base method.
func (m *MockManager) TransferDoubt(c echo.Context, req *request9.TransferDoubtRequest) (*response9.TransferDoubtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferDoubt", c, req)
	ret0, _ := ret[0].(*response9.TransferDoubtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferDoubt indicates an expected call of TransferDoubt.
func (mr *MockManagerMockRecorder) TransferDoubt(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferDoubt", reflect.TypeOf((*MockManager)(nil).TransferDoubt), c, req)
}

// TriggerOMRUploadedWorkflowSignal mocks base method.
func (m *MockManager) TriggerOMRUploadedWorkflowSignal(ctx echo.Context, request *request31.TriggerOMRUploadedSignalRequest) (*reply0.TriggerOMRUploadedSignalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerOMRUploadedWorkflowSignal", ctx, request)
	ret0, _ := ret[0].(*reply0.TriggerOMRUploadedSignalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerOMRUploadedWorkflowSignal indicates an expected call of TriggerOMRUploadedWorkflowSignal.
func (mr *MockManagerMockRecorder) TriggerOMRUploadedWorkflowSignal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerOMRUploadedWorkflowSignal", reflect.TypeOf((*MockManager)(nil).TriggerOMRUploadedWorkflowSignal), ctx, request)
}

// UnEnrollStudentsFromSpecialBatch mocks base method.
func (m *MockManager) UnEnrollStudentsFromSpecialBatch(c echo.Context, request *request25.SpecialBatchUnEnrollRequest) (*response26.SuccessCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnEnrollStudentsFromSpecialBatch", c, request)
	ret0, _ := ret[0].(*response26.SuccessCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnEnrollStudentsFromSpecialBatch indicates an expected call of UnEnrollStudentsFromSpecialBatch.
func (mr *MockManagerMockRecorder) UnEnrollStudentsFromSpecialBatch(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnEnrollStudentsFromSpecialBatch", reflect.TypeOf((*MockManager)(nil).UnEnrollStudentsFromSpecialBatch), c, request)
}

// UnMergeTest mocks base method.
func (m *MockManager) UnMergeTest(ctx echo.Context, request *request31.UnMergeTestsRequest) (*reply0.UnMergeTestsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMergeTest", ctx, request)
	ret0, _ := ret[0].(*reply0.UnMergeTestsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnMergeTest indicates an expected call of UnMergeTest.
func (mr *MockManagerMockRecorder) UnMergeTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMergeTest", reflect.TypeOf((*MockManager)(nil).UnMergeTest), ctx, request)
}

// UnenrollTestStudent mocks base method.
func (m *MockManager) UnenrollTestStudent(c echo.Context, request *request25.StudentUnenrollRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnenrollTestStudent", c, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnenrollTestStudent indicates an expected call of UnenrollTestStudent.
func (mr *MockManagerMockRecorder) UnenrollTestStudent(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnenrollTestStudent", reflect.TypeOf((*MockManager)(nil).UnenrollTestStudent), c, request)
}

// UnlockUserStepsForJourney mocks base method.
func (m *MockManager) UnlockUserStepsForJourney(ctx echo.Context, request *request13.UnlockStepsForJourneyRequest) (*response13.AckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockUserStepsForJourney", ctx, request)
	ret0, _ := ret[0].(*response13.AckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockUserStepsForJourney indicates an expected call of UnlockUserStepsForJourney.
func (mr *MockManagerMockRecorder) UnlockUserStepsForJourney(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockUserStepsForJourney", reflect.TypeOf((*MockManager)(nil).UnlockUserStepsForJourney), ctx, request)
}

// UnverifiedSignup mocks base method.
func (m *MockManager) UnverifiedSignup(c echo.Context, request *salesorchestrator.EnquiryForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnverifiedSignup", c, request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnverifiedSignup indicates an expected call of UnverifiedSignup.
func (mr *MockManagerMockRecorder) UnverifiedSignup(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnverifiedSignup", reflect.TypeOf((*MockManager)(nil).UnverifiedSignup), c, request)
}

// UpdateAddress mocks base method.
func (m *MockManager) UpdateAddress(c echo.Context, req *request20.UpdateAddressRequest) (*response21.UpdateAddressReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", c, req)
	ret0, _ := ret[0].(*response21.UpdateAddressReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockManagerMockRecorder) UpdateAddress(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockManager)(nil).UpdateAddress), c, req)
}

// UpdateAndGetCustomTestQuestions mocks base method.
func (m *MockManager) UpdateAndGetCustomTestQuestions(ctx echo.Context, req *customTestRequest.UpdateAndGetQuestionsRequest) (*customTestResponse.UpdateAndGetQuestionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAndGetCustomTestQuestions", ctx, req)
	ret0, _ := ret[0].(*customTestResponse.UpdateAndGetQuestionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAndGetCustomTestQuestions indicates an expected call of UpdateAndGetCustomTestQuestions.
func (mr *MockManagerMockRecorder) UpdateAndGetCustomTestQuestions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAndGetCustomTestQuestions", reflect.TypeOf((*MockManager)(nil).UpdateAndGetCustomTestQuestions), ctx, req)
}

// UpdateBatch mocks base method.
func (m *MockManager) UpdateBatch(c echo.Context, arg1 *config.Config, request *request25.UpdateBatchRequest) (*response26.UpdateBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", c, arg1, request)
	ret0, _ := ret[0].(*response26.UpdateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockManagerMockRecorder) UpdateBatch(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockManager)(nil).UpdateBatch), c, arg1, request)
}

// UpdateBookmarkByID mocks base method.
func (m *MockManager) UpdateBookmarkByID(ctx echo.Context, req *request1.UpdateBookmarkByIDRequest) (*response1.BookmarkAckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookmarkByID", ctx, req)
	ret0, _ := ret[0].(*response1.BookmarkAckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookmarkByID indicates an expected call of UpdateBookmarkByID.
func (mr *MockManagerMockRecorder) UpdateBookmarkByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookmarkByID", reflect.TypeOf((*MockManager)(nil).UpdateBookmarkByID), ctx, req)
}

// UpdateCartV2 mocks base method.
func (m *MockManager) UpdateCartV2(c echo.Context, req *request6.UpdateCartRequest) (*response6.UpdateCartReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartV2", c, req)
	ret0, _ := ret[0].(*response6.UpdateCartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartV2 indicates an expected call of UpdateCartV2.
func (mr *MockManagerMockRecorder) UpdateCartV2(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartV2", reflect.TypeOf((*MockManager)(nil).UpdateCartV2), c, req)
}

// UpdateClassSchedule mocks base method.
func (m *MockManager) UpdateClassSchedule(c echo.Context, request *request25.ClassScheduleUpdateRequest) (*response26.ClassScheduleUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassSchedule", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassSchedule indicates an expected call of UpdateClassSchedule.
func (mr *MockManagerMockRecorder) UpdateClassSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassSchedule", reflect.TypeOf((*MockManager)(nil).UpdateClassSchedule), c, request)
}

// UpdateClassScheduleStatusV2 mocks base method.
func (m *MockManager) UpdateClassScheduleStatusV2(c echo.Context, request *request25.ClassSchedulesStatusUpdateRequestV2) (*response26.ClassSchedulesStatusUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassScheduleStatusV2", c, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesStatusUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassScheduleStatusV2 indicates an expected call of UpdateClassScheduleStatusV2.
func (mr *MockManagerMockRecorder) UpdateClassScheduleStatusV2(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassScheduleStatusV2", reflect.TypeOf((*MockManager)(nil).UpdateClassScheduleStatusV2), c, request)
}

// UpdateCourse mocks base method.
func (m *MockManager) UpdateCourse(c echo.Context, arg1 *config.Config, request *request25.UpdateCourseRequest) (*response26.UpdateCourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", c, arg1, request)
	ret0, _ := ret[0].(*response26.UpdateCourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockManagerMockRecorder) UpdateCourse(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockManager)(nil).UpdateCourse), c, arg1, request)
}

// UpdateCourseContent mocks base method.
func (m *MockManager) UpdateCourseContent(c echo.Context, arg1 *config.Config, request *request25.UpdateCourseContentRequest) (*response26.UpdateCourseContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseContent", c, arg1, request)
	ret0, _ := ret[0].(*response26.UpdateCourseContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseContent indicates an expected call of UpdateCourseContent.
func (mr *MockManagerMockRecorder) UpdateCourseContent(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseContent", reflect.TypeOf((*MockManager)(nil).UpdateCourseContent), c, arg1, request)
}

// UpdateFacilities mocks base method.
func (m *MockManager) UpdateFacilities(c echo.Context, arg1 *config.Config, request *request25.UpdateFacilityRequest) (*response26.UpdateFacilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacilities", c, arg1, request)
	ret0, _ := ret[0].(*response26.UpdateFacilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFacilities indicates an expected call of UpdateFacilities.
func (mr *MockManagerMockRecorder) UpdateFacilities(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacilities", reflect.TypeOf((*MockManager)(nil).UpdateFacilities), c, arg1, request)
}

// UpdateGroupMentorshipRule mocks base method.
func (m *MockManager) UpdateGroupMentorshipRule(c echo.Context, request *request3.UpdateGroupMentorshipRuleRequest) (*response3.UpdateGroupMentorshipRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupMentorshipRule", c, request)
	ret0, _ := ret[0].(*response3.UpdateGroupMentorshipRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupMentorshipRule indicates an expected call of UpdateGroupMentorshipRule.
func (mr *MockManagerMockRecorder) UpdateGroupMentorshipRule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMentorshipRule", reflect.TypeOf((*MockManager)(nil).UpdateGroupMentorshipRule), c, request)
}

// UpdateHomework mocks base method.
func (m *MockManager) UpdateHomework(ctx echo.Context, req *request11.UpdateHomeworkRequest) (*response11.Homework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomework", ctx, req)
	ret0, _ := ret[0].(*response11.Homework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomework indicates an expected call of UpdateHomework.
func (mr *MockManagerMockRecorder) UpdateHomework(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomework", reflect.TypeOf((*MockManager)(nil).UpdateHomework), ctx, req)
}

// UpdateHomeworkQuestionCollectionQuestions mocks base method.
func (m *MockManager) UpdateHomeworkQuestionCollectionQuestions(ctx echo.Context, req *request24.UpdateHomeworkQCQuestionsRequest) (*response25.UpdateHomeworkQCQuestionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomeworkQuestionCollectionQuestions", ctx, req)
	ret0, _ := ret[0].(*response25.UpdateHomeworkQCQuestionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomeworkQuestionCollectionQuestions indicates an expected call of UpdateHomeworkQuestionCollectionQuestions.
func (mr *MockManagerMockRecorder) UpdateHomeworkQuestionCollectionQuestions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomeworkQuestionCollectionQuestions", reflect.TypeOf((*MockManager)(nil).UpdateHomeworkQuestionCollectionQuestions), ctx, req)
}

// UpdateHomeworkQuestionCollectionSections mocks base method.
func (m *MockManager) UpdateHomeworkQuestionCollectionSections(ctx echo.Context, req *request24.UpdateHomeworkQCSectionsRequest) (*response25.UpdateHomeworkQCSectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomeworkQuestionCollectionSections", ctx, req)
	ret0, _ := ret[0].(*response25.UpdateHomeworkQCSectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomeworkQuestionCollectionSections indicates an expected call of UpdateHomeworkQuestionCollectionSections.
func (mr *MockManagerMockRecorder) UpdateHomeworkQuestionCollectionSections(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomeworkQuestionCollectionSections", reflect.TypeOf((*MockManager)(nil).UpdateHomeworkQuestionCollectionSections), ctx, req)
}

// UpdateHomeworkQuestionCollectionStatus mocks base method.
func (m *MockManager) UpdateHomeworkQuestionCollectionStatus(ctx echo.Context, req *request24.UpdateHomeworkQuestionCollectionStatusRequest) (*response25.UpdateHomeworkQuestionCollectionStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomeworkQuestionCollectionStatus", ctx, req)
	ret0, _ := ret[0].(*response25.UpdateHomeworkQuestionCollectionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomeworkQuestionCollectionStatus indicates an expected call of UpdateHomeworkQuestionCollectionStatus.
func (mr *MockManagerMockRecorder) UpdateHomeworkQuestionCollectionStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomeworkQuestionCollectionStatus", reflect.TypeOf((*MockManager)(nil).UpdateHomeworkQuestionCollectionStatus), ctx, req)
}

// UpdateHomeworks mocks base method.
func (m *MockManager) UpdateHomeworks(ctx echo.Context, req *request11.UpdateHomeworkRequests) (*response11.HomeworkList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomeworks", ctx, req)
	ret0, _ := ret[0].(*response11.HomeworkList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomeworks indicates an expected call of UpdateHomeworks.
func (mr *MockManagerMockRecorder) UpdateHomeworks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomeworks", reflect.TypeOf((*MockManager)(nil).UpdateHomeworks), ctx, req)
}

// UpdateLearningJourneyBookmark mocks base method.
func (m *MockManager) UpdateLearningJourneyBookmark(ctx echo.Context, req *request13.UpdateBookmarkRequest) (*response13.UpdateBookmarkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLearningJourneyBookmark", ctx, req)
	ret0, _ := ret[0].(*response13.UpdateBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLearningJourneyBookmark indicates an expected call of UpdateLearningJourneyBookmark.
func (mr *MockManagerMockRecorder) UpdateLearningJourneyBookmark(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLearningJourneyBookmark", reflect.TypeOf((*MockManager)(nil).UpdateLearningJourneyBookmark), ctx, req)
}

// UpdateLearningJourneyStep mocks base method.
func (m *MockManager) UpdateLearningJourneyStep(ctx echo.Context, req *request13.UpdateLearningJourneyStepRequest) (*response13.AckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLearningJourneyStep", ctx, req)
	ret0, _ := ret[0].(*response13.AckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLearningJourneyStep indicates an expected call of UpdateLearningJourneyStep.
func (mr *MockManagerMockRecorder) UpdateLearningJourneyStep(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLearningJourneyStep", reflect.TypeOf((*MockManager)(nil).UpdateLearningJourneyStep), ctx, req)
}

// UpdateLecturePlanMeta mocks base method.
func (m *MockManager) UpdateLecturePlanMeta(c echo.Context, request *request25.LecturePlansMetaUpdateRequest) (*response26.LecturePlansMetaUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLecturePlanMeta", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansMetaUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLecturePlanMeta indicates an expected call of UpdateLecturePlanMeta.
func (mr *MockManagerMockRecorder) UpdateLecturePlanMeta(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLecturePlanMeta", reflect.TypeOf((*MockManager)(nil).UpdateLecturePlanMeta), c, request)
}

// UpdateLecturePlans mocks base method.
func (m *MockManager) UpdateLecturePlans(c echo.Context, request *request25.LecturePlansUpdateRequest) (*response26.LecturePlansUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLecturePlans", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLecturePlans indicates an expected call of UpdateLecturePlans.
func (mr *MockManagerMockRecorder) UpdateLecturePlans(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLecturePlans", reflect.TypeOf((*MockManager)(nil).UpdateLecturePlans), c, request)
}

// UpdateListing mocks base method.
func (m *MockManager) UpdateListing(c echo.Context, req *request15.UpdateListingRequest) (*response15.UpdateListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListing", c, req)
	ret0, _ := ret[0].(*response15.UpdateListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListing indicates an expected call of UpdateListing.
func (mr *MockManagerMockRecorder) UpdateListing(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListing", reflect.TypeOf((*MockManager)(nil).UpdateListing), c, req)
}

// UpdateMapping mocks base method.
func (m *MockManager) UpdateMapping(c echo.Context, request *request28.EditMappingsRequest) (*response29.EditMappingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapping", c, request)
	ret0, _ := ret[0].(*response29.EditMappingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapping indicates an expected call of UpdateMapping.
func (mr *MockManagerMockRecorder) UpdateMapping(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapping", reflect.TypeOf((*MockManager)(nil).UpdateMapping), c, request)
}

// UpdateMaterial mocks base method.
func (m *MockManager) UpdateMaterial(ctx echo.Context, req *request14.UpdateMaterialRequest) (*response14.UpdateMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.UpdateMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaterial indicates an expected call of UpdateMaterial.
func (mr *MockManagerMockRecorder) UpdateMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaterial", reflect.TypeOf((*MockManager)(nil).UpdateMaterial), ctx, req)
}

// UpdateMaterialStatus mocks base method.
func (m *MockManager) UpdateMaterialStatus(ctx echo.Context, req *request14.UpdateStatusRequest) (*response14.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaterialStatus", ctx, req)
	ret0, _ := ret[0].(*response14.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaterialStatus indicates an expected call of UpdateMaterialStatus.
func (mr *MockManagerMockRecorder) UpdateMaterialStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaterialStatus", reflect.TypeOf((*MockManager)(nil).UpdateMaterialStatus), ctx, req)
}

// UpdateMentorBatchMapping mocks base method.
func (m *MockManager) UpdateMentorBatchMapping(c echo.Context, req *request3.UpdateMentorBatchMappingRequest) (*response3.GetDefaultMentorListReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMentorBatchMapping", c, req)
	ret0, _ := ret[0].(*response3.GetDefaultMentorListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMentorBatchMapping indicates an expected call of UpdateMentorBatchMapping.
func (mr *MockManagerMockRecorder) UpdateMentorBatchMapping(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMentorBatchMapping", reflect.TypeOf((*MockManager)(nil).UpdateMentorBatchMapping), c, req)
}

// UpdateNAC mocks base method.
func (m *MockManager) UpdateNAC(ctx echo.Context, req *requests.UpdateNACRequest) (*responses.UpdateNACResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNAC", ctx, req)
	ret0, _ := ret[0].(*responses.UpdateNACResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNAC indicates an expected call of UpdateNAC.
func (mr *MockManagerMockRecorder) UpdateNAC(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNAC", reflect.TypeOf((*MockManager)(nil).UpdateNAC), ctx, req)
}

// UpdateNotice mocks base method.
func (m *MockManager) UpdateNotice(c echo.Context, req *request17.UpdateNoticeRequest) (*response17.UpdateNoticeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotice", c, req)
	ret0, _ := ret[0].(*response17.UpdateNoticeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotice indicates an expected call of UpdateNotice.
func (mr *MockManagerMockRecorder) UpdateNotice(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotice", reflect.TypeOf((*MockManager)(nil).UpdateNotice), c, req)
}

// UpdateOffer mocks base method.
func (m *MockManager) UpdateOffer(c echo.Context, req *request19.Update) (*response20.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", c, req)
	ret0, _ := ret[0].(*response20.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockManagerMockRecorder) UpdateOffer(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockManager)(nil).UpdateOffer), c, req)
}

// UpdatePersonalMentorshipSchedule mocks base method.
func (m *MockManager) UpdatePersonalMentorshipSchedule(c echo.Context, request *request3.UpdatePersonalMentorshipRequest) (*response3.UpdatePersonalMentorshipReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonalMentorshipSchedule", c, request)
	ret0, _ := ret[0].(*response3.UpdatePersonalMentorshipReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonalMentorshipSchedule indicates an expected call of UpdatePersonalMentorshipSchedule.
func (mr *MockManagerMockRecorder) UpdatePersonalMentorshipSchedule(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonalMentorshipSchedule", reflect.TypeOf((*MockManager)(nil).UpdatePersonalMentorshipSchedule), c, request)
}

// UpdatePhase mocks base method.
func (m *MockManager) UpdatePhase(c echo.Context, arg1 *config.Config, request *request25.UpdatePhaseRequest) (*response26.UpdatePhaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", c, arg1, request)
	ret0, _ := ret[0].(*response26.UpdatePhaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockManagerMockRecorder) UpdatePhase(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockManager)(nil).UpdatePhase), c, arg1, request)
}

// UpdatePolicy mocks base method.
func (m *MockManager) UpdatePolicy(c echo.Context, request *request22.UpdatePolicyRequest) (*response23.UpdatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", c, request)
	ret0, _ := ret[0].(*response23.UpdatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockManagerMockRecorder) UpdatePolicy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockManager)(nil).UpdatePolicy), c, request)
}

// UpdatePptConversionStatus mocks base method.
func (m *MockManager) UpdatePptConversionStatus(c echo.Context, cnf *config.Config, request *request7.UpdatePptConversionStatusRequest) (*response7.UpdatePptConversionStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePptConversionStatus", c, cnf, request)
	ret0, _ := ret[0].(*response7.UpdatePptConversionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePptConversionStatus indicates an expected call of UpdatePptConversionStatus.
func (mr *MockManagerMockRecorder) UpdatePptConversionStatus(c, cnf, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePptConversionStatus", reflect.TypeOf((*MockManager)(nil).UpdatePptConversionStatus), c, cnf, request)
}

// UpdatePurchaserDetails mocks base method.
func (m *MockManager) UpdatePurchaserDetails(c echo.Context, req *request5.UpdatePurchaserDetailsRequest) (*response5.UpdatePurchaserDetailsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePurchaserDetails", c, req)
	ret0, _ := ret[0].(*response5.UpdatePurchaserDetailsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePurchaserDetails indicates an expected call of UpdatePurchaserDetails.
func (mr *MockManagerMockRecorder) UpdatePurchaserDetails(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePurchaserDetails", reflect.TypeOf((*MockManager)(nil).UpdatePurchaserDetails), c, req)
}

// UpdateResource mocks base method.
func (m *MockManager) UpdateResource(c echo.Context, cnf *config.Config, request *request7.UpdateMeetingResourceRequest) (*response7.UpdateMeetingResourceReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", c, cnf, request)
	ret0, _ := ret[0].(*response7.UpdateMeetingResourceReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockManagerMockRecorder) UpdateResource(c, cnf, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockManager)(nil).UpdateResource), c, cnf, request)
}

// UpdateTaxonomy mocks base method.
func (m *MockManager) UpdateTaxonomy(c echo.Context, request *request28.UpdateTaxonomyRequest) (*response29.UpdateTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaxonomy", c, request)
	ret0, _ := ret[0].(*response29.UpdateTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaxonomy indicates an expected call of UpdateTaxonomy.
func (mr *MockManagerMockRecorder) UpdateTaxonomy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaxonomy", reflect.TypeOf((*MockManager)(nil).UpdateTaxonomy), c, request)
}

// UpdateTaxonomyNode mocks base method.
func (m *MockManager) UpdateTaxonomyNode(c echo.Context, request *request28.UpdateNodeInTaxonomyRequest) (*response29.UpdateNodeInTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaxonomyNode", c, request)
	ret0, _ := ret[0].(*response29.UpdateNodeInTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaxonomyNode indicates an expected call of UpdateTaxonomyNode.
func (mr *MockManagerMockRecorder) UpdateTaxonomyNode(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaxonomyNode", reflect.TypeOf((*MockManager)(nil).UpdateTaxonomyNode), c, request)
}

// UpdateTest mocks base method.
func (m *MockManager) UpdateTest(ctx echo.Context, request *request31.UpdateTestRequest) (*reply0.GetTestReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTest", ctx, request)
	ret0, _ := ret[0].(*reply0.GetTestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTest indicates an expected call of UpdateTest.
func (mr *MockManagerMockRecorder) UpdateTest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTest", reflect.TypeOf((*MockManager)(nil).UpdateTest), ctx, request)
}

// UpdateTestCorrection mocks base method.
func (m *MockManager) UpdateTestCorrection(ctx echo.Context, request *request31.UpdateTestCorrectionRequest) (*reply0.UpdateTestCorrectionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestCorrection", ctx, request)
	ret0, _ := ret[0].(*reply0.UpdateTestCorrectionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestCorrection indicates an expected call of UpdateTestCorrection.
func (mr *MockManagerMockRecorder) UpdateTestCorrection(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestCorrection", reflect.TypeOf((*MockManager)(nil).UpdateTestCorrection), ctx, request)
}

// UpdateTestStatus mocks base method.
func (m *MockManager) UpdateTestStatus(ctx echo.Context, request *request31.UpdateTestStatusRequest) (*reply0.UpdateTestStatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestStatus", ctx, request)
	ret0, _ := ret[0].(*reply0.UpdateTestStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestStatus indicates an expected call of UpdateTestStatus.
func (mr *MockManagerMockRecorder) UpdateTestStatus(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestStatus", reflect.TypeOf((*MockManager)(nil).UpdateTestStatus), ctx, request)
}

// UpdateThumbnail mocks base method.
func (m *MockManager) UpdateThumbnail(ctx echo.Context, req *request14.ThumbnailUpdateRequest) (*response14.ThumbnailUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThumbnail", ctx, req)
	ret0, _ := ret[0].(*response14.ThumbnailUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThumbnail indicates an expected call of UpdateThumbnail.
func (mr *MockManagerMockRecorder) UpdateThumbnail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThumbnail", reflect.TypeOf((*MockManager)(nil).UpdateThumbnail), ctx, req)
}

// UpdateUser mocks base method.
func (m *MockManager) UpdateUser(c echo.Context, req *request36.UpdateUserRequest) (*response34.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", c, req)
	ret0, _ := ret[0].(*response34.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockManagerMockRecorder) UpdateUser(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockManager)(nil).UpdateUser), c, req)
}

// UpdateUserConflict mocks base method.
func (m *MockManager) UpdateUserConflict(c echo.Context, req *request26.UpdateUserConflictRequest) (*response27.UpdateUserConflictResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConflict", c, req)
	ret0, _ := ret[0].(*response27.UpdateUserConflictResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserConflict indicates an expected call of UpdateUserConflict.
func (mr *MockManagerMockRecorder) UpdateUserConflict(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConflict", reflect.TypeOf((*MockManager)(nil).UpdateUserConflict), c, req)
}

// UpdateUserPersonaType mocks base method.
func (m *MockManager) UpdateUserPersonaType(c echo.Context, userIDs []string, currentPersonaType, newPersonaType types1.PersonaType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPersonaType", c, userIDs, currentPersonaType, newPersonaType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPersonaType indicates an expected call of UpdateUserPersonaType.
func (mr *MockManagerMockRecorder) UpdateUserPersonaType(c, userIDs, currentPersonaType, newPersonaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPersonaType", reflect.TypeOf((*MockManager)(nil).UpdateUserPersonaType), c, userIDs, currentPersonaType, newPersonaType)
}

// UpdateVerificationResourceByUserID mocks base method.
func (m *MockManager) UpdateVerificationResourceByUserID(c echo.Context, req *request36.UpdateVerificationResourceByUserIDRequest) (*response34.UpdateVerificationResourceByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerificationResourceByUserID", c, req)
	ret0, _ := ret[0].(*response34.UpdateVerificationResourceByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerificationResourceByUserID indicates an expected call of UpdateVerificationResourceByUserID.
func (mr *MockManagerMockRecorder) UpdateVerificationResourceByUserID(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerificationResourceByUserID", reflect.TypeOf((*MockManager)(nil).UpdateVerificationResourceByUserID), c, req)
}

// UploadBulkBatchCreate mocks base method.
func (m *MockManager) UploadBulkBatchCreate(c echo.Context, request *request25.BulkBatchCreateUploadRequest) (*response26.BulkBatchCreateUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBulkBatchCreate", c, request)
	ret0, _ := ret[0].(*response26.BulkBatchCreateUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBulkBatchCreate indicates an expected call of UploadBulkBatchCreate.
func (mr *MockManagerMockRecorder) UploadBulkBatchCreate(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBulkBatchCreate", reflect.TypeOf((*MockManager)(nil).UploadBulkBatchCreate), c, request)
}

// UploadChaptersFile mocks base method.
func (m *MockManager) UploadChaptersFile(ctx echo.Context, req *request14.UploadChaptersFileRequest) (*response14.UploadChaptersFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChaptersFile", ctx, req)
	ret0, _ := ret[0].(*response14.UploadChaptersFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadChaptersFile indicates an expected call of UploadChaptersFile.
func (mr *MockManagerMockRecorder) UploadChaptersFile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChaptersFile", reflect.TypeOf((*MockManager)(nil).UploadChaptersFile), ctx, req)
}

// UploadClassSchedule mocks base method.
func (m *MockManager) UploadClassSchedule(c echo.Context, md metadata.MD, request *request25.ClassSchedulesUploadRequest) (*response26.ClassSchedulesUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadClassSchedule", c, md, request)
	ret0, _ := ret[0].(*response26.ClassSchedulesUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadClassSchedule indicates an expected call of UploadClassSchedule.
func (mr *MockManagerMockRecorder) UploadClassSchedule(c, md, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadClassSchedule", reflect.TypeOf((*MockManager)(nil).UploadClassSchedule), c, md, request)
}

// UploadLecturePlan mocks base method.
func (m *MockManager) UploadLecturePlan(c echo.Context, md metadata.MD, request *request25.LecturePlansUploadRequest) (*response26.LecturePlansUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLecturePlan", c, md, request)
	ret0, _ := ret[0].(*response26.LecturePlansUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLecturePlan indicates an expected call of UploadLecturePlan.
func (mr *MockManagerMockRecorder) UploadLecturePlan(c, md, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLecturePlan", reflect.TypeOf((*MockManager)(nil).UploadLecturePlan), c, md, request)
}

// UploadOfflineCorrectionResponse mocks base method.
func (m *MockManager) UploadOfflineCorrectionResponse(ctx echo.Context, testID, fileID, userID string) (*reply0.UploadOfflineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOfflineCorrectionResponse", ctx, testID, fileID, userID)
	ret0, _ := ret[0].(*reply0.UploadOfflineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadOfflineCorrectionResponse indicates an expected call of UploadOfflineCorrectionResponse.
func (mr *MockManagerMockRecorder) UploadOfflineCorrectionResponse(ctx, testID, fileID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOfflineCorrectionResponse", reflect.TypeOf((*MockManager)(nil).UploadOfflineCorrectionResponse), ctx, testID, fileID, userID)
}

// UploadOfflineResponse mocks base method.
func (m *MockManager) UploadOfflineResponse(ctx echo.Context, testID, userID string) (*reply0.UploadOfflineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOfflineResponse", ctx, testID, userID)
	ret0, _ := ret[0].(*reply0.UploadOfflineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadOfflineResponse indicates an expected call of UploadOfflineResponse.
func (mr *MockManagerMockRecorder) UploadOfflineResponse(ctx, testID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOfflineResponse", reflect.TypeOf((*MockManager)(nil).UploadOfflineResponse), ctx, testID, userID)
}

// UploadPartPresignedURLForMaterial mocks base method.
func (m *MockManager) UploadPartPresignedURLForMaterial(ctx echo.Context, req *request14.GetPresignedURLLearningMaterialUploadPartRequest) (*response14.GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPartPresignedURLForMaterial", ctx, req)
	ret0, _ := ret[0].(*response14.GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartPresignedURLForMaterial indicates an expected call of UploadPartPresignedURLForMaterial.
func (mr *MockManagerMockRecorder) UploadPartPresignedURLForMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartPresignedURLForMaterial", reflect.TypeOf((*MockManager)(nil).UploadPartPresignedURLForMaterial), ctx, req)
}

// UploadTaxonomy mocks base method.
func (m *MockManager) UploadTaxonomy(c echo.Context, request *request28.UploadTaxonomyRequest) (*response29.UploadTaxonomyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTaxonomy", c, request)
	ret0, _ := ret[0].(*response29.UploadTaxonomyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTaxonomy indicates an expected call of UploadTaxonomy.
func (mr *MockManagerMockRecorder) UploadTaxonomy(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTaxonomy", reflect.TypeOf((*MockManager)(nil).UploadTaxonomy), c, request)
}

// UploadUserAttribute mocks base method.
func (m *MockManager) UploadUserAttribute(c echo.Context, req *request8.UploadUserAttributeRequest) (*response8.UserAttributeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAttribute", c, req)
	ret0, _ := ret[0].(*response8.UserAttributeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAttribute indicates an expected call of UploadUserAttribute.
func (mr *MockManagerMockRecorder) UploadUserAttribute(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAttribute", reflect.TypeOf((*MockManager)(nil).UploadUserAttribute), c, req)
}

// ValidateBatchCode mocks base method.
func (m *MockManager) ValidateBatchCode(c echo.Context, request *request25.ValidateBatchCodeRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBatchCode", c, request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBatchCode indicates an expected call of ValidateBatchCode.
func (mr *MockManagerMockRecorder) ValidateBatchCode(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBatchCode", reflect.TypeOf((*MockManager)(nil).ValidateBatchCode), c, request)
}

// ValidateBulkCreateRequest mocks base method.
func (m *MockManager) ValidateBulkCreateRequest(ctx echo.Context, req *lmm.BulkCreateValidationRequest) (*lmm.BulkRequestUIValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBulkCreateRequest", ctx, req)
	ret0, _ := ret[0].(*lmm.BulkRequestUIValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBulkCreateRequest indicates an expected call of ValidateBulkCreateRequest.
func (mr *MockManagerMockRecorder) ValidateBulkCreateRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBulkCreateRequest", reflect.TypeOf((*MockManager)(nil).ValidateBulkCreateRequest), ctx, req)
}

// ValidateClassSchedules mocks base method.
func (m *MockManager) ValidateClassSchedules(c echo.Context, request *request25.ClassScheduleValidateRequest) (*response26.ClassScheduleValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClassSchedules", c, request)
	ret0, _ := ret[0].(*response26.ClassScheduleValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClassSchedules indicates an expected call of ValidateClassSchedules.
func (mr *MockManagerMockRecorder) ValidateClassSchedules(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClassSchedules", reflect.TypeOf((*MockManager)(nil).ValidateClassSchedules), c, request)
}

// ValidateLecturePlans mocks base method.
func (m *MockManager) ValidateLecturePlans(c echo.Context, request *request25.LecturePlansValidateRequest) (*response26.LecturePlansValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLecturePlans", c, request)
	ret0, _ := ret[0].(*response26.LecturePlansValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateLecturePlans indicates an expected call of ValidateLecturePlans.
func (mr *MockManagerMockRecorder) ValidateLecturePlans(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLecturePlans", reflect.TypeOf((*MockManager)(nil).ValidateLecturePlans), c, request)
}

// ValidateQuestionPaper mocks base method.
func (m *MockManager) ValidateQuestionPaper(ctx echo.Context, request *request31.ValidateQuestionPaperRequest) (*reply0.ValidateQuestionPaperReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuestionPaper", ctx, request)
	ret0, _ := ret[0].(*reply0.ValidateQuestionPaperReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateQuestionPaper indicates an expected call of ValidateQuestionPaper.
func (mr *MockManagerMockRecorder) ValidateQuestionPaper(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuestionPaper", reflect.TypeOf((*MockManager)(nil).ValidateQuestionPaper), ctx, request)
}

// ValidateQuestionSet mocks base method.
func (m *MockManager) ValidateQuestionSet(ctx echo.Context, req *v12.ValidateQuestionSetRequest) (*v12.ValidateQuestionSetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuestionSet", ctx, req)
	ret0, _ := ret[0].(*v12.ValidateQuestionSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateQuestionSet indicates an expected call of ValidateQuestionSet.
func (mr *MockManagerMockRecorder) ValidateQuestionSet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuestionSet", reflect.TypeOf((*MockManager)(nil).ValidateQuestionSet), ctx, req)
}

// ValidateSyllabusNodeDeletion mocks base method.
func (m *MockManager) ValidateSyllabusNodeDeletion(c echo.Context, arg1 *config.Config, request *request25.ValidateSyllabusNodeDeletionRequest) (*response26.ValidateSyllabusNodeDeletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSyllabusNodeDeletion", c, arg1, request)
	ret0, _ := ret[0].(*response26.ValidateSyllabusNodeDeletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSyllabusNodeDeletion indicates an expected call of ValidateSyllabusNodeDeletion.
func (mr *MockManagerMockRecorder) ValidateSyllabusNodeDeletion(c, arg1, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSyllabusNodeDeletion", reflect.TypeOf((*MockManager)(nil).ValidateSyllabusNodeDeletion), c, arg1, request)
}

// ValidateThumbnailCreateRequestBulk mocks base method.
func (m *MockManager) ValidateThumbnailCreateRequestBulk(ctx echo.Context, req *lmm.BulkThumbnailCreateValidationRequest) (*lmm.BulkThumbnailValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateThumbnailCreateRequestBulk", ctx, req)
	ret0, _ := ret[0].(*lmm.BulkThumbnailValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateThumbnailCreateRequestBulk indicates an expected call of ValidateThumbnailCreateRequestBulk.
func (mr *MockManagerMockRecorder) ValidateThumbnailCreateRequestBulk(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateThumbnailCreateRequestBulk", reflect.TypeOf((*MockManager)(nil).ValidateThumbnailCreateRequestBulk), ctx, req)
}

// VerifyOTP mocks base method.
func (m *MockManager) VerifyOTP(c echo.Context, cnf *config.Config, req *request.VerifyOtpRequest) (*response.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", c, cnf, req)
	ret0, _ := ret[0].(*response.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockManagerMockRecorder) VerifyOTP(c, cnf, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockManager)(nil).VerifyOTP), c, cnf, req)
}

// ViewMappings mocks base method.
func (m *MockManager) ViewMappings(c echo.Context, request *request28.ViewMappingRequest) (*response29.ViewMappingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMappings", c, request)
	ret0, _ := ret[0].(*response29.ViewMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMappings indicates an expected call of ViewMappings.
func (mr *MockManagerMockRecorder) ViewMappings(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMappings", reflect.TypeOf((*MockManager)(nil).ViewMappings), c, request)
}
