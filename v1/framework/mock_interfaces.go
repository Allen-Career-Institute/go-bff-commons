// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package framework is a generated GoMock package.
package framework

import (
	config "bff-service/config"
	datasource "bff-service/framework/datasource"
	commons "bff-service/intrnl/models/commons"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockDatasourceMappingsManager is a mock of DatasourceMappingsManager interface.
type MockDatasourceMappingsManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatasourceMappingsManagerMockRecorder
}

// MockDatasourceMappingsManagerMockRecorder is the mock recorder for MockDatasourceMappingsManager.
type MockDatasourceMappingsManagerMockRecorder struct {
	mock *MockDatasourceMappingsManager
}

// NewMockDatasourceMappingsManager creates a new mock instance.
func NewMockDatasourceMappingsManager(ctrl *gomock.Controller) *MockDatasourceMappingsManager {
	mock := &MockDatasourceMappingsManager{ctrl: ctrl}
	mock.recorder = &MockDatasourceMappingsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatasourceMappingsManager) EXPECT() *MockDatasourceMappingsManagerMockRecorder {
	return m.recorder
}

// GetDataSourceByName mocks base method.
func (m *MockDatasourceMappingsManager) GetDataSourceByName(name string) *datasource.DataSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceByName", name)
	ret0, _ := ret[0].(*datasource.DataSource)
	return ret0
}

// GetDataSourceByName indicates an expected call of GetDataSourceByName.
func (mr *MockDatasourceMappingsManagerMockRecorder) GetDataSourceByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceByName", reflect.TypeOf((*MockDatasourceMappingsManager)(nil).GetDataSourceByName), name)
}

// GetDataSourcesByNameMap mocks base method.
func (m *MockDatasourceMappingsManager) GetDataSourcesByNameMap() map[string]*datasource.DataSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourcesByNameMap")
	ret0, _ := ret[0].(map[string]*datasource.DataSource)
	return ret0
}

// GetDataSourcesByNameMap indicates an expected call of GetDataSourcesByNameMap.
func (mr *MockDatasourceMappingsManagerMockRecorder) GetDataSourcesByNameMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourcesByNameMap", reflect.TypeOf((*MockDatasourceMappingsManager)(nil).GetDataSourcesByNameMap))
}

// GetSharedDS mocks base method.
func (m *MockDatasourceMappingsManager) GetSharedDS(c echo.Context, dsName string, cnf *config.Config) *commons.DSResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedDS", c, dsName, cnf)
	ret0, _ := ret[0].(*commons.DSResponse)
	return ret0
}

// GetSharedDS indicates an expected call of GetSharedDS.
func (mr *MockDatasourceMappingsManagerMockRecorder) GetSharedDS(c, dsName, cnf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedDS", reflect.TypeOf((*MockDatasourceMappingsManager)(nil).GetSharedDS), c, dsName, cnf)
}

// RegisterDataSource mocks base method.
func (m *MockDatasourceMappingsManager) RegisterDataSource(ds *datasource.DataSource) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDataSource", ds)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegisterDataSource indicates an expected call of RegisterDataSource.
func (mr *MockDatasourceMappingsManagerMockRecorder) RegisterDataSource(ds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDataSource", reflect.TypeOf((*MockDatasourceMappingsManager)(nil).RegisterDataSource), ds)
}
