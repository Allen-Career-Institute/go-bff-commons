// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package utils is a generated GoMock package.
package framework

//TODO: (To avoid cyclic dependency) currently this mock file is placed in the this directory. It should be ideally placed the same as dynamicconfig directory.

import (
	reflect "reflect"

	configs "github.com/Allen-Career-Institute/go-kratos-commons/dynamicconfig/v1/configs"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// MockDynamicConfig is a mock of DynamicConfig interface.
type MockDynamicConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicConfigMockRecorder
}

// MockDynamicConfigMockRecorder is the mock recorder for MockDynamicConfig.
type MockDynamicConfigMockRecorder struct {
	mock *MockDynamicConfig
}

// NewMockDynamicConfig creates a new mock instance.
func NewMockDynamicConfig(ctrl *gomock.Controller) *MockDynamicConfig {
	mock := &MockDynamicConfig{ctrl: ctrl}
	mock.recorder = &MockDynamicConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicConfig) EXPECT() *MockDynamicConfigMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDynamicConfig) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDynamicConfigMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDynamicConfig)(nil).Get), key)
}

// GetAsInterface mocks base method.
func (m *MockDynamicConfig) GetAsInterface(key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsInterface", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsInterface indicates an expected call of GetAsInterface.
func (mr *MockDynamicConfigMockRecorder) GetAsInterface(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsInterface", reflect.TypeOf((*MockDynamicConfig)(nil).GetAsInterface), key)
}

// Init mocks base method.
func (m *MockDynamicConfig) Init(config *configs.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDynamicConfigMockRecorder) Init(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDynamicConfig)(nil).Init), config)
}
