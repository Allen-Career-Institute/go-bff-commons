// Code generated by MockGen. DO NOT EDIT.
// Source: planning_and_scheduling_ds.go

// Package httpwrapper is a generated GoMock package.
package httpwrapper

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHTTPClient is a mock of IHTTPClient interface.
type MockIHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockIHTTPClientMockRecorder
}

// MockIHTTPClientMockRecorder is the mock recorder for MockIHTTPClient.
type MockIHTTPClientMockRecorder struct {
	mock *MockIHTTPClient
}

// NewMockIHTTPClient creates a new mock instance.
func NewMockIHTTPClient(ctrl *gomock.Controller) *MockIHTTPClient {
	mock := &MockIHTTPClient{ctrl: ctrl}
	mock.recorder = &MockIHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHTTPClient) EXPECT() *MockIHTTPClientMockRecorder {
	return m.recorder
}

// MakeHttpCall mocks base method.
func (m *MockIHTTPClient) MakeHttpCall(url, method string, payload map[string]interface{}, headers map[string]string, requestCookies []*http.Cookie) ([]byte, []*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHttpCall", url, method, payload, headers, requestCookies)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]*http.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeHttpCall indicates an expected call of MakeHttpCall.
func (mr *MockIHTTPClientMockRecorder) MakeHttpCall(url, method, payload, headers, requestCookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHttpCall", reflect.TypeOf((*MockIHTTPClient)(nil).MakeHttpCall), url, method, payload, headers, requestCookies)
}
